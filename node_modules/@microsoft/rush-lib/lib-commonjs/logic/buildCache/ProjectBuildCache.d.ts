import type { ITerminal } from '@rushstack/terminal';
import type { RushConfigurationProject } from '../../api/RushConfigurationProject';
import type { BuildCacheConfiguration } from '../../api/BuildCacheConfiguration';
export interface IProjectBuildCacheOptions {
    /**
     * The repo-wide configuration for the build cache.
     */
    buildCacheConfiguration: BuildCacheConfiguration;
    /**
     * The project to be cached.
     */
    project: RushConfigurationProject;
    /**
     * Value from rush-project.json
     */
    projectOutputFolderNames: ReadonlyArray<string>;
    /**
     * The hash of all relevant inputs and configuration that uniquely identifies this execution.
     */
    operationStateHash: string;
    /**
     * The terminal to use for logging.
     */
    terminal: ITerminal;
    /**
     * The name of the phase that is being cached.
     */
    phaseName: string;
}
export declare class ProjectBuildCache {
    private static _tarUtilityPromise;
    private readonly _project;
    private readonly _localBuildCacheProvider;
    private readonly _cloudBuildCacheProvider;
    private readonly _buildCacheEnabled;
    private readonly _cacheWriteEnabled;
    private readonly _projectOutputFolderNames;
    private readonly _cacheId;
    private constructor();
    private static _tryGetTarUtility;
    get cacheId(): string | undefined;
    static getProjectBuildCache(options: IProjectBuildCacheOptions): ProjectBuildCache;
    tryRestoreFromCacheAsync(terminal: ITerminal, specifiedCacheId?: string): Promise<boolean>;
    trySetCacheEntryAsync(terminal: ITerminal, specifiedCacheId?: string): Promise<boolean>;
    /**
     * Walks the declared output folders of the project and collects a list of files.
     * @returns The list of output files as project-relative paths, or `undefined` if a
     *   symbolic link was encountered.
     */
    private _tryCollectPathsToCacheAsync;
    private _getTarLogFilePath;
    private static _getCacheId;
}
//# sourceMappingURL=ProjectBuildCache.d.ts.map