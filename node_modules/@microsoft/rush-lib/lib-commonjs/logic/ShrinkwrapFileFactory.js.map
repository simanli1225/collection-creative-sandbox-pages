{"version":3,"file":"ShrinkwrapFileFactory.js","sourceRoot":"","sources":["../../src/logic/ShrinkwrapFileFactory.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAK3D,+DAA4D;AAC5D,kEAA+D;AAC/D,kEAA+D;AAE/D,MAAa,qBAAqB;IACzB,MAAM,CAAC,iBAAiB,CAC7B,cAAkC,EAClC,qBAA6D,EAC7D,kBAA0B;QAE1B,QAAQ,cAAc,EAAE,CAAC;YACvB,KAAK,KAAK;gBACR,OAAO,qCAAiB,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;YAC5D,KAAK,MAAM;gBACT,OAAO,uCAAkB,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;YAC7D,KAAK,MAAM;gBACT,OAAO,uCAAkB,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;YAC7D;gBACE,MAAM,IAAI,KAAK,CAAC,4BAA4B,cAAc,EAAE,CAAC,CAAC;QAClE,CAAC;IACH,CAAC;IAEM,MAAM,CAAC,mBAAmB,CAC/B,cAAkC,EAClC,qBAA6D,EAC7D,iBAAyB;QAEzB,QAAQ,cAAc,EAAE,CAAC;YACvB,KAAK,KAAK;gBACR,OAAO,qCAAiB,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;YAC7D,KAAK,MAAM;gBACT,OAAO,uCAAkB,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;YAC9D,KAAK,MAAM;gBACT,OAAO,uCAAkB,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;YAC9D;gBACE,MAAM,IAAI,KAAK,CAAC,4BAA4B,cAAc,EAAE,CAAC,CAAC;QAClE,CAAC;IACH,CAAC;CACF;AAlCD,sDAkCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { PackageManagerName } from '../api/packageManager/PackageManager';\nimport type { PackageManagerOptionsConfigurationBase } from './base/BasePackageManagerOptionsConfiguration';\nimport type { BaseShrinkwrapFile } from './base/BaseShrinkwrapFile';\nimport { NpmShrinkwrapFile } from './npm/NpmShrinkwrapFile';\nimport { PnpmShrinkwrapFile } from './pnpm/PnpmShrinkwrapFile';\nimport { YarnShrinkwrapFile } from './yarn/YarnShrinkwrapFile';\n\nexport class ShrinkwrapFileFactory {\n  public static getShrinkwrapFile(\n    packageManager: PackageManagerName,\n    packageManagerOptions: PackageManagerOptionsConfigurationBase,\n    shrinkwrapFilename: string\n  ): BaseShrinkwrapFile | undefined {\n    switch (packageManager) {\n      case 'npm':\n        return NpmShrinkwrapFile.loadFromFile(shrinkwrapFilename);\n      case 'pnpm':\n        return PnpmShrinkwrapFile.loadFromFile(shrinkwrapFilename);\n      case 'yarn':\n        return YarnShrinkwrapFile.loadFromFile(shrinkwrapFilename);\n      default:\n        throw new Error(`Invalid package manager: ${packageManager}`);\n    }\n  }\n\n  public static parseShrinkwrapFile(\n    packageManager: PackageManagerName,\n    packageManagerOptions: PackageManagerOptionsConfigurationBase,\n    shrinkwrapContent: string\n  ): BaseShrinkwrapFile | undefined {\n    switch (packageManager) {\n      case 'npm':\n        return NpmShrinkwrapFile.loadFromString(shrinkwrapContent);\n      case 'pnpm':\n        return PnpmShrinkwrapFile.loadFromString(shrinkwrapContent);\n      case 'yarn':\n        return YarnShrinkwrapFile.loadFromString(shrinkwrapContent);\n      default:\n        throw new Error(`Invalid package manager: ${packageManager}`);\n    }\n  }\n}\n"]}