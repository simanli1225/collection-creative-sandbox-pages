{"version":3,"file":"chunks/lib-esnext_utilities_WebClient_js.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACyB;AACU;AACC;AACkB;AACtD;AACA;AACA;AACA;AACA,8BAA8B,gEAAM;AACpC;AACA,iBAAiB,gBAAgB;AACjC;AACO;AACP;AACA;AACA;AACA;AACA,CAAC,wCAAwC;AACzC;AACA;AACA;AACO;AACP;AACA,mCAAmC,+CAAa;AAChD;AACA,sCAAsC,4CAAe,EAAE,EAAE,wCAAW,IAAI,EAAE,oCAAO,GAAG;AACpF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,4BAA4B,+CAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wCAAW;AAC/B,+BAA+B,wCAAW;AAC1C;AACA,yBAAyB,wCAAW;AACpC,+BAA+B,wCAAW;AAC1C;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+IAA+I;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iDAAa;AAClC;AACA;AACA","sources":["webpack://@microsoft/rush-lib/./lib-esnext/utilities/WebClient.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nimport * as os from 'os';\nimport * as process from 'process';\nimport * as fetch from 'node-fetch';\nimport { Import } from '@rushstack/node-core-library';\n// ===================================================================================================================\n// AS A TEMPORARY WORKAROUND, THIS FILE WAS COPY+PASTED INTO THE \"rush-amazon-s3-build-cache-plugin\" PROJECT.\n// See that copy for notes.\n// ===================================================================================================================\nconst createHttpsProxyAgent = Import.lazy('https-proxy-agent', require);\n/**\n * For use with {@link WebClient}.\n */\nexport var WebClientProxy;\n(function (WebClientProxy) {\n    WebClientProxy[WebClientProxy[\"None\"] = 0] = \"None\";\n    WebClientProxy[WebClientProxy[\"Detect\"] = 1] = \"Detect\";\n    WebClientProxy[WebClientProxy[\"Fiddler\"] = 2] = \"Fiddler\";\n})(WebClientProxy || (WebClientProxy = {}));\n/**\n * A helper for issuing HTTP requests.\n */\nexport class WebClient {\n    constructor() {\n        this.standardHeaders = new fetch.Headers();\n        this.accept = '*/*';\n        this.userAgent = `rush node/${process.version} ${os.platform()} ${os.arch()}`;\n        this.proxy = WebClientProxy.Detect;\n    }\n    static mergeHeaders(target, source) {\n        source.forEach((value, name) => {\n            target.set(name, value);\n        });\n    }\n    addBasicAuthHeader(userName, password) {\n        this.standardHeaders.set('Authorization', 'Basic ' + Buffer.from(userName + ':' + password).toString('base64'));\n    }\n    async fetchAsync(url, options) {\n        const headers = new fetch.Headers();\n        WebClient.mergeHeaders(headers, this.standardHeaders);\n        if (options === null || options === void 0 ? void 0 : options.headers) {\n            WebClient.mergeHeaders(headers, options.headers);\n        }\n        if (this.userAgent) {\n            headers.set('user-agent', this.userAgent);\n        }\n        if (this.accept) {\n            headers.set('accept', this.accept);\n        }\n        let proxyUrl = '';\n        switch (this.proxy) {\n            case WebClientProxy.Detect:\n                if (process.env.HTTPS_PROXY) {\n                    proxyUrl = process.env.HTTPS_PROXY;\n                }\n                else if (process.env.HTTP_PROXY) {\n                    proxyUrl = process.env.HTTP_PROXY;\n                }\n                break;\n            case WebClientProxy.Fiddler:\n                // For debugging, disable cert validation\n                // eslint-disable-next-line\n                process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';\n                proxyUrl = 'http://localhost:8888/';\n                break;\n        }\n        let agent = undefined;\n        if (proxyUrl) {\n            agent = createHttpsProxyAgent(proxyUrl);\n        }\n        const timeoutMs = (options === null || options === void 0 ? void 0 : options.timeoutMs) !== undefined ? options.timeoutMs : 15 * 1000; // 15 seconds\n        const requestInit = {\n            method: options === null || options === void 0 ? void 0 : options.verb,\n            headers: headers,\n            agent: agent,\n            timeout: timeoutMs\n        };\n        const putOptions = options;\n        if (putOptions === null || putOptions === void 0 ? void 0 : putOptions.body) {\n            requestInit.body = putOptions.body;\n        }\n        return await fetch.default(url, requestInit);\n    }\n}\n//# sourceMappingURL=WebClient.js.map"],"names":[],"sourceRoot":""}