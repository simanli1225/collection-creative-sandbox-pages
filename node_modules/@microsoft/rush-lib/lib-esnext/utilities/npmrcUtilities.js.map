{"version":3,"file":"npmrcUtilities.js","sourceRoot":"","sources":["../../src/utilities/npmrcUtilities.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n// IMPORTANT - do not use any non-built-in libraries in this file\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport interface ILogger {\n  info: (string: string) => void;\n  error: (string: string) => void;\n}\n\n/**\n * This function reads the content for given .npmrc file path, and also trims\n * unusable lines from the .npmrc file.\n *\n * @returns\n * The text of the the .npmrc.\n */\n\n// create a global _combinedNpmrc for cache purpose\nconst _combinedNpmrcMap: Map<string, string> = new Map();\n\nfunction _trimNpmrcFile(options: {\n  sourceNpmrcPath: string;\n  linesToPrepend?: string[];\n  linesToAppend?: string[];\n}): string {\n  const { sourceNpmrcPath, linesToPrepend, linesToAppend } = options;\n  const combinedNpmrcFromCache: string | undefined = _combinedNpmrcMap.get(sourceNpmrcPath);\n  if (combinedNpmrcFromCache !== undefined) {\n    return combinedNpmrcFromCache;\n  }\n  let npmrcFileLines: string[] = [];\n  if (linesToPrepend) {\n    npmrcFileLines.push(...linesToPrepend);\n  }\n  if (fs.existsSync(sourceNpmrcPath)) {\n    npmrcFileLines.push(...fs.readFileSync(sourceNpmrcPath).toString().split('\\n'));\n  }\n  if (linesToAppend) {\n    npmrcFileLines.push(...linesToAppend);\n  }\n  npmrcFileLines = npmrcFileLines.map((line) => (line || '').trim());\n  const resultLines: string[] = [];\n\n  // This finds environment variable tokens that look like \"${VAR_NAME}\"\n  const expansionRegExp: RegExp = /\\$\\{([^\\}]+)\\}/g;\n\n  // Comment lines start with \"#\" or \";\"\n  const commentRegExp: RegExp = /^\\s*[#;]/;\n\n  // Trim out lines that reference environment variables that aren't defined\n  for (let line of npmrcFileLines) {\n    let lineShouldBeTrimmed: boolean = false;\n\n    //remove spaces before or after key and value\n    line = line\n      .split('=')\n      .map((lineToTrim) => lineToTrim.trim())\n      .join('=');\n\n    // Ignore comment lines\n    if (!commentRegExp.test(line)) {\n      const environmentVariables: string[] | null = line.match(expansionRegExp);\n      if (environmentVariables) {\n        for (const token of environmentVariables) {\n          // Remove the leading \"${\" and the trailing \"}\" from the token\n          const environmentVariableName: string = token.substring(2, token.length - 1);\n\n          // Is the environment variable defined?\n          if (!process.env[environmentVariableName]) {\n            // No, so trim this line\n            lineShouldBeTrimmed = true;\n            break;\n          }\n        }\n      }\n    }\n\n    if (lineShouldBeTrimmed) {\n      // Example output:\n      // \"; MISSING ENVIRONMENT VARIABLE: //my-registry.com/npm/:_authToken=${MY_AUTH_TOKEN}\"\n      resultLines.push('; MISSING ENVIRONMENT VARIABLE: ' + line);\n    } else {\n      resultLines.push(line);\n    }\n  }\n\n  const combinedNpmrc: string = resultLines.join('\\n');\n\n  //save the cache\n  _combinedNpmrcMap.set(sourceNpmrcPath, combinedNpmrc);\n\n  return combinedNpmrc;\n}\n\n/**\n * As a workaround, copyAndTrimNpmrcFile() copies the .npmrc file to the target folder, and also trims\n * unusable lines from the .npmrc file.\n *\n * Why are we trimming the .npmrc lines?  NPM allows environment variables to be specified in\n * the .npmrc file to provide different authentication tokens for different registry.\n * However, if the environment variable is undefined, it expands to an empty string, which\n * produces a valid-looking mapping with an invalid URL that causes an error.  Instead,\n * we'd prefer to skip that line and continue looking in other places such as the user's\n * home directory.\n *\n * @returns\n * The text of the the .npmrc with lines containing undefined variables commented out.\n */\ninterface INpmrcTrimOptions {\n  sourceNpmrcPath: string;\n  targetNpmrcPath: string;\n  logger: ILogger;\n  linesToPrepend?: string[];\n  linesToAppend?: string[];\n}\nfunction _copyAndTrimNpmrcFile(options: INpmrcTrimOptions): string {\n  const { logger, sourceNpmrcPath, targetNpmrcPath, linesToPrepend, linesToAppend } = options;\n  logger.info(`Transforming ${sourceNpmrcPath}`); // Verbose\n  logger.info(`  --> \"${targetNpmrcPath}\"`);\n\n  const combinedNpmrc: string = _trimNpmrcFile({\n    sourceNpmrcPath,\n    linesToPrepend,\n    linesToAppend\n  });\n\n  fs.writeFileSync(targetNpmrcPath, combinedNpmrc);\n\n  return combinedNpmrc;\n}\n\n/**\n * syncNpmrc() copies the .npmrc file to the target folder, and also trims unusable lines from the .npmrc file.\n * If the source .npmrc file not exist, then syncNpmrc() will delete an .npmrc that is found in the target folder.\n *\n * IMPORTANT: THIS CODE SHOULD BE KEPT UP TO DATE WITH Utilities._syncNpmrc()\n *\n * @returns\n * The text of the the synced .npmrc, if one exists. If one does not exist, then undefined is returned.\n */\nexport interface ISyncNpmrcOptions {\n  sourceNpmrcFolder: string;\n  targetNpmrcFolder: string;\n  useNpmrcPublish?: boolean;\n  logger?: ILogger;\n  linesToPrepend?: string[];\n  linesToAppend?: string[];\n  createIfMissing?: boolean;\n}\nexport function syncNpmrc(options: ISyncNpmrcOptions): string | undefined {\n  const {\n    sourceNpmrcFolder,\n    targetNpmrcFolder,\n    useNpmrcPublish,\n    logger = {\n      // eslint-disable-next-line no-console\n      info: console.log,\n      // eslint-disable-next-line no-console\n      error: console.error\n    },\n    createIfMissing = false,\n    linesToAppend,\n    linesToPrepend\n  } = options;\n  const sourceNpmrcPath: string = path.join(\n    sourceNpmrcFolder,\n    !useNpmrcPublish ? '.npmrc' : '.npmrc-publish'\n  );\n  const targetNpmrcPath: string = path.join(targetNpmrcFolder, '.npmrc');\n  try {\n    if (fs.existsSync(sourceNpmrcPath) || createIfMissing) {\n      // Ensure the target folder exists\n      if (!fs.existsSync(targetNpmrcFolder)) {\n        fs.mkdirSync(targetNpmrcFolder, { recursive: true });\n      }\n      return _copyAndTrimNpmrcFile({\n        sourceNpmrcPath,\n        targetNpmrcPath,\n        logger,\n        linesToAppend,\n        linesToPrepend\n      });\n    } else if (fs.existsSync(targetNpmrcPath)) {\n      // If the source .npmrc doesn't exist and there is one in the target, delete the one in the target\n      logger.info(`Deleting ${targetNpmrcPath}`); // Verbose\n      fs.unlinkSync(targetNpmrcPath);\n    }\n  } catch (e) {\n    throw new Error(`Error syncing .npmrc file: ${e}`);\n  }\n}\n\nexport function isVariableSetInNpmrcFile(sourceNpmrcFolder: string, variableKey: string): boolean {\n  const sourceNpmrcPath: string = `${sourceNpmrcFolder}/.npmrc`;\n\n  //if .npmrc file does not exist, return false directly\n  if (!fs.existsSync(sourceNpmrcPath)) {\n    return false;\n  }\n\n  const trimmedNpmrcFile: string = _trimNpmrcFile({ sourceNpmrcPath });\n\n  const variableKeyRegExp: RegExp = new RegExp(`^${variableKey}=`, 'm');\n  return trimmedNpmrcFile.match(variableKeyRegExp) !== null;\n}\n"]}