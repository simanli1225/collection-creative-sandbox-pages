"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseManifestConfig = exports.getDefaultProjectName = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const projectRoot_1 = require("./projectRoot");
function getDefaultProjectName(projectRoot) {
    if (!path_1.default.isAbsolute(projectRoot)) {
        throw new Error(`Failed to generate default project name from path "${projectRoot}". Add a valid 'projectName' option.`);
    }
    return path_1.default.basename(projectRoot);
}
exports.getDefaultProjectName = getDefaultProjectName;
function parseManifestConfig(config, { writeToDisk } = { writeToDisk: false }) {
    config.projectRoot = config.projectRoot || projectRoot_1.getProjectRoot();
    if (!path_1.default.isAbsolute(config.projectRoot)) {
        throw new Error(`'projectRoot' is not a valid absolute path: ${config.projectRoot}`);
    }
    if (config.assetsRoot) {
        config.assetsRoot = path_1.default.resolve(config.projectRoot, config.assetsRoot);
        if (!fs_1.default.existsSync(config.assetsRoot)) {
            throw new Error(`'assetsRoot' cannot be resolved ${config.assetsRoot}`);
        }
    }
    else {
        config.assetsRoot = config.projectRoot;
    }
    config.projectName =
        config.projectName || getDefaultProjectName(config.projectRoot);
    if (writeToDisk && !config.manifestOutputPath) {
        throw new Error('\'manifestOutputPath\' is a required option');
    }
    config.manifestKeyTransformFn =
        config.manifestKeyTransformFn || ((filename) => filename);
    return config;
}
exports.parseManifestConfig = parseManifestConfig;
//# sourceMappingURL=parsing.js.map