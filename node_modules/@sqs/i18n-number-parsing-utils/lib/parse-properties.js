"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.numberParseProperties = void 0;
var loose_matching_1 = require("./loose-matching");
var object_map_1 = require("./object-map");
var escape_1 = require("./escape");
var remove_literal_quotes_1 = require("./remove-literal-quotes");
var numberParseProperties = function (formatProperties) {
    var aux, invertedNuDigitsMap, negativePrefix, negativeSuffix, numberTokenizer, prefix, suffix;
    prefix = (0, loose_matching_1.looseMatching)(formatProperties[0]);
    var maximumFractionDigits = formatProperties[4];
    var minimumSignificantDigits = formatProperties[5];
    var maximumSignificantDigits = formatProperties[6];
    var primaryGroupingSize = formatProperties[8];
    var secondaryGroupingSize = formatProperties[9];
    suffix = (0, loose_matching_1.looseMatching)(formatProperties[10]);
    negativePrefix = (0, loose_matching_1.looseMatching)(formatProperties[13]);
    negativeSuffix = (0, loose_matching_1.looseMatching)(formatProperties[14]);
    var infinitySymbol = (0, loose_matching_1.looseMatching)(formatProperties[16]);
    var nanSymbol = (0, loose_matching_1.looseMatching)(formatProperties[17]);
    var symbolMap = (0, object_map_1.objectMap)(formatProperties[18], function (pair) {
        return [pair[0], (0, loose_matching_1.looseMatching)(pair[1])];
    });
    var nuDigitsMap = formatProperties[19];
    var invertedSymbolMap = (0, object_map_1.objectMap)(symbolMap, function (pair) {
        return [(0, loose_matching_1.looseMatching)(pair[0]), pair[1]];
    });
    var digitsRe = nuDigitsMap ? '[' + nuDigitsMap + ']' : '\\d';
    var groupingSeparatorRe = (0, escape_1.regexpEscape)(symbolMap[',']);
    var decimalSymbolRe = (0, escape_1.regexpEscape)(symbolMap['.']);
    if (nuDigitsMap) {
        invertedNuDigitsMap = nuDigitsMap.split('').reduce(function (object, localizedDigit, i) {
            object[localizedDigit] = String(i);
            return object;
        }, {});
    }
    aux = [prefix, suffix, negativePrefix, negativeSuffix].map(function (value) {
        return value.replace(/('([^']|'')+'|'')|./g, function (character, literal) {
            if (literal) {
                return (0, remove_literal_quotes_1.removeLiteralQuotes)(literal);
            }
            character = character.replace(/[\-+E%\u2030]/, function (symbol) {
                return symbolMap[symbol];
            });
            return character;
        });
    });
    prefix = aux[0];
    suffix = aux[1];
    negativePrefix = aux[2];
    negativeSuffix = aux[3];
    numberTokenizer = digitsRe + '+';
    if (primaryGroupingSize) {
        if (secondaryGroupingSize) {
            aux =
                digitsRe +
                    '{1,' +
                    secondaryGroupingSize +
                    '}((' +
                    groupingSeparatorRe +
                    digitsRe +
                    '{' +
                    secondaryGroupingSize +
                    '})*(' +
                    groupingSeparatorRe +
                    digitsRe +
                    '{' +
                    primaryGroupingSize +
                    '}))';
        }
        else {
            aux =
                digitsRe +
                    '{1,' +
                    primaryGroupingSize +
                    '}(' +
                    groupingSeparatorRe +
                    digitsRe +
                    '{' +
                    primaryGroupingSize +
                    '})+';
        }
        numberTokenizer = '(' + aux + '|' + numberTokenizer + ')';
    }
    if (!isNaN(minimumSignificantDigits * maximumSignificantDigits) ||
        maximumFractionDigits) {
        aux = decimalSymbolRe + digitsRe + '+';
        numberTokenizer =
            numberTokenizer +
                '(' +
                aux +
                '|' +
                decimalSymbolRe +
                ')?' +
                '|(' +
                numberTokenizer +
                ')?' +
                aux;
        numberTokenizer = '(' + numberTokenizer + ')';
    }
    return [
        invertedSymbolMap,
        invertedNuDigitsMap,
        {
            infinity: new RegExp('^' + (0, escape_1.regexpEscape)(infinitySymbol)),
            nan: new RegExp('^' + (0, escape_1.regexpEscape)(nanSymbol)),
            negativePrefix: new RegExp('^' + (0, escape_1.regexpEscape)(negativePrefix)),
            negativeSuffix: new RegExp('^' + (0, escape_1.regexpEscape)(negativeSuffix)),
            number: new RegExp('^' + numberTokenizer),
            prefix: new RegExp('^' + (0, escape_1.regexpEscape)(prefix)),
            suffix: new RegExp('^' + (0, escape_1.regexpEscape)(suffix)),
        },
    ];
};
exports.numberParseProperties = numberParseProperties;
