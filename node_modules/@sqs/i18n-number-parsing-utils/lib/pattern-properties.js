"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.numberPatternProperties = void 0;
var pattern_re_1 = require("./pattern-re");
var numberPatternProperties = function (pattern) {
    var aux1, aux2, fractionPattern, integerPattern, maximumFractionDigits, maximumSignificantDigits, minimumFractionDigits, minimumIntegerDigits, minimumSignificantDigits, primaryGroupingSize, roundIncrement, secondaryGroupingSize;
    pattern = pattern.match(pattern_re_1.numberPatternRe);
    if (!pattern) {
        throw new Error('Invalid pattern: ' + pattern);
    }
    var prefix = pattern[1];
    var padding = pattern[4];
    var integerFractionOrSignificantPattern = pattern[5];
    var significantPattern = pattern[9];
    var suffix = pattern[11];
    if (significantPattern) {
        significantPattern.replace(/(@+)(#*)/, function (match, minimumSignificantDigitsMatch, maximumSignificantDigitsMatch) {
            minimumSignificantDigits = minimumSignificantDigitsMatch.length;
            maximumSignificantDigits = minimumSignificantDigits + maximumSignificantDigitsMatch.length;
        });
    }
    else {
        fractionPattern = pattern[8];
        integerPattern = pattern[7];
        if (fractionPattern) {
            fractionPattern.replace(/[0-9]+/, function (match) {
                minimumFractionDigits = match;
            });
            if (minimumFractionDigits) {
                roundIncrement = +('0.' + minimumFractionDigits);
                minimumFractionDigits = minimumFractionDigits.length;
            }
            else {
                minimumFractionDigits = 0;
            }
            maximumFractionDigits = fractionPattern.length - 1;
        }
        else {
            minimumFractionDigits = 0;
            maximumFractionDigits = 0;
        }
        integerPattern.replace(/0+$/, function (match) {
            minimumIntegerDigits = match.length;
        });
    }
    if ((aux1 = integerFractionOrSignificantPattern.lastIndexOf(',')) !== -1) {
        aux2 = integerFractionOrSignificantPattern.split('.')[0];
        primaryGroupingSize = aux2.length - aux1 - 1;
        if ((aux2 = integerFractionOrSignificantPattern.lastIndexOf(',', aux1 - 1)) !== -1) {
            secondaryGroupingSize = aux1 - 1 - aux2;
        }
    }
    return [
        prefix,
        padding,
        minimumIntegerDigits,
        minimumFractionDigits,
        maximumFractionDigits,
        minimumSignificantDigits,
        maximumSignificantDigits,
        roundIncrement,
        primaryGroupingSize,
        secondaryGroupingSize,
        suffix,
    ];
};
exports.numberPatternProperties = numberPatternProperties;
