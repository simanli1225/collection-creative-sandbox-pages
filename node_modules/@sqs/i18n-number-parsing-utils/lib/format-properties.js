"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.numberFormatProperties = void 0;
var pattern_properties_1 = require("./pattern-properties");
var round_1 = require("./round");
var symbol_map_1 = require("./symbol-map");
var numberNumberingSystemDigitsMap = '0123456789';
var numberFormatProperties = function (pattern, symbols, options) {
    options = options || {};
    pattern = pattern.split(';');
    var positivePattern = pattern[0];
    var negativePattern = pattern[1] || '-' + positivePattern;
    var negativeProperties = (0, pattern_properties_1.numberPatternProperties)(negativePattern);
    var negativePrefix = negativeProperties[0];
    var negativeSuffix = negativeProperties[10];
    var roundFn = (0, round_1.numberRound)(options.round);
    roundFn.generatorString = function () {
        return 'numberRound(' + (options.round ? '"' + options.round + '"' : '') + ')';
    };
    var properties = (0, pattern_properties_1.numberPatternProperties)(positivePattern).concat([
        positivePattern,
        negativePrefix + positivePattern + negativeSuffix,
        negativePrefix,
        negativeSuffix,
        roundFn,
        symbols.infinity,
        symbols.nan,
        (0, symbol_map_1.numberSymbolMap)(symbols),
        numberNumberingSystemDigitsMap,
    ]);
    function getOptions(attribute, propertyIndex) {
        if (attribute in options) {
            properties[propertyIndex] = options[attribute];
        }
    }
    getOptions('minimumIntegerDigits', 2);
    getOptions('minimumFractionDigits', 3);
    getOptions('maximumFractionDigits', 4);
    getOptions('minimumSignificantDigits', 5);
    getOptions('maximumSignificantDigits', 6);
    if (options.group === false) {
        properties[8] = null;
    }
    if ('minimumFractionDigits' in options && !('maximumFractionDigits' in options)) {
        properties[4] = Math.max(properties[3], properties[4]);
    }
    else if (!('minimumFractionDigits' in options) && 'maximumFractionDigits' in options) {
        properties[3] = Math.min(properties[3], properties[4]);
    }
    return properties;
};
exports.numberFormatProperties = numberFormatProperties;
