import type { AuthenticatedAccount, ProductBillingStatusAPIModel } from '@sqs/universal-state';
import type { ExperimentContext } from '@sqs/praetor';
import type { Website } from '@sqs/website-context';
import type AccessPermissions from '@sqs/enums/AccessPermissions';
import type TemplateVersion from '@sqs/enums/TemplateVersion';
import type SevenOneMigrationStatus from '@sqs/enums/SevenOneMigrationStatus';
import type SevenOneMigrationHintType from '@sqs/enums/SevenOneMigrationHintType';
import type PageFeatures from '@sqs/enums/PageFeatures';
import type CollectionTypes from '@sqs/enums/CollectionTypes';
import type PagePermissionType from '@sqs/enums/PagePermissionType';
import type EventView from '@sqs/enums/EventView';
import type CollectionOrdering from '@sqs/enums/CollectionOrdering';
import type IndexType from '@sqs/enums/IndexType';
import type { FetchActivePromotionsForMemberAccountIdResponse as ActivePromotions } from '@sqs/in-product-promo';
interface SharedNavigationItemProperties {
    enabled: boolean;
    isDraft: boolean;
    isFolder: boolean;
    passwordProtected: boolean;
    title: string;
}
export interface ExternalNavigationLink {
    newWindow: boolean;
    title: string;
    url: string;
}
export interface ConfigContextNavigationLink extends SharedNavigationItemProperties {
    externalLink: ExternalNavigationLink;
}
export interface ConfigContextCollectionSummary extends SharedNavigationItemProperties {
    collectionId: string;
    collectionType: CollectionTypes;
    pagePermissionType: PagePermissionType;
    typeName: string;
    updatedOn: number;
    urlId: string;
    children?: ConfigContextNavigationItem[];
}
export interface ConfigContextMemberAreaSummary extends ConfigContextCollectionSummary {
    memberAreaDefaultLandingPageId: string;
    memberAreaId: string;
}
export type ConfigContextNavigationItem = ConfigContextCollectionSummary | ConfigContextNavigationLink;
export type ConfigContextNavigationEntity = ConfigContextNavigationItem | ConfigContextNavigationGroup;
export interface ConfigContextNavigationGroup {
    errors: unknown[];
    identifier: string;
    index: boolean;
    name: string;
    links: ConfigContextNavigationItem[];
}
export interface ConfigContextMemberAreaNavigationGroup extends ConfigContextNavigationGroup {
    identifier: '_memberareas';
    links: ConfigContextMemberAreaSummary[];
}
export interface TemplateInstallation {
    blockTypesNotUsed?: {
        [type: number]: boolean | undefined;
    };
    collectionMappings: {
        [id: string]: string;
    };
    customCss?: string;
    deleted: boolean;
    demoCollections: unknown[];
    disableMobileStyles: boolean;
    disablePromotedBlocks: boolean;
    ghostedCollectionIds: unknown;
    homepageCollectionId: string;
    id: string;
    installedOn: number;
    isBlankInstallation: boolean;
    regionMappings: {
        [key: string]: string;
    };
    sourceWebsiteId?: string;
    styleWebsiteId?: string;
    templateId: string;
    templateTweaks: {
        [tweakName: string]: string;
    };
    templateWebsite?: Website;
    typekitFontList: {
        cssName: string;
        id: string;
        variants: {
            [key: string]: boolean;
        };
    }[];
    updatedOn: number;
    useInstallationIdForBindings: boolean;
    websiteId: string;
}
export interface CollectionConfig {
    acceptTypes: string[];
    addText: string;
    eventView: EventView;
    folder: boolean;
    forceEventView: boolean;
    forcePageSize: boolean;
    fullData: boolean;
    hasProductQuickView: boolean;
    hasSystemBlogCollectionSettings: boolean;
    icon: string;
    index: boolean;
    indexType?: IndexType;
    itemLayoutTypes: string[];
    layout: string;
    newTitle: string;
    ordering: CollectionOrdering;
    pageSize: number;
    relatedItems: boolean;
    supportsVideoBackgrounds: boolean;
    systemCollectionVersion?: string;
    systemPartials: unknown[];
    title: string;
    variation: boolean;
    view: string;
}
interface TemplateCustomType {
    title?: string;
    name?: string;
    base?: string;
    fields?: {
        title: string;
        type: string;
        name: string;
    }[];
}
export interface Template {
    author: string;
    blockConfigs: unknown;
    collectionConfigs: {
        [name: string]: CollectionConfig;
    };
    commitId: string;
    customTypes: TemplateCustomType[];
    debug: boolean;
    directories: {
        [key: string]: boolean;
    };
    flags: string[];
    hasOnlyTemplateCssTweakDefinitions: boolean;
    id: string;
    isPublic: boolean;
    layouts: {
        [name: string]: {
            name: string;
            regions: string[];
        };
    };
    lessUpdatedOn: number;
    name: string;
    navigations: {
        index: boolean;
        name: string;
        title: string;
    }[];
    ownerWebsiteId: string;
    pageConfigs: {
        [name: string]: CollectionConfig;
    };
    scripts: {
        name: string;
        path: string;
    }[];
    stylesheets: string[];
    supportsSections: boolean;
    systemCollections: string[];
    systemPartials: unknown[];
    tweakDefinitions?: unknown[];
    updatedOn: number;
    version: TemplateVersion;
    __additionalRollups: unknown[];
}
export interface Context {
    accessPermissions?: AccessPermissions[];
    appDomain?: string;
    authenticatedAccount?: AuthenticatedAccount;
    project?: {
        projectTitle: string;
    };
    productStatuses?: ProductBillingStatusAPIModel[];
    env?: string;
    impersonatedSession?: boolean;
    isCircleMemberWebsite?: boolean;
    isStandaloneScheduling?: boolean;
    isUnifiedParkingPage?: boolean;
    isWebsitePermissionsEnabled?: boolean;
    frontsiteExperimentList?: ExperimentContext[];
    memberAccountNames?: {
        [name: string]: {
            displayName: string;
        };
    };
    template?: Template;
    templateLocale?: string;
    templateRevisionNumber?: string;
    templateVersion?: TemplateVersion;
    templateInstallation?: TemplateInstallation;
    templateFeatures?: {
        mobileStyles: boolean;
        promotedBlocks: boolean;
    };
    previewTemplateInstallation?: TemplateInstallation;
    sevenOneMigration?: {
        status: SevenOneMigrationStatus;
        previewTemplateInstallationId: string;
        originalTemplateInstallationId: string;
        websiteId: string;
        migrationHints: {
            type: SevenOneMigrationHintType;
            originalReferences?: {
                collectionId?: string;
            };
            previewReferences?: {
                collectionId?: string;
            };
        }[];
    };
    website?: Website & {
        hasPassword?: boolean;
    };
    websiteRoles?: {
        [key: string]: true;
    };
    websiteSettings?: {
        cookieBannerSettings?: {
            [key: string]: any;
        };
        country?: string;
        isCookieBannerEnabled?: boolean;
        state?: string;
        storeSettings?: {
            selectedCurrency?: string;
        };
        tutorialsCompleted?: Record<string, boolean>;
        newPlanArchitectureEligible?: boolean;
        bundleEligible?: boolean;
    };
    activationExperimentList?: ExperimentContext[];
    cmsExperimentList?: ExperimentContext[];
    betaFeatureFlags?: string[];
    releaseVersion?: string;
    recaptchaEnterpriseContext: {
        recaptchaEnterpriseSiteKey: string | null;
    };
    reCaptchaSiteKey?: string;
    billingInvoicingExperimentList?: ExperimentContext[];
    commerceSettings?: {
        commerceActivationAccountExperimentList?: ExperimentContext[];
        commerceActivationExperimentList?: ExperimentContext[];
        commerceFulfillmentExperimentList?: ExperimentContext[];
        commercePricingExperimentList?: ExperimentContext[];
        commerceProjectSuccessExperimentList?: ExperimentContext[];
        squarespacePaymentsExperimentList?: ExperimentContext[];
    };
    coreCmsExperimentList?: ExperimentContext[];
    discoveryExperimentList?: ExperimentContext[];
    enterpriseExperimentList?: ExperimentContext[];
    i18nExperimentList?: ExperimentContext[];
    memberAccountExperimentList?: ExperimentContext[];
    mobileWebExperimentList?: ExperimentContext[];
    onboardingCardsExperimentList?: ExperimentContext[];
    trialBarExperimentList?: ExperimentContext[];
    universalCheckoutExperimentList?: ExperimentContext[];
    homepageCollectionId?: string;
    inProductPromotions?: ActivePromotions;
    pageFeatures?: PageFeatures[];
    hasScheduling: boolean;
    siteLayout?: ConfigContextNavigationGroup[];
    blueprintContext?: {
        REDIRECT_TO_BLUEPRINT?: boolean;
    };
    hasDeletedCollections: boolean;
}
export {};
//# sourceMappingURL=types.d.ts.map