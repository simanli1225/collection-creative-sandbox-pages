"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withLess = void 0;
const febs_utils_1 = require("@sqs/febs-utils");
const mini_css_extract_plugin_1 = __importDefault(require("mini-css-extract-plugin"));
const css_minimizer_webpack_plugin_1 = __importDefault(require("css-minimizer-webpack-plugin"));
const webpack_merge_1 = require("webpack-merge");
const optimizeOptions_1 = require("./optimizeOptions");
const cssLoader_1 = require("./loaders/cssLoader");
const withLess = ({ inline = false, resolver = require.resolve, postcssOptions = {}, optimize = false, }, rawArgv = ['build']) => (webpackConfig) => {
    const argv = febs_utils_1.getOptions(rawArgv);
    const minimize = argv.production;
    const hash = argv.production;
    const include = argv.paths.src;
    const { minifyCssClassNames } = optimizeOptions_1.getOptimizationsOptions(optimize);
    const updatedWebpackConfig = webpack_merge_1.merge(webpackConfig, {
        module: {
            rules: [
                {
                    include: [
                        /node_modules\/@sqs/,
                    ],
                    test: /\.less$/,
                    use: [
                        {
                            loader: inline ? 'style-loader' : mini_css_extract_plugin_1.default.loader,
                            options: {
                                esModule: false
                            }
                        },
                        cssLoader_1.cssLoader({ resolver, production: minimize, minifyCssClassNames }),
                        {
                            loader: resolver('postcss-loader'),
                            options: {
                                sourceMap: true,
                                postcssOptions: Object.assign({ config: __dirname }, postcssOptions)
                            },
                        },
                        {
                            loader: resolver('less-loader'),
                            options: {
                                sourceMap: true,
                            }
                        },
                    ],
                },
                {
                    include: [
                        include,
                    ],
                    test: /\.less$/,
                    use: [
                        {
                            loader: inline ? 'style-loader' : mini_css_extract_plugin_1.default.loader,
                            options: {
                                esModule: true
                            }
                        },
                        cssLoader_1.cssLoader({ resolver, production: minimize, minifyCssClassNames }),
                        {
                            loader: resolver('postcss-loader'),
                            options: {
                                sourceMap: true,
                                postcssOptions: Object.assign({ config: __dirname }, postcssOptions)
                            },
                        },
                        {
                            loader: resolver('less-loader'),
                            options: {
                                sourceMap: true,
                            }
                        },
                    ],
                }
            ],
        },
        plugins: [
            !inline &&
                new mini_css_extract_plugin_1.default({
                    chunkFilename: hash ? '[name]-[contenthash].css' : '[name].css',
                    filename: hash ? '[name]-[contenthash].css' : '[name].css',
                }),
            minimize && new css_minimizer_webpack_plugin_1.default({
                minimizerOptions: {
                    preset: ['default', { discardComments: { removeAll: true } }],
                },
            }),
        ].filter(plugin => !!plugin)
    });
    return updatedWebpackConfig;
};
exports.withLess = withLess;
//# sourceMappingURL=withLess.js.map