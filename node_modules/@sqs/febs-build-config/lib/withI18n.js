"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const i18n_ui_1 = require("@sqs/i18n-ui");
const webpack_1 = __importDefault(require("webpack"));
const webpack_merge_1 = require("webpack-merge");
const build_utils_1 = require("./build-utils");
const i18n_utils_1 = require("./i18n-utils");
const smartMerge = webpack_merge_1.mergeWithRules({
    module: {
        rules: {
            test: webpack_merge_1.CustomizeRule.Match,
            use: webpack_merge_1.CustomizeRule.Replace
        },
    },
    plugins: webpack_merge_1.CustomizeRule.Append,
});
const withI18n = (options, argv) => (webpackConfig) => {
    const resolver = options.resolver || require.resolve;
    const { locale, filenameTemplate, chunkFilenameTemplate = filenameTemplate, } = options;
    const appPaths = argv.paths;
    const language = i18n_ui_1.LocaleResolver.parseLocale(locale).language();
    const translations = i18n_utils_1.loadLanguagePack(locale, appPaths.translations);
    const L10N_LOADER = {
        loader: resolver('@sqs/i18n-build/lib/l10n-loader'),
        options: {
            translations: Object.assign({}, translations),
        },
    };
    const updatedWebpackConfig = smartMerge(webpackConfig, {
        module: {
            rules: [
                {
                    exclude: /node_modules/,
                    include: appPaths.src,
                    test: /\.(js|jsx|ts|tsx)$/,
                    use: [
                        {
                            loader: resolver('babel-loader'),
                        },
                        L10N_LOADER,
                    ],
                },
                {
                    test: /\.yaml$/,
                    use: [{ loader: '@sqs/i18n-build/lib/yaml-loader' }],
                    include: [appPaths.src, /node_modules\/@sqs/],
                },
            ],
        },
        output: {
            chunkFilename: build_utils_1.rewriteFileTemplate(chunkFilenameTemplate, {
                locale,
            }),
            filename: build_utils_1.rewriteFileTemplate(filenameTemplate, { locale }),
        },
        plugins: [
            new webpack_1.default.ContextReplacementPlugin(/moment[\/\\]locale$/, new RegExp(language, 'g')),
            new webpack_1.default.ContextReplacementPlugin(/@sqs\/i18n-ui[\/\\]packs$/, new RegExp(`(en|${language})\.json$`, 'g')),
            new webpack_1.default.DefinePlugin({
                __TRANSLATION_LOCALE__: JSON.stringify(locale),
                __TRANSLATION_LANGUAGE__: JSON.stringify(language),
            }),
            new webpack_1.default.ContextReplacementPlugin(/@sqs\/.*\/sqs-i18n-translations[\/\\]strings$/, new RegExp(`.*\.${locale}\.yaml$`, 'g')),
        ],
    });
    return updatedWebpackConfig;
};
exports.default = withI18n;
//# sourceMappingURL=withI18n.js.map