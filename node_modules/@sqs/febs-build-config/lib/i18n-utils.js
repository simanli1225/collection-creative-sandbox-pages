"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLocaleLabel = exports.getI18nFilename = exports.loadLanguagePack = exports.mergeBundles = exports.gatherLocaleYaml = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const isEmpty_1 = __importDefault(require("lodash/isEmpty"));
const isEqual_1 = __importDefault(require("lodash/isEqual"));
const febs_logger_1 = __importDefault(require("@sqs/febs-logger"));
const i18n_locale_list_1 = require("@sqs/i18n-locale-list");
const i18n_ui_1 = require("@sqs/i18n-ui");
const build_utils_1 = require("./build-utils");
const gatherLocaleYaml = (locale, langPath) => {
    febs_logger_1.default.debug('Reading in translation yaml files...');
    const lang = i18n_ui_1.LocaleResolver.parseLocale(locale).language();
    const localeRxp = new RegExp('(.*(' + locale + '|' + lang + ')).ya?ml$', 'i');
    const localeBundles = fs_1.default.readdirSync(langPath).filter(p => localeRxp.test(p));
    if (localeBundles.some(p => /\.(yml|YAML|YML)$/.test(p))) {
        febs_logger_1.default.warn("[I18N] Warning: language bundle extensions should be '.yaml'");
    }
    return localeBundles.map(file => {
        const filename = path_1.default.join(langPath, file);
        try {
            return {
                content: fs_1.default.readFileSync(filename, 'utf8'),
                name: file,
            };
        }
        catch (e) {
            febs_logger_1.default.warn(`Warning: Unable to read language bundle file ${filename}'`);
            return { name: file, content: '' };
        }
    });
};
exports.gatherLocaleYaml = gatherLocaleYaml;
const mergeBundles = (bundles) => bundles.reduce((output, { name, messages }) => {
    Object.entries(messages || {}).forEach(([key, value]) => {
        if (output.strings.hasOwnProperty(key)) {
            if (typeof value !== typeof output.strings[key]) {
                output.invalidValues[key] = name;
            }
            if (!isEqual_1.default(value, output.strings[key])) {
                if (!output.collisions[key]) {
                    output.collisions[key] = [];
                }
                output.collisions[key].push(output.strings[key], value);
            }
        }
        else {
            output.strings[key] = value;
        }
    });
    return output;
}, {
    collisions: {},
    invalidValues: {},
    strings: {},
});
exports.mergeBundles = mergeBundles;
const buildCollisionsWarning = (collisions) => {
    return Object.entries(collisions).reduce((acc, [key, value]) => {
        acc += `\n"${key}"${value.reduce((list, curr) => (list += `\n  * "${curr}"`), '')}`;
        return acc;
    }, '[I18N] Collisions in the following key values must be resolved:');
};
const buildInvalidTranslationsError = (invalidValues) => {
    return Object.entries(invalidValues).reduce((acc, [key, value]) => {
        acc += `\nBundle name: ${value}\tKey: ${key}`;
        return acc;
    }, '[I18N] Duplicate translation keys of different value types found and must be resolved:');
};
const loadYAMLPack = (locale, langPath) => {
    let bundles = [];
    try {
        bundles = exports.gatherLocaleYaml(locale, langPath);
        febs_logger_1.default.debug('Loaded bundles for \'%s\'', locale);
    }
    catch (e) {
        febs_logger_1.default.warn('Bundles for \'%s\' could not be loaded', locale);
        return {};
    }
    const { collisions, invalidValues, strings } = exports.mergeBundles(bundles.map(({ name, content }) => {
        let messages = {};
        try {
            messages = js_yaml_1.default.load(content, undefined);
        }
        catch (yamlError) {
            throw new Error(`Unable to load YAML file: ${name}, ${yamlError}`);
        }
        return { name, messages };
    }));
    if (!isEmpty_1.default(invalidValues)) {
        throw new Error(buildInvalidTranslationsError(invalidValues));
    }
    if (!isEmpty_1.default(collisions)) {
        febs_logger_1.default.error(buildCollisionsWarning(collisions));
    }
    return strings;
};
const loadLanguagePack = (locale, langPath) => {
    const translations = loadYAMLPack(locale, langPath);
    if (!translations) {
        febs_logger_1.default.warn('No Language pack found, falling back to the default.');
        return loadYAMLPack(i18n_locale_list_1.locales.defaultLocale, langPath);
    }
    if (Object.keys(translations).length === 0) {
        febs_logger_1.default.warn(`No strings loaded for ${exports.getLocaleLabel(locale)}! Please check translations.`);
    }
    return translations;
};
exports.loadLanguagePack = loadLanguagePack;
const getI18nFilename = (template, language) => {
    template = template.replace(i18n_locale_list_1.locales.defaultLocale, '[locale]');
    return build_utils_1.rewriteFileTemplate(template, { locale: language });
};
exports.getI18nFilename = getI18nFilename;
const getLocaleLabel = (locale) => {
    const localeMeta = i18n_locale_list_1.meta[locale];
    return localeMeta ? localeMeta.label : '';
};
exports.getLocaleLabel = getLocaleLabel;
//# sourceMappingURL=i18n-utils.js.map