"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("./constants");
var VisualContext = (function () {
    function VisualContext(options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this.isExtensionEnabled = false;
        this.visualContextStringMap = {};
        this.init = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4, this.isVcExtensionEnabled()];
                    case 1:
                        _a.isExtensionEnabled = _b.sent();
                        if (this.isExtensionEnabled) {
                            this.initializeVcEventListeners();
                        }
                        return [2];
                }
            });
        }); };
        this.isVcExtensionEnabled = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var promiseResults, error_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, Promise.allSettled([
                                chrome.runtime.sendMessage(constants_1.PROD_EXTENSION_ID, constants_1.MESSAGES.IS_EXTENSION_ENABLED),
                                chrome.runtime.sendMessage(constants_1.DEV_EXTENSION_ID, constants_1.MESSAGES.IS_EXTENSION_ENABLED),
                            ])];
                    case 1:
                        promiseResults = _a.sent();
                        return [2, promiseResults.some(function (result) { return result.status === 'fulfilled' && result.value; })];
                    case 2:
                        error_1 = _a.sent();
                        return [2, false];
                    case 3: return [2];
                }
            });
        }); };
        this.initializeVcEventListeners = function () {
            var onMessageCallback = function (event) {
                if (event.origin !== window.location.origin) {
                    return;
                }
                if (event.data === constants_1.MESSAGES.REQUEST_VISUAL_CONTEXT_DATA) {
                    window.postMessage({
                        type: constants_1.MESSAGES.VISUAL_CONTEXT_DATA_PAYLOAD,
                        data: _this.visualContextStringMap,
                        source: _this.source,
                    });
                }
                else if (event.data === constants_1.MESSAGES.RESET_VISUAL_CONTEXT_DATA) {
                    _this.visualContextStringMap = {};
                }
            };
            window.addEventListener('message', onMessageCallback);
        };
        this.updateStringMap = function (id, value) {
            _this.visualContextStringMap[id] = {
                value: value,
                hasComponentSub: !!value.match(/{.+}/g),
            };
        };
        var _a = tslib_1.__assign({}, options).source, source = _a === void 0 ? '' : _a;
        this.source = source;
        this.init();
    }
    return VisualContext;
}());
exports.default = VisualContext;
