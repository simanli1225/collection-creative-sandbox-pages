const { getOptions } = require('@sqs/febs-utils');

module.exports = (api, userOptions = {}) => {
  const options = {
    modules: false,
    // useBuiltIns inlines module method polyfills from corejs.
    // https://babeljs.io/docs/en/babel-preset-env#usebuiltins-usage-experimental
    useBuiltIns: 'entry',
    addDefaultProperty: false,
    debug: false,
  };
  Object.assign(options, getOptions(userOptions));
  api.assertVersion('^7.0.0');

  const isTypeScriptEnabled = options.typescript;
  const isReactEnabled = options.react;

  const config = {
    presets: [
      [
        require('@babel/preset-env').default,
        // Note on the 'loose' option (and our decision NOT to turn it on):
        // It turns on loose transformations which decrease file size,
        // but that benefit is outweighed by the risk of missing out on
        // features when they move to the browser (ex. spreading a map).
        {
          modules: options.modules,
          useBuiltIns: options.useBuiltIns,
          corejs: '3',
          debug: options.debug,
        },
      ],
      isReactEnabled && require('@babel/preset-react').default,
      isTypeScriptEnabled && [
        require('@babel/preset-typescript').default,
        { isTSX: isReactEnabled, allExtensions: isReactEnabled },
      ],
    ].filter(Boolean),
    plugins: [
      require('@sqs/babel-plugin-core-components-transform-imports').default,
      require('@babel/plugin-transform-runtime').default,
      // Use the lodash plugin everywhere except tests. It is an optimisation for
      // bundle size, so it doesn't really provide any value for tests. Also, it
      // can have some issues when combined with Istanbul/Jest coverage collection
      // that can make the generated code unparsable.
      !api.env('test') && require('babel-plugin-lodash'),
      [
        require('babel-plugin-add-module-exports'),
        {
          addDefaultProperty: options.addDefaultProperty,
        },
      ],
      require('@babel/plugin-syntax-dynamic-import').default,
      require('@babel/plugin-proposal-class-properties').default,
      [
        require('@babel/plugin-proposal-object-rest-spread').default,
        {
          useBuiltIns: true,
        },
      ],
    ].filter(Boolean),
    env: {
      // Output CommonJS modules
      cjs: {
        plugins: [require('@babel/plugin-transform-modules-commonjs').default],
      },
      // Output CommonJS modules
      test: {
        plugins: [require('@babel/plugin-transform-modules-commonjs').default],
      },
    },
  };

  return config;
};
