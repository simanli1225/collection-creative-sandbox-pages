/**
 * A plugin to transform
 * import { Button } from '@sqs/core-components'
 * into
 * import Button from '@sqs/core-components/build/cjs/components/Button'
 *
 * The goal is to prevent all of core-components (a large library) from being
 * bundled into cjs builds.
 */
const imports = {};
const nsImports = {};
const namedImports = {};

// modals
imports.ReviewingChangesModal = './modals/DismissableModals/ReviewingChangesModal';
imports.ToastManager = './modals/ToastManager';
imports.ConfirmModal = './modals/DismissableModals/ConfirmModal';
namedImports['./modals/Modal'] = ['Modal', 'BaseModal, RosettaModal'];
imports.AlertModal = './modals/DismissableModals/AlertModal';
imports.NavModal = './modals/NavModal';

//rte
namedImports['./components/RichTextEditor'] = ['Rte',
  'Toolbar as RteToolbar, Tooltip as RteTooltip, FloatingToolbar as RteFloatingToolbar' +
  ', MobileToolbar as RteMobileToolbar, withRangePositionHelper, Menu as RteMenu, MenuItems as RteMenuItems' +
  ', itemConfig as RteItemConfig, ItemConfigEditor as RteItemConfigEditor'
];

//components
imports.ColorSwatch = './components/ColorSwatch';
imports.Underlined = './components/Underlined';
imports.ImageProvider = './components/ImageProvider';
imports.UploadProgress = './components/UploadProgress';
imports.TagManager = './components/TagManager';
imports.NetworkDataProvider = './components/NetworkDataProvider';
imports.Search = './components/Search';
imports.ReorderableGroup = './components/ReorderableGroup';
imports.ZIndexStack = './components/ZIndexStack';
imports.SEOPreview = './components/SEOPreview';
imports.SocialPreview = './components/SocialPreview';
imports.SearchableList = './components/SearchableList';
imports.SegmentedRadioExpandable = './components/SegmentedRadioExpandable';
imports.LinkEditor = './components/LinkEditor';
imports.ComposedLinkEditor = './components/RichTextEditor/Menu/ComposedLinkEditor';
imports.DropdownSelect = './components/DropdownSelect';
imports.FeatureGateUpgradeButton = './components/FeatureGate/FeatureGateUpgradeButton';
imports.FontPreviewCard = './components/FontPreviewCard';
imports.FileDetailPanel = './components/FileDetailPanel';
imports.FeatureGateBadge = './components/FeatureGate/FeatureGateBadge';
imports.FeatureGateLogo = './components/FeatureGate/FeatureGateLogo';
imports.FeatureGateMenu = './components/FeatureGate/FeatureGateMenu';
imports.FeatureGatePanel = './components/FeatureGate/FeatureGatePanel';
imports.ActivityIndicator = './components/ActivityIndicator';
imports.AnchorLink = './components/AnchorLink';
imports.BackButton = './components/BackButton';
imports.Cell = './components/Cell';
imports.ColorMap = './components/ColorMap';
imports.ColorSlider = './components/ColorSlider';

//primitives
imports.Tabs = './primitives/Tabs';
imports.CircularProgressIndicator = './primitives/CircularProgressIndicator';
imports.LoadingIndicator = './primitives/LoadingIndicator';
imports.Spacer = './primitives/Spacer';
imports.Button = './primitives/Button';
imports.Input = './primitives/Input';
imports.SteppableInput = './primitives/SteppableInput';
imports.Description = './primitives/Description';
imports.Label = './primitives/Label';
imports.ErrorText = './primitives/ErrorText';
imports.Toggle = './primitives/Toggle';
imports.Slider = './primitives/Slider';
imports.Checkbox = './primitives/Checkbox';
imports.Icon = './primitives/Icon';
imports.IconButton = './primitives/IconButton';
imports.Image = './primitives/Image';
imports.Textarea = './primitives/Textarea';
imports.SegmentedRadio = './primitives/SegmentedRadio';

//containers
imports.Card = './containers/Card';
imports.FieldContainer = './containers/FieldContainer';
namedImports['./containers/Panel'] = ['Panel', 'PanelHeader, PanelLoadingSpinner, PanelNotification'];
imports.PopOver = './containers/PopOver';
imports.SizeObserver = './containers/SizeObserver';
namedImports['./containers/ThumbnailGrid'] = ['ThumbnailGrid', 'ThumbnailGridItem, ThumbnailGridGroup'];
imports.TitleTransition = './containers/TitleTransition';
imports.Tooltip = './containers/Tooltip';
imports.Wizard = './containers/Wizard';

//fields
imports.SelectField = './fields/SelectField';
imports.CheckField = './fields/CheckField';
imports.BaseDisclosureField = './fields/DisclosureField/DisclosureField';
imports.AddressField = './fields/AddressField';
imports.AmazonSearchField = './fields/AmazonSearchField';
imports.BooleanField = './fields/BooleanField';
imports.ButtonField = './fields/ButtonField';
imports.CodeField = './fields/CodeMirrorField';
imports.ColorField = './fields/ColorField';
imports.ContentPickerField = './fields/ContentPickerField';
imports.ContextField = './fields/ContextField';
imports.CsvImporterField = './fields/CsvImporterField';
imports.DateTimeField = './fields/DateTimeField';
imports.DisclosureField = './fields/DisclosureField';
imports.DropdownSelectField = './fields/DropdownSelectField';
imports.EmailField = './fields/EmailField';
imports.EmbedField = './fields/EmbedField';
imports.FileListField = './fields/FileListField';
imports.FileUploadField = './fields/FileUploadField';
imports.FontWeightField = './fields/FontWeightField';
imports.FontStyleField = './fields/FontStyleField';
imports.GalleryGridField = './fields/GalleryGridField';
imports.GradientPickerField = './fields/GradientPickerField';
imports.IconSelectField = './fields/IconSelectField';
imports.ImageField = './fields/ImageField';
imports.ImageUploadField = './fields/ImageUploadField';
imports.KeyValueTableField = './fields/KeyValueTableField';
imports.LinkField = './fields/LinkField';
imports.BaseLinkField = './fields/LinkField/LinkFieldWithoutNavigator';
namedImports['./fields/FontFamilyField'] = ['FontPickerField', 'FontFamilyField, FontPickerDataProvider'];
imports.MarkdownField = './fields/MarkdownField';
imports.MoneyField = './fields/MoneyField';
imports.NumberField = './fields/NumberField';
imports.OAuthConnectField = './fields/OAuthConnectField';
imports.PasswordField = './fields/PasswordField';
imports.PrefixSuffixField = './fields/PrefixSuffixField';
imports.PreviewDisclosureField = './fields/PreviewDisclosureField';
imports.ProductSearchField = './fields/ProductSearchField';
imports.RangeField = './fields/RangeField';
imports.RangeInputField = './fields/RangeInputField';
imports.RangeInputGroupField = './fields/RangeInputGroupField';
imports.RichTextEditor = './fields/RichTextField';
imports.SearchField = './fields/SearchField';
imports.SegmentedControlField = './fields/SegmentedControlField';
imports.SegmentedRadioExpandableField = './fields/SegmentedRadioExpandableField';
imports.SegmentedRadioField = './fields/SegmentedRadioField';
imports.SelectExpandableField = './fields/SelectExpandableField';
imports.StepperField = './fields/StepperField';
imports.StringField = './fields/StringField';
imports.StructuredInputField = './fields/StructuredInputField';
imports.TabsField = './fields/TabsField';
imports.TelephoneField = './fields/TelephoneField';
imports.TextareaField = './fields/TextareaField';
imports.UnsupportedField = './fields/UnsupportedField';
imports.UrlParseField = './fields/UrlParseField';
imports.VariantPickerFieldList = './fields/VariantPickerField';

// navigation
imports.MenuHeader = './navigation/MenuHeader';
imports.NavigationController = './navigation/NavigationController';
namedImports['./navigation/NavMenu'] = ['NavMenu', 'NavItem, NavGroup, NavText, NavTitle'];
imports.Toolbar = './navigation/Toolbar';
imports.ToolbarButton = './navigation/ToolbarButton';



// hoc
imports.withPositionHelper = './hoc/withPositionHelper';

//utils;
const utilsImports = { imports: {}, nsImports: {} };
utilsImports.imports.stringUtils = './utils/stringUtils';
utilsImports.nsImports.urlUtils = './utils/urlUtils';
utilsImports.nsImports.numberUtils = './utils/numberUtils';
utilsImports.nsImports.fontUtils = './utils/fontUtils';
utilsImports.imports.errorUtils = './utils/errorUtils';
utilsImports.nsImports.colorUtils = './utils/colorUtils';
utilsImports.imports.emailUtils = './utils/emailUtils';
utilsImports.nsImports.positionHelper = './utils/positionHelper';
utilsImports.imports.UploadAPI = './utils/UploadAPI';
utilsImports.imports.UploadQueue = './utils/UploadQueue';
utilsImports.nsImports.countryUtils = './utils/countryUtils';

// icons
nsImports.Icons = './icons'; // Util exports

// i18n
// import * as i18n from '@sqs/i18n-components';

// redux
imports.ComponentProvider = './redux/ComponentProvider';

// These components are not exported, but they MUST remain here
// because the build-entrypoints script relies on their presence.
// If we remove it, we may break something for someone somewhere.
// In the future these components may be exported,
// but not yet. Not yet.

imports.Countries = './constants/Countries';
// controllers
imports.FilteredInput = './controllers/FilteredInput';
imports.HoverController = './controllers/HoverController';
imports.NumberController = './controllers/NumberController';
imports.Img = './proxies/Img';
imports.Text = './proxies/Text';
imports.TouchableHighlight = './proxies/TouchableHighlight';
imports.View = './proxies/View';

const exportMap = {
  ComponentProvider: 'ComponentProvider',
  i18n: 'i18n',
  ActivityIndicator: 'ActivityIndicator',
  AddressField: 'Address',
  AlertModal: 'AlertModal',
  AmazonSearchField: 'AmazonSearch',
  AnchorLink: 'AnchorLink',
  BackButton: 'BackButton',
  BaseDisclosureField: 'BaseDisclosure',
  BaseLinkField: 'BaseLink',
  BaseModal: 'BaseModal',
  BooleanField: 'BooleanField',
  ButtonField: 'ButtonField',
  Button: 'Button',
  Card: 'Card',
  Cell: 'Cell',
  CheckField: 'Check',
  Checkbox: 'Checkbox',
  CircularProgressIndicator: 'CircularProgressIndicator',
  CodeField: 'Code',
  ColorField: 'Color',
  ColorMap: 'ColorMap',
  ColorSlider: 'ColorSlider',
  ComposedLinkEditor: 'ComposedLinkEditor',
  ConfirmModal: 'ConfirmModal',
  ContentPickerField: 'ContentPicker',
  ContextField: 'Context',
  CsvImporterField: 'CSVImporter',
  DateTimeField: 'DateTime',
  Description: 'Description',
  DisclosureField: 'Disclosure',
  DropdownSelect: 'DropdownSelect',
  DropdownSelectField: 'DropdownSelectField',
  EmailField: 'Email',
  EmbedField: 'Embed',
  ErrorText: 'ErrorText',
  FieldContainer: 'FieldContainer',
  FileDetailPanel: 'FileDetail',
  FileListField: 'FileList',
  FileUploadField: 'FileUpload',
  FontFamilyField: 'FontFamilyField',
  FontPreviewCard: 'FontPreviewCard',
  FontPickerDataProvider: 'FontPickerDataProvider',
  FontStyleField: 'FontStyleField',
  FontWeightField: 'FontWeightField',
  GalleryGridField: 'GalleryGridField',
  GradientPickerField: 'GradientPicker',
  Icon: 'Icon',
  IconButton: 'IconButton',
  IconSelectField: 'IconSelect',
  Icons: 'Icons',
  Image: 'Image',
  Input: 'Input',
  ImageField: 'ImageField',
  ImageUploadField: 'ImageUpload',
  KeyValueTableField: 'KeyValueTable',
  Label: 'Label',
  LinkField: 'Link',
  LinkEditor: 'LinkEditor',
  LoadingIndicator: 'LoadingIndicator',
  MarkdownField: 'Markdown',
  MenuHeader: 'MenuHeader',
  Modal: 'Modal',
  MoneyField: 'Money',
  NavGroup: 'NavGroup',
  NavItem: 'NavItem',
  NavMenu: 'NavMenu',
  NavModal: 'NavModal',
  NavText: 'NavText',
  NavTitle: 'NavTitle',
  NavigationController: 'NavigationController',
  NetworkDataProvider: 'NetworkDataProvider',
  NumberField: 'NumberField',
  OAuthConnectField: 'OAuthConnect',
  Panel: 'Panel',
  PanelHeader: 'PanelHeader',
  PanelLoadingSpinner: 'PanelLoadingSpinner',
  PanelNotification: 'PanelNotification',
  PasswordField: 'PasswordField',
  PopOver: 'PopOver',
  PrefixSuffixField: 'PrefixSuffix',
  PreviewDisclosureField: 'PreviewDisclosureField',
  ProductSearchField: 'ProductSearch',
  RangeField: 'Range',
  RangeInputField: 'RangeInput',
  RangeInputGroupField: 'RangeInputGroup',
  ReviewingChangesModal: 'ReviewingChangesModal',
  ReorderableGroup: 'ReorderableGroup',
  RichTextEditor: 'RichText',
  RosettaModal: 'RosettaModal',
  Rte: 'Rte',
  RteToolbar: 'RteToolbar',
  RteTooltip: 'RteTooltip',
  RteFloatingToolbar: 'RteFloatingToolbar',
  RteItemConfig: 'RteItemConfig',
  RteItemConfigEditor: 'RteItemConfigEditor',
  RteMenu: 'RteMenu',
  RteMenuItems: 'RteMenuItems',
  RteMobileToolbar: 'RteMobileToolbar',
  Search: 'Search',
  SearchField: 'SearchField',
  SearchableList: 'SearchableList',
  SegmentedControlField: 'SegmentedControlField',
  SegmentedRadio: 'SegmentedRadio',
  SegmentedRadioExpandable: 'SegmentedRadioExpandable',
  SegmentedRadioExpandableField: 'SegmentedRadioExpandableField',
  SegmentedRadioField: 'SegmentedRadioField',
  SelectExpandableField: 'SelectExpandable',
  SelectField: 'Select',
  SEOPreview: 'SEOPreview',
  SocialPreview: 'SocialPreview',
  SizeObserver: 'SizeObserver',
  Slider: 'Slider',
  Spacer: 'Spacer',
  SteppableInput: 'SteppableInput',
  StepperField: 'Stepper',
  StringField: 'StringField',
  StructuredInputField: 'StructuredInput',
  TabsField: 'Tabs',
  TagManager: 'TagManager',
  TelephoneField: 'Telephone',
  TextareaField: 'TextareaField',
  Textarea: 'Textarea',
  ThumbnailGrid: 'ThumbnailGrid',
  ThumbnailGridGroup: 'ThumbnailGridGroup',
  ThumbnailGridItem: 'ThumbnailGridItem',
  TitleTransition: 'TitleTransition',
  ToastManager: 'ToastManager',
  Toggle: 'Toggle',
  Toolbar: 'Toolbar',
  ToolbarButton: 'ToolbarButton',
  Tooltip: 'Tooltip',
  UnsupportedField: 'Unsupported',
  UploadProgress: 'UploadProgress',
  UrlParseField: 'UrlParse',
  VariantPickerFieldList: 'VariantPickerList',
  withPositionHelper: 'withPositionHelper',
  withRangePositionHelper: 'withRangePositionHelper',
  Wizard: 'Wizard',
  utils: 'utils',
  ZIndexStack: 'ZIndexStack',
};

const allExports = Object.entries(namedImports).map(([path, defaultAndNamedImports]) => {
  const [d, n] = defaultAndNamedImports;
  return [path, n.split(', ').reduce((collect, fooAsBar) => {
    let [exportName, asName] = fooAsBar.split(' as ');
    asName = asName || exportName;
    collect[asName] = exportName;
    return collect;
  }, { [d]: 'default' })];
}).reduce((collect, [path, exportAsMap]) => {
  for (const [asName, exportName] of Object.entries(exportAsMap)) {
    collect[exportMap[asName]] = [path, exportName];
  }
  return collect;
}, {});
for (const [x, y] of Object.entries(imports)) {
  allExports[exportMap[x]] = [y, 'default'];
}
for (const [x, y] of Object.entries(nsImports)) {
  allExports[exportMap[x]] = [y, '*'];
}


// construct utils exports
const allUtilExports = {};
/*
Object.entries(utilsImports.namedImports).map(([path, defaultAndNamedImports]) => {
  const [d, n] = defaultAndNamedImports;
  return [path, n.split(', ').reduce((collect, fooAsBar) => {
    let [exportName, asName] = fooAsBar.split(' as ');
    asName = asName || exportName;
    collect[asName] = exportName;
    return collect;
  }, { [d]: 'default' })];
}).reduce((collect, [path, exportAsMap]) => {
  for (const [asName, exportName] of Object.entries(exportAsMap)) {
    collect[asName] = [path, exportName];
  }
  return collect;
}, {});
*/

for (const [x, y] of Object.entries(utilsImports.imports)) {
  allUtilExports[x] = [y, 'default'];
}

for (const [x, y] of Object.entries(utilsImports.nsImports)) {
  allUtilExports[x] = [y, '*'];
}


var types = require('@babel/types');

function barf(msg) {
  throw new Error('babel-plugin-transform-imports: ' + msg);
}

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = function () {
  return {
    visitor: {
      ImportDeclaration: function (path, state) {
        // https://github.com/babel/babel/tree/master/packages/babel-types#timportdeclarationspecifiers-source

        // path.node has properties 'source' and 'specifiers' attached.
        // path.node.source is the library/module name, aka 'react-bootstrap'.
        // path.node.specifiers is an array of ImportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier

        var source = path.node.source.value;

        if (source === '@sqs/core-components') {
          var fullImports = path.node.specifiers.filter((specifier) => specifier.type !== 'ImportSpecifier');
          var memberImports = path.node.specifiers.filter((specifier) => specifier.type === 'ImportSpecifier');

          if (fullImports.length > 0) {
            // Examples of "full" imports:
            //      import * as name from 'module'; (ImportNamespaceSpecifier)
            //      import name from 'module'; (ImportDefaultSpecifier)

            barf('import of entire module ' + source + ' not allowed');
          }

          const newImports = [];
          memberImports.forEach(function (memberImport) {
            // Examples of member imports:
            //      import { member } from 'module'; (ImportSpecifier)
            //      import { member as alias } from 'module' (ImportSpecifier)

            // transform this:
            //      import { Grid as gird } from 'react-bootstrap';
            // into this:
            //      import gird from 'react-bootstrap/lib/Grid';
            // or this, if skipDefaultConversion = true:
            //      import { Grid as gird } from 'react-bootstrap/lib/Grid';

            var importName = memberImport.imported.name;
            var localName = types.identifier(memberImport.local.name);

            if (importName === 'utils') {
              const utilsMap = [];
              for (const [utilName, utilImport] of Object.entries(allUtilExports)) {
                const [utilImportPath, utilImportName] = utilImport;

                const utilImportPathLiteral = types.stringLiteral(utilImportPath.replace(/^\./, '@sqs/core-components'));

                const tempUtilName = types.identifier('__core_components_transform_imports_' + utilName);
                utilsMap.push(types.objectProperty(types.identifier(utilName), tempUtilName));

                if (utilImportName === 'default') {
                  const importDefaultSpecifier = types.importDefaultSpecifier(tempUtilName);
                  newImports.push(
                    types.importDeclaration([importDefaultSpecifier], utilImportPathLiteral)
                  );
                } else if (utilImportName === '*') {
                  const importNamespaceSpecifier = types.importNamespaceSpecifier(tempUtilName);
                  newImports.push(
                    types.importDeclaration([importNamespaceSpecifier], utilImportPathLiteral)
                  );
                } else {
                  const importSpecifier = types.importSpecifier(tempUtilName, types.identifier(utilImportName));
                  newImports.push(
                    types.importDeclaration([importSpecifier], utilImportPathLiteral)
                  );
                }
              }
              newImports.push(types.variableDeclaration('const', [
                types.variableDeclarator(localName, types.objectExpression(utilsMap))
              ]));
            } else if (!allExports[importName]) {
              barf(`Unknown import ${importName}. you may need to import the build/cjs file directly`);
            } else {
              const [exportPath, exportName] = allExports[importName];
              const newImportPath =
                types.stringLiteral(require('path').join('@sqs/core-components/build/cjs', exportPath));

              if (exportName === 'default') {
                const importDefaultSpecifier = types.importDefaultSpecifier(localName);
                newImports.push(
                  types.importDeclaration([importDefaultSpecifier], newImportPath)
                );
              } else if (exportName === '*') {
                const importNamespaceSpecifier = types.importNamespaceSpecifier(localName);
                newImports.push(
                  types.importDeclaration([importNamespaceSpecifier], newImportPath)
                );
              } else {
                const importSpecifier = types.importSpecifier(localName, types.identifier(exportName));
                newImports.push(
                  types.importDeclaration([importSpecifier], newImportPath)
                );
              }
            }
          });

          path.replaceWithMultiple(newImports);
        }
      }
    }
  };
};
