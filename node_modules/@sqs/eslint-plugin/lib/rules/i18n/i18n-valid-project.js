/**
 * @fileoverview Check to make sure the project attribute for both t() strings and <T> components
 *               is in the "allowed" options provided.
 * @author Carmelle Millar
 */

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

const { PROJECT, T_COMPONENT_NAME, T_FUNCTION_NAME } = require('../../utils/constants');

const tJSXComponentMatcher = `JSXElement[openingElement.name.name="${T_COMPONENT_NAME}"]`;

const checkValidProjectName = (arr, val) => {
  return arr.some((arrVal) => val === arrVal);
};

module.exports = {
  meta: {
    type: 'problem',
    schema: [
      {
        type: 'object',
        properties: {
          allow: {
            type: 'array',
            items: {
              type: 'string',
            },
            minItems: 1,
            uniqueItems: true,
          },
        },
        additionalProperties: false,
        required: ['allow'],
      },
    ],
    docs: {
      description:
        'Make sure project property in t() string or <T> component is one of valid projects',
      category: 'i18n',
    },
    messages: {
      invalidProjectName: "Project name must be one of: '{{ allowed }}'",
      noAllowedProjectStringsSpecified: '.eslintrc Config Error: please add an object with the following schema: {"allow":str[]}. This is a problem with your .eslintrc, and not your code.'
    },
  },

  create: function (context) {
    const options = context.options[0] || {};
    const allowed = options.allow || [];

    return {
      ObjectExpression(node) {
        if (allowed.length === 0) {
          context.report({
            node,
            messageId: 'noAllowedProjectStringsSpecified',
          });
          return null;
        }

        if (
          node.parent &&
          node.parent.type === 'CallExpression' &&
          node.parent.callee.name === T_FUNCTION_NAME
        ) {
          const found = node.properties.find(
            (element) => element.key.name === PROJECT
          );

          if (found) {
            const { value } = found;
            const { value: projectValue } = value;

            if (checkValidProjectName(allowed, projectValue)) {
              return null;
            }

            context.report({
              node,
              messageId: 'invalidProjectName',
              data: {
                allowed,
              }
            });
          }
        }
      },
      [tJSXComponentMatcher]: (node) => {
        if (allowed.length === 0) {
          context.report({
            node,
            messageId: 'noAllowedProjectStringsSpecified',
          });
          return null;
        }

        const { openingElement } = node;
        const { attributes } = openingElement;

        const found = attributes.find(
          (element) => element.name.name === PROJECT
        );

        if (found) {
          const { value } = found;
          const { value: projectValue } = value;

          if (checkValidProjectName(allowed, projectValue)) {
            return null;
          }

          context.report({
            node,
            messageId: 'invalidProjectName',
            data: {
              allowed,
            }
          });
        } else {
          context.report({
            node,
            message: 'Your T component should have a "project" attribute.',
          });
        }
      },
    };
  },
};
