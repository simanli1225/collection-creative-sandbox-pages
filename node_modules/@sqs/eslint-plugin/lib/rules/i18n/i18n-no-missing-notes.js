/**
 * @fileoverview Ensure an i18n translation t() method or <T> component includes 
 *               notes to help give translators more context about the string they are translating
 * @author Stephanie Manwaring 
 */

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

const { NOTES, T_COMPONENT_NAME, T_FUNCTION_NAME, PROJECT } = require('../../utils/constants');
const tComponentJSXComponentMatcher = `JSXElement[openingElement.name.name="${T_COMPONENT_NAME}"]`;

module.exports = {
  meta: {
    type: "problem",
    docs: {
      description:
        "Ensure an i18n translation t() method or <T> component includes notes to help give translators more context about the string they are translating",
      category: "i18n",
    },
    messages: {
      missingTranslationNotes: "Translation should include notes",
    },
    fixable: null,
    schema: [],
  },

  create: function (context) {
    return {
      ObjectExpression(node) {
        if (
          // lots of brute force ways to try to "determine" if the method is a t() method
          node.parent &&
          node.parent.type === "CallExpression" &&
          node.parent.callee.name === T_FUNCTION_NAME
          && node.parent.arguments.length === 3 &&
          !!node.properties.find((element) => element.key.name === PROJECT)) {
          
          // eg: t('Hello {name}', { name: 'Stephanie'} , {project: 'yo', notes: 'sup' })
          const tMethodThirdArgNode = node.parent.arguments[2];
          const foundNotes = tMethodThirdArgNode.properties.find(
            (element) => element.key.name === NOTES
          );

          if (foundNotes) {
            const { value } = foundNotes;
            const { value: notesValue } = value;

            if (notesValue.length > 0) {
              return null;
            }
          }

          context.report({
            node,
            messageId: "missingTranslationNotes",
          });
        } 
      },
      [tComponentJSXComponentMatcher]: (node) => {
        const { openingElement } = node;
        const { attributes } = openingElement;

        const foundNotes = attributes.find(
          (element) => element.name.name === NOTES
        );

        if (foundNotes) {
          const { value } = foundNotes;
          const { value: notesValue } = value;

          if (notesValue.length > 0) {
            return null;
          }

          context.report({
            node,
            messageId: "missingTranslationNotes",

          });
        } else {
          context.report({
            node,
            messageId: "missingTranslationNotes",
          });
        }
      },
    };
  },
};
 