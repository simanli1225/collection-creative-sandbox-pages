/**
 * @fileoverview Prefer use of the apostrophe symbol when using contractions or possessives in string literals.
 * @author Stephanie Manwaring
 */

module.exports = {
  meta: {
    docs: {
      description:
        'Prefer use of the apostrophe symbol when using contractions or possessives in string literals.',
      category: 'Stylistic Issues',
      recommended: false,
    },
    fixable: 'code', // Mark the rule as fixable
    schema: [],
  },

  create: function(context) {
    const ERROR_MESSAGE_PREFER_APOSTROPHE =
      'Replace single quote with apostrophe symbol ’ in contractions and possessives.';
    // checks for the following pattens: a'b, abc'd, or abc'def ('b and b' are not matched)
    const IS_SINGLE_QUOTE_SURROUNDED_BY_LETTERS_REGEX = /[A-Za-z](?=('(?=([A-Za-z]))))/;

    return {
      Literal(node) {
        // this rule doesn't care about string literals used in "throw"s
        if (node.parent && node.parent.type === 'ThrowStatement') {
          return null;
        }
        // this rule doesn't care about string literals used in "throw new Error()"
        if (
          node.parent.parent &&
          node.parent.parent.type === 'ThrowStatement'
        ) {
          return null;
        }
        // this rule doesn't care about string literals used in 'it' or 'describe' blocks (used in tests)
        if (
          node.parent &&
          node.parent.type === 'CallExpression' &&
          (node.parent.callee.name === 'it' ||
            node.parent.callee.name === 'describe')
        ) {
          return null;
        }

        // if the string literal is not used in any of the above use cases, then check it against the regex
        // report the issue if it matches the regex test
        if (
          node.value &&
          IS_SINGLE_QUOTE_SURROUNDED_BY_LETTERS_REGEX.test(node.value)
        ) {
          context.report({
            node,
            loc: node.loc,
            message: ERROR_MESSAGE_PREFER_APOSTROPHE,
            fix: function(fixer) {
              const fixedValue = node.value.replace(/'/g, '’');
              return fixer.replaceText(node, `'${fixedValue}'`);
            },
          });
        }
      },
    };
  },
};
