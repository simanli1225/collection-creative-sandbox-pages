/**
 * @fileoverview Squarespace ESLint plugin
 * @author IA
 */

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const fs = require('fs');
const path = require('path');
const has = require('has');

const getAllFiles = function(dirPath, arrayOfFiles = []) {
  const files = fs.readdirSync(dirPath);

  files.forEach(function(file) {
    const filePath = path.join(dirPath, file);
    if (fs.statSync(filePath).isDirectory()) {
      arrayOfFiles = getAllFiles(filePath, arrayOfFiles);
    } else {
      arrayOfFiles.push(filePath);
    }
  });

  return arrayOfFiles;
};

const allRules = getAllFiles(path.resolve(__dirname, './rules')).reduce(
  (acc, filename) => {
    const ruleName = path.basename(filename, '.js');
    acc[ruleName] = require(filename);
    return acc;
  },
  {}
);

function filterRules(rules, predicate) {
  const result = {};
  for (const key in rules) {
    if (has(rules, key) && predicate(rules[key])) {
      result[key] = rules[key];
    }
  }
  return result;
}

function configureAsError(rules) {
  const result = {};
  for (const key in rules) {
    if (!has(rules, key)) {
      continue;
    }
    result[`@sqs/${key}`] = 2;
  }
  return result;
}

const activeRules = filterRules(allRules, function(rule) {
  return !rule.meta.deprecated;
});
const activeRulesConfig = configureAsError(activeRules);

const deprecatedRules = filterRules(allRules, function(rule) {
  return rule.meta.deprecated;
});

//------------------------------------------------------------------------------
// Plugin Definition
//------------------------------------------------------------------------------

// import all rules in lib/rules
module.exports = {
  deprecatedRules: deprecatedRules,
  rules: allRules,
  all: {
    plugins: ['@sqs'],
    parserOptions: {
      ecmaFeatures: {
        jsx: true,
      },
    },
    rules: activeRulesConfig,
  },
};
