"use strict";

require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.reflect.construct.js");
require("core-js/modules/es.object.define-property.js");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
require("core-js/modules/es.array.concat.js");
require("core-js/modules/es.function.name.js");
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _constants = require("../constants");
var _utils = require("../utils");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/**
 * An error created as the result of an unsuccessful Axios call to a Squarespace
 * API endpoint. Should be created in the `catch` block of a failed Axios
 * request. Useful for logging errors to error reporters such as Sentry, because
 * all errors originating from Axios share the same stacktrace, so Sentry cannot
 * tell them apart; by constructing a new ApiError instance in a catch block,
 * a new stacktrace is captured, which can be used to distinguish API failures
 * from one other.
 *
 * @extends Error
 * @property {string} message - A message describing the error
 * @property {string} functionName - A unique identifier (passed to the
 *  constructor) for the function (e.g. action, API helper) in which the error
 *  occurred
 * @property {any} cause - the original error (passed to `ApiError` constructor)
 *  which caused this error to be thrown. Typically an Axios error.
 * @property {XMLHttpRequest} request - the request that caused the errant
 *  response (`null` if the cause was not an axios error)
 * @property {object} config - the request config provided to Axios
 * @property {object} response - the errant response (if there was a response
 *  from axios)
 *
 * @see {@link https://github.com/axios/axios#response-schema | Axios Response Schema}
 * @see {@link https://github.com/axios/axios#handling-errors | Axios Error Handling}
 */
var ApiError = /*#__PURE__*/function (_Error) {
  (0, _inherits2["default"])(ApiError, _Error);
  var _super = _createSuper(ApiError);
  /**
   * Create an ApiError.
   * @param {string} message - a brief message describing the error
   * @param {string} functionName - the name of the API call that was made
   *  (e.g. 'getUsers')
   * @param {object} cause - the original error
   * @param {boolean} [cause.isAxiosError] - set to true by axios, used to
   *  determine if `cause` is an error from axios. If true, error
   *  is expected to match the Axios error schema. If falsy, `request`,
   *  `response` will be `null`.
   */
  function ApiError(message, functionName, cause) {
    var _this;
    (0, _classCallCheck2["default"])(this, ApiError);
    // based loosely upon RPCError here:
    // eslint-disable-next-line max-len
    // https://docs.sentry.io/data-management/event-grouping/sdk-fingerprinting/?platform=browsernpm#group-errors-more-granularly
    // append original cause message, if present
    var fullMessage = "".concat(message, " (").concat(cause === null || cause === void 0 ? void 0 : cause.message, ")");
    _this = _super.call(this, fullMessage);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_classId", _constants.CLASS_ID);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "functionName", null);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "cause", null);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "request", null);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "config", null);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "response", null);
    _this.name = _this.constructor.name;
    _this.functionName = functionName;
    _this.cause = cause;

    // errors from Axios (as of >0.19) will have an `isAxiosError` property
    // https://github.com/axios/axios/blob/v0.19.0/lib/core/enhanceError.js#L21
    if (cause && cause.isAxiosError) {
      _this.request = cause.request;
      _this.config = cause.config;
      _this.response = cause.response || null;
    }
    return _this;
  }
  return (0, _createClass2["default"])(ApiError);
}( /*#__PURE__*/(0, _wrapNativeSuper2["default"])(Error));
exports["default"] = ApiError;
(0, _defineProperty2["default"])(ApiError, "isApiError", _utils.isApiError);
module.exports = exports.default;