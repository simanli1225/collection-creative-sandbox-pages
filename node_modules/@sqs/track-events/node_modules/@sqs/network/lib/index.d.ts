declare module '@sqs/network' {
  import {
    AxiosError,
    AxiosInstance,
    AxiosPromise,
    AxiosRequestConfig,
    AxiosResponse,
  } from 'axios';
  export type NetworkInstance = AxiosInstance;
  export type NetworkRequestConfig = AxiosRequestConfig;
  export type NetworkResponse<T = any> = AxiosResponse<T>;
  export type NetworkError<T = any> = AxiosError<T>;
  export type NetworkPromise<T = any> = AxiosPromise<T>;
  const networkInstance: NetworkInstance;

  export class ApiError extends Error {
    static isApiError(errorInstance: Error | ApiError): boolean;

    public cause: null | NetworkError;
    public config: null | NetworkRequestConfig;
    public functionName: null | string;
    public request: null | NetworkPromise;
    public response: null | NetworkResponse;

    constructor(message: string, functionName: string, cause?: NetworkError);
  }

  interface RequestInterceptor {
    fulfilledHandler: (value: NetworkRequestConfig) => NetworkRequestConfig,
    rejectedHandler: (error: any) => any
  }
  interface ResponseInterceptor {
    fulfilledHandler: (value: NetworkResponse) => NetworkResponse | Promise<any>
    rejectedHandler: (error: any) => any
  }
  interface InterceptorConfig {
    request?: Array<RequestInterceptor>,
    response?: Array<ResponseInterceptor>
  }
  export function customInstance(config: InterceptorConfig): NetworkInstance;
  export const crumb: {
    crumbKey: string,
    getCrumbValue: () => string,
  };
  export const interceptors: {
    crumbInterceptor: RequestInterceptor,
    paramsSerializerInterceptor: RequestInterceptor,
  };

  export const errors: {
    ApiError: typeof ApiError,
  };

  export default networkInstance;
}
