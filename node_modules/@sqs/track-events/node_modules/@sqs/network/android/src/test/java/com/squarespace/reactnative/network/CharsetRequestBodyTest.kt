package com.squarespace.reactnative.network

import com.nhaarman.mockitokotlin2.doReturn
import com.nhaarman.mockitokotlin2.mock
import com.nhaarman.mockitokotlin2.verify
import com.nhaarman.mockitokotlin2.verifyNoMoreInteractions
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.RequestBody
import okio.BufferedSink
import org.junit.Assert.assertEquals
import org.junit.Assert.assertNull
import org.junit.Test

class CharsetRequestBodyTest {

  @Test
  fun `when internal body content type already has a charset then provided charset is not used`() {
    val mockRequestBody: RequestBody = mock {
      on { contentType() } doReturn "text/plain; charset=UTF-8".toMediaTypeOrNull()
    }
    val requestBody = CharsetRequestBody(mockRequestBody, Charsets.UTF_16)

    assertEquals("text/plain; charset=UTF-8", requestBody.contentType().toString())
  }

  @Test
  fun `when internal body content type is missing charset then provided charset is used`() {
    val mockRequestBody: RequestBody = mock {
      on { contentType() } doReturn "text/plain".toMediaTypeOrNull()
    }
    val requestBody = CharsetRequestBody(mockRequestBody, Charsets.UTF_16)

    assertEquals("text/plain; charset=UTF-16", requestBody.contentType().toString())
  }


  @Test
  fun `when internal body content type is missing then no content type is provided`() {
    val mockRequestBody: RequestBody = mock {
      on { contentType() } doReturn null
    }
    val requestBody = CharsetRequestBody(mockRequestBody, Charsets.UTF_16)

    assertNull(requestBody.contentType())
  }


  @Test
  fun `when content length is requested then internal body length is used`() {
    val mockRequestBody: RequestBody = mock {
      on { contentLength() } doReturn 0
    }
    val requestBody = CharsetRequestBody(mockRequestBody, Charsets.UTF_16)

    assertEquals(0, requestBody.contentLength())

    verify(mockRequestBody).contentLength()
    verifyNoMoreInteractions(mockRequestBody)
  }

  @Test
  fun `when writing occurs then internal body is used`() {
    val mockRequestBody: RequestBody = mock()
    val mockSink: BufferedSink = mock()

    val requestBody = CharsetRequestBody(mockRequestBody, Charsets.UTF_16)

    requestBody.writeTo(mockSink)

    verify(mockRequestBody).writeTo(mockSink)
    verifyNoMoreInteractions(mockRequestBody)
  }
}
