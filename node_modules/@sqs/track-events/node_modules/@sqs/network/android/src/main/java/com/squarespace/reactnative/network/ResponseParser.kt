package com.squarespace.reactnative.network

import com.facebook.react.bridge.ReadableMap
import com.google.gson.JsonParser
import com.squarespace.reactnative.toolkit.arguments.ArgumentUtils
import com.squarespace.reactnative.toolkit.arguments.of
import okhttp3.ResponseBody
import retrofit2.Response

/**
 * Constructs structured response mappings for the [NetworkBridge].
 *
 * The JavaScript client code has a specific shape it is expecting.
 * This [ResponseParser] is responsible for transforming a retrofit [Response] into the shape expected by the
 * JavaScript clients. It is also responsible for ensuring that the response is a react native compatible argument type.
 *
 * See: [Argument Types](https://facebook.github.io/react-native/docs/native-modules-android#argument-types)
 */
internal object ResponseParser {

  private val jsonParser by lazy { JsonParser() }

  /**
   * Extrapolate a [ReadableMap] from the response.
   *
   * @param response retrofit [Response] wrapper
   * @return [ReadableMap] that can be sent directly back to react native.
   */
  fun parse(response: Response<ResponseBody>): ReadableMap {
    return ArgumentUtils.createMap().of(
      "status" to response.code(),
      "config" to parseQueryParameters(response),
      "data" to parse(response.body())
    )
  }

  /**
   * Extrapolate a valid react native argument type from the response.
   *
   * See: [Argument Types](https://facebook.github.io/react-native/docs/native-modules-android#argument-types)
   * @param body okhttp [ResponseBody] in json format
   * @return [Any] that can be sent directly back to react native.
   */
  fun parse(body: ResponseBody?): Any? {
    return body?.string()
      ?.let { jsonParser.parse(it) }
      ?.let { ArgumentUtils.fromJsonElement(it) }
  }

  /**
   * Extracts the query parameters out from the original request.
   */
  private fun parseQueryParameters(response: Response<ResponseBody>): ReadableMap {
    val url = response.raw().request.url

    // convert the original query parameters into a key/value map
    return (0 until url.querySize)
      .map { url.queryParameterName(it) to url.queryParameterValue(it) }
      .toTypedArray()
      .let { ArgumentUtils.createMap().of(*it) }
  }
}
