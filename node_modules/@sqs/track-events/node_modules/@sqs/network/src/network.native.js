import { NativeModules } from 'react-native';

const { NetworkBridge } = NativeModules;

/**
 * This provides property transforms that make this compatible with
 * axios API e.g.
 *
 * axios.post(path, data, config)
 *
 * Whereby the second param is not overloaded with data wrapped as { data }
 * and an encoding property in the same object - but passed as headers in config.
 *
 * @param {Object} parameters
 * @param {Object} config - third param provided to axios request
 */
const axiosCompat = (parameters = {}, config) => {
  // Disabling eslint next line to allow for getting all or params
  // without writing or bringing in a util (and not using delete)
  // eslint-disable-next-line no-unused-vars
  const { encoding, ...data } = parameters;
  const headers = config && config.headers;

  return {
    ...parameters,
    data: config ? data : parameters.data,
    encoding: headers ? headers['Content-Type'] : parameters.encoding
  };
};

class Network {
  async get(path, parameters = {}, config) {
    return this.request({ method: 'get', path, ...axiosCompat(parameters, config) });
  }
  async put(path, parameters = {}, config) {
    return this.request({ method: 'put', path, ...axiosCompat({ encoding: 'json', ...parameters }, config) });
  }
  async post(path, parameters = {}, config) {
    return this.request({ method: 'post', path, ...axiosCompat({ encoding: 'json', ...parameters }, config) });
  }
  async delete(path, parameters = {}, config) {
    return this.request({ method: 'delete', path, ...axiosCompat(parameters, config) });
  }
  async request(args) {
    const { method, path, params, data, encoding } = args;
    return NetworkBridge.request(method, path, JSON.stringify(params), JSON.stringify(data), encoding);
  }
  async upload(path, localFileURL, additionalFormData) {
    return NetworkBridge.upload(path, localFileURL, additionalFormData);
  }
  async cancelUpload(localFileURL) {
    return NetworkBridge.cancelUpload(localFileURL);
  }
}

export default Network;
