import { CLASS_ID } from '../constants';
import { isApiError } from '../utils';

/**
 * An error created as the result of an unsuccessful Axios call to a Squarespace
 * API endpoint. Should be created in the `catch` block of a failed Axios
 * request. Useful for logging errors to error reporters such as Sentry, because
 * all errors originating from Axios share the same stacktrace, so Sentry cannot
 * tell them apart; by constructing a new ApiError instance in a catch block,
 * a new stacktrace is captured, which can be used to distinguish API failures
 * from one other.
 *
 * @extends Error
 * @property {string} message - A message describing the error
 * @property {string} functionName - A unique identifier (passed to the
 *  constructor) for the function (e.g. action, API helper) in which the error
 *  occurred
 * @property {any} cause - the original error (passed to `ApiError` constructor)
 *  which caused this error to be thrown. Typically an Axios error.
 * @property {XMLHttpRequest} request - the request that caused the errant
 *  response (`null` if the cause was not an axios error)
 * @property {object} config - the request config provided to Axios
 * @property {object} response - the errant response (if there was a response
 *  from axios)
 *
 * @see {@link https://github.com/axios/axios#response-schema | Axios Response Schema}
 * @see {@link https://github.com/axios/axios#handling-errors | Axios Error Handling}
 */
export default class ApiError extends Error {
  static isApiError = isApiError;

  _classId = CLASS_ID;
  functionName = null;
  cause = null;
  request = null;
  config = null;
  response = null;

  /**
   * Create an ApiError.
   * @param {string} message - a brief message describing the error
   * @param {string} functionName - the name of the API call that was made
   *  (e.g. 'getUsers')
   * @param {object} cause - the original error
   * @param {boolean} [cause.isAxiosError] - set to true by axios, used to
   *  determine if `cause` is an error from axios. If true, error
   *  is expected to match the Axios error schema. If falsy, `request`,
   *  `response` will be `null`.
   */
  constructor(message, functionName, cause) {
    // based loosely upon RPCError here:
    // eslint-disable-next-line max-len
    // https://docs.sentry.io/data-management/event-grouping/sdk-fingerprinting/?platform=browsernpm#group-errors-more-granularly
    // append original cause message, if present
    const fullMessage = `${message} (${cause?.message})`;
    super(fullMessage);
    this.name = this.constructor.name;

    this.functionName = functionName;
    this.cause = cause;

    // errors from Axios (as of >0.19) will have an `isAxiosError` property
    // https://github.com/axios/axios/blob/v0.19.0/lib/core/enhanceError.js#L21
    if (cause && cause.isAxiosError) {
      this.request = cause.request;
      this.config = cause.config;
      this.response = cause.response || null;
    }
  }
}