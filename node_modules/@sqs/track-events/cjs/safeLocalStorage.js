"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
/**
 * SafeLocalStorage
 * A wrapper around used localStorage methods that handle errors that can be caused by
 * private browsing, storage capacity, etc.
 */
var SafeLocalStorage = /*#__PURE__*/(0, _createClass2["default"])(function SafeLocalStorage() {
  (0, _classCallCheck2["default"])(this, SafeLocalStorage);
  /**
   * When passed a key name, will return that key's value, or null if the key does not exist.
   * @param {string} key - The name of the key you want to retrieve the value of
   * @returns {string|null} - The value of the key. If the key does not exist, null is returned.
   */
  (0, _defineProperty2["default"])(this, "getItem", function (key) {
    try {
      return localStorage.getItem(key);
    } catch (e) {
      return null;
    }
  });
  /**
   * When passed a key name, will remove that key if it exists.
   * @param {string} key - The name of the key you want to remove
   * @returns {void}
   */
  (0, _defineProperty2["default"])(this, "removeItem", function (key) {
    try {
      return localStorage.removeItem(key);
    } catch (_unused) {
      // eslint-disable-next-line no-empty
    }
  });
  /**
   * When passed a key name and value, will add that key or update that key's value if it already exists.
   * @param {string} key - The name of the key you want to create/update
   * @param {string} value - The value you want to give the key you are creating/updating
   * @returns {void}
   */
  (0, _defineProperty2["default"])(this, "setItem", function (key, value) {
    try {
      return localStorage.setItem(key, value);
    } catch (_unused2) {
      // eslint-disable-next-line no-empty
    }
  });
});
var _default = exports["default"] = new SafeLocalStorage();
module.exports = exports.default;