"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.SiteVisitorClient = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _base = _interopRequireDefault(require("../base"));
var _cookieCutter = _interopRequireDefault(require("@sqs/cookie-cutter"));
var _sessionInfo = require("@sqs/session-info");
var _version = require("../version");
var _types = require("../types");
var _defaultConfig = require("./constants/defaultConfig");
var _util = require("../util");
var _excluded = ["context_website_id", "custom_schema_name", "destination_url", "member_account_id", "object_identifier", "resolved_locale", "website_locale", "member_account_locale"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * EventsClient v2
 * A simple wrapper for sending events to the v2 Squarespace events pipeline
 * See common schema here: https://github.com/sqsp/events-schemas/blob/master/schemas/common/common.avdl
 */
var EventsClient = exports["default"] = /*#__PURE__*/function (_BaseClient) {
  /**
   * Instantiate a new EventsClient
   * -- Configuration
   * @param {Object} config - Configuration of the service and schemas
   * @param {string} config.customSchemaName - The name of the custom schema. Ex: "LocalListings"
   * @param {string} config.sourceEnvironment - The source environment e.g. 'dev', 'staging', 'prod'
   * @param {string} config.devBaseDomainUrl - use this domain for sending events locally to help with proxying
   * @param {boolean} config.logging - Log events in the developer console
   * @param {boolean} config.useBeacon - Use beacon requests
   * @param {boolean} config.validateMode - for testing if events have valid format
   * @param {boolean} config.fireEvents - turn on/off firing events
   * -- Default event payload data
   * @param {Object} defaultPayload - A set of common data for all events tracked
   * @param {string} defaultPayload.event_owner_team - The team that implemented this event (required). Ex: "conversion"
   * @param {string} defaultPayload.event_source - The source of this event, e.g. web, ios, android, server
   * @param {string} defaultPayload.product_area - The product area of this event
   * @param {string} defaultPayload.member_account_id - The member_account_id of this event's actor, if actor is 'user'.
   * @param {string} defaultPayload.resolved_locale - What language the server sent its content in
   * (e.g. from the Content-Language response header, for Frontsite events).
   * @param {string} defaultPayload.website_locale - The locale of the sqsp website that is shown
   * to site visitors, set by the user in the CMS.
   * @param {string} defaultPayload.context_website_id - The website_id of the sqsp site that the event happened on
   * @param {string} defaultPayload.member_account_locale - The authenticated userâ€™s locale setting
   * @param {string} defaultPayload.browser_locale - The locale of the user's browser. Collected from navigator.language.
   */

  function EventsClient(config) {
    var _maybeNavigator;
    var _this;
    var defaultPayload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck2["default"])(this, EventsClient);
    _this = _callSuper(this, EventsClient);
    var defaultConfig = (0, _defaultConfig.getDefaultConfig)();
    _this._config = Object.assign(defaultConfig, config);
    _this._defaultPayload = defaultPayload;
    if (!('sendBeacon' in ((_maybeNavigator = (0, _util.maybeNavigator)()) !== null && _maybeNavigator !== void 0 ? _maybeNavigator : {}))) {
      _this._config.useBeacon = false;
    }
    _this._config.url = _this._generateUrl();
    return _this;
  }

  /**
   * Generate the event payload
   * @param {Object} event - The object with the event data
   * @returns {Object} - The fully constructed event payload
   */
  (0, _inherits2["default"])(EventsClient, _BaseClient);
  return (0, _createClass2["default"])(EventsClient, [{
    key: "_generatePayload",
    value: function _generatePayload(event) {
      var _maybeProcess;
      var date = new Date();
      var isCookieEnabled = this._config.setAnalyticsCookie;
      var sessionInfo = (0, _sessionInfo.getSessionInfo)(isCookieEnabled);
      var defaultAndEvent = _objectSpread(_objectSpread({}, this._defaultPayload), event);

      // separate browser_common fields we can't auto populate
      var context_website_id = defaultAndEvent.context_website_id,
        custom_schema_name = defaultAndEvent.custom_schema_name,
        destination_url = defaultAndEvent.destination_url,
        member_account_id = defaultAndEvent.member_account_id,
        object_identifier = defaultAndEvent.object_identifier,
        resolved_locale = defaultAndEvent.resolved_locale,
        website_locale = defaultAndEvent.website_locale,
        member_account_locale = defaultAndEvent.member_account_locale,
        restOfDefaultAndEvent = (0, _objectWithoutProperties2["default"])(defaultAndEvent, _excluded);
      var autoPopulatedFields = {
        // browser_common
        analytics_id: this._getAnalyticsId(),
        browser_language: navigator.language,
        browser_window_height: Math.round(window.innerHeight) || null,
        browser_window_width: Math.round(window.innerWidth) || null,
        client_name: 'Javascript Pipeline 2.0 Event Tracker Client',
        client_version: _version.VERSION,
        marketing_id: _cookieCutter["default"].get('SS_MID') || null,
        page_host: window.location.hostname,
        page_path: this._getNormalizedPathname(),
        page_query_params: window.location.search,
        page_referrer_url: document.referrer,
        session_id: sessionInfo.sessionId || null,
        // other
        enduser_user_agent: navigator.userAgent,
        event_occurrence_timestamp: date.getTime(),
        browser_locale: navigator.language
      };
      this._warnOfOverwrittenFields(defaultAndEvent, autoPopulatedFields);
      var customSchemaName = custom_schema_name || this._config.customSchemaName;
      // detect if events are being fired from within a jest runner
      var isJestEnv = Boolean((_maybeProcess = (0, _util.maybeProcess)()) === null || _maybeProcess === void 0 || (_maybeProcess = _maybeProcess.env) === null || _maybeProcess === void 0 ? void 0 : _maybeProcess.JEST_WORKER_ID);
      var source_environment = isJestEnv ? 'test' : this._config.sourceEnvironment;
      var payload = {
        eventContent: _objectSpread(_objectSpread(_objectSpread({}, restOfDefaultAndEvent), autoPopulatedFields), {}, {
          // auto populated fields overwrite event data
          custom_schema_name: customSchemaName,
          source_environment: source_environment,
          context_website_id: context_website_id || null,
          destination_url: destination_url || null,
          member_account_id: member_account_id || null,
          object_identifier: object_identifier || null,
          resolved_locale: resolved_locale || document.documentElement.lang || 'en-US',
          website_locale: website_locale || null,
          member_account_locale: member_account_locale || null
        }),
        eventSchemaName: customSchemaName
      };

      // log the payload
      if (this._config.logging) {
        this._log({
          payload: _objectSpread({}, payload)
        });
      }
      payload.eventContent = JSON.stringify(payload.eventContent);
      return payload;
    }

    /**
     * Warn consumers that auto populated values will override their event data if there is a conflict
     * @param {object} defaultAndEvent - event data
     * @param {object} autoPopulatedFields - auto populated data
     * @returns {void}
     */
  }, {
    key: "_warnOfOverwrittenFields",
    value: function _warnOfOverwrittenFields(defaultAndEvent, autoPopulatedFields) {
      var _this2 = this;
      Object.keys(defaultAndEvent).forEach(function (eventKey) {
        if (defaultAndEvent.hasOwnProperty(eventKey) && autoPopulatedFields.hasOwnProperty(eventKey)) {
          _this2._warn("".concat(eventKey, " is auto populated by @sqs/track-events/v2 and was overwritten"));
        }
      });
    }

    /**
     * Generate url for sending events depending on config.sourceEnvironment
     * If called from within a jest runner, will default to staging
     * @param {string} sourceEnvironment - 'staging' or 'prod' all other values will result in the url returned being ''
     * @returns {string} the endpoint events will be sent to
     */
  }, {
    key: "_generateUrl",
    value: function _generateUrl() {
      var _maybeProcess2;
      var isJestEnv = Boolean((_maybeProcess2 = (0, _util.maybeProcess)()) === null || _maybeProcess2 === void 0 || (_maybeProcess2 = _maybeProcess2.env) === null || _maybeProcess2 === void 0 ? void 0 : _maybeProcess2.JEST_WORKER_ID);
      if (isJestEnv) {
        return 'https://clanker-events.stage.sqsp.net/api/v1/clanker/events';
      }
      var _this$_config = this._config,
        sourceEnvironment = _this$_config.sourceEnvironment,
        devBaseDomainUrl = _this$_config.devBaseDomainUrl;
      var url = '';
      switch (sourceEnvironment) {
        case _types.SourceEnvironment.DEV:
          url = "".concat(devBaseDomainUrl, "/api/v1/clanker/events");
          break;
        case _types.SourceEnvironment.QA:
        case _types.SourceEnvironment.STAGING:
          url = 'https://clanker-events.stage.sqsp.net/api/v1/clanker/events';
          break;
        case _types.SourceEnvironment.PROD:
          url = 'https://clanker-events.squarespace.com/api/v1/clanker/events';
          break;
        default:
          this._warn('sourceEnvironment needs to be set to one of dev, staging, or prod');
          url = '';
      }
      return url;
    }

    /**
     * Spawn a new tracker that extends the configuration and default payload of originating instance
     * @param {Object} defaults - The additional default payload to be sent by the new tracker
     * @returns {EventsClient} - The newly spawned tracker
     */
  }, {
    key: "spawnTracker",
    value: function spawnTracker() {
      var defaults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var defaultPayload = Object.assign({}, this._defaultPayload, defaults);
      return new EventsClient(this._config, defaultPayload);
    }

    /**
     * Sends event for validation only to staging endpoint, does not actually log event
     * @param {Object} payload - The event payload to send
     * @returns {Promise} - Resolves when the request was completed successfully
     */
  }, {
    key: "_validateEvent",
    value: function _validateEvent(payload) {
      var url = "".concat(this._config.devBaseDomainUrl, "/api/v1/clanker/validate-event-content/").concat(this._config.customSchemaName);
      return this._sendXhr(payload.eventContent, url);
    }
  }]);
}(_base["default"]);
/**
 * This is a wrapper around EventsClient that should be used for site visitor
 * facing pages.
 *
 * We have stricter requirements on the cookies that we use on these pages due
 * to GDPR, so we set setAnalyticsCookie to false.
 */
var SiteVisitorClient = exports.SiteVisitorClient = /*#__PURE__*/function (_EventsClient) {
  function SiteVisitorClient(config) {
    var defaultPayload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck2["default"])(this, SiteVisitorClient);
    return _callSuper(this, SiteVisitorClient, [_objectSpread(_objectSpread({}, config), {}, {
      setAnalyticsCookie: false
    }), defaultPayload]);
  }
  (0, _inherits2["default"])(SiteVisitorClient, _EventsClient);
  return (0, _createClass2["default"])(SiteVisitorClient);
}(EventsClient);