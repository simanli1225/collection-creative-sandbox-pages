import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _typeof from "@babel/runtime/helpers/typeof";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import BaseClient from '../base';
import cookie from '@sqs/cookie-cutter';
import { getSessionInfo } from '@sqs/session-info';
import commonSchemaFields from './constants/common-schema-fields';
import { getDefaultConfig } from './constants/defaultConfig';
import { maybeNavigator } from '../util';
/**
 * EventsClient V1
 * A simple wrapper for sending events to the v1 Squarespace events pipeline
 * See common schema here: https://github.com/sqsp/events-schemas/blob/master/schemas/common/common.avdl
 */
var EventsClient = /*#__PURE__*/function (_BaseClient) {
  /**
   * Instantiate a new EventsClient
   * -- Configuration
   * @param {Object} config - Configuration of the service and schemas
   * @param {string} config.customSchemaName - The name of the custom schema. Ex: "LocalListings"
   * @param {string} config.sourceEnvironment - The source environment e.g. 'dev', 'staging', 'prod'
   * @param {string} config.devBaseDomainUrl - use this domain for sending events locally to help with proxying
   * @param {boolean} config.logging - Log events in the developer console
   * @param {boolean} config.useBeacon - Use beacon requests
   * @param {boolean} config.validateMode - for testing if events have valid format
   * @param {boolean} config.fireEvents - turn on/off firing events
   * -- Default event payload data
   * @param {Object} defaultPayload - A set of common data for all events tracked
   * @param {string} defaultPayload.event_owner_team - The team that implemented this event (required). Ex: "conversion"
   * @param {string} defaultPayload.event_source - The source of this event, e.g. web, ios, android, server
   * @param {string} defaultPayload.product_area - The product area of this event
   * @param {string} defaultPayload.member_account_id - The member_account_id of this event's actor, if actor is 'user'.
   * @param {string} defaultPayload.resolved_locale - What language the server sent its content
   * in (e.g. from the Content-Language response header, for Frontsite events).
   * @param {string} defaultPayload.website_locale - The locale of the sqsp website that
   * is shown to site visitors, set by the user in the CMS.
   * @param {string} defaultPayload.context_website_id - The website_id of the sqsp site that the event happened on
   * @param {string} defaultPayload.member_account_locale - The authenticated userâ€™s locale setting
   * @param {string} defaultPayload.browser_locale - The locale of the user's browser. Collected from navigator.language.
   * @param {string} defaultPayload.frontsite_language - The website_id of the sqsp site that the event happened on
   */

  function EventsClient(config) {
    var _maybeNavigator;
    var _this;
    var defaultPayload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, EventsClient);
    _this = _callSuper(this, EventsClient);
    var defaultConfig = getDefaultConfig();
    _this._config = Object.assign(defaultConfig, config);
    _this._defaultPayload = defaultPayload;
    if (!('sendBeacon' in ((_maybeNavigator = maybeNavigator()) !== null && _maybeNavigator !== void 0 ? _maybeNavigator : {}))) {
      _this._config.useBeacon = false;
    }
    return _this;
  }

  /**
   * Generate the event payload
   * @param {Object} event - The object with the event data
   * @returns {Object} - The fully constructed event payload
   */
  // eslint-disable-next-line complexity
  _inherits(EventsClient, _BaseClient);
  return _createClass(EventsClient, [{
    key: "_generatePayload",
    value: function _generatePayload(event) {
      var _window$Static;
      var values = Object.assign({}, this._defaultPayload, event);
      var date = new Date();
      var sessionInfo = getSessionInfo();
      var payload = {
        analyticsId: this._getAnalyticsId(),
        commonData: '',
        customData: '',
        customSchemaName: this._config.customSchemaName
      };
      var commonData = {
        // Data enriched by client
        browser_window_height: window.innerHeight,
        browser_window_width: window.innerWidth,
        browser_language: navigator.language,
        page_host: window.location.hostname,
        page_path: this._getNormalizedPathname(),
        page_query_params: window.location.search,
        page_referrer_url: document.referrer,
        resolved_locale: document.documentElement.lang || 'en-US',
        timestamp_client: date.getTime(),
        user_marketing_id: cookie.get('SS_MID') || null,
        user_session_id: sessionInfo.sessionId || null,
        browser_locale: navigator.language,
        member_account_locale: null,
        website_locale: null,
        frontsite_language: null
      };
      var customData = {};

      // Hydrate fields from event
      for (var prop in values) {
        if (values.hasOwnProperty(prop)) {
          var value = values[prop];

          // If the field is part of common schema add it to commonData
          if (commonSchemaFields.hasOwnProperty(prop)) {
            var field = commonSchemaFields[prop];
            if (_typeof(value) === field.type || field.nullable && value === null) {
              commonData[prop] = value;
            } else {
              this._warn("common field ".concat(prop, " was not set or was the incorrect type"));
            }
          } else {
            // If not add it to customData
            customData[prop] = value;
          }
        }
      }
      var sqspContext = (_window$Static = window.Static) === null || _window$Static === void 0 ? void 0 : _window$Static.SQUARESPACE_CONTEXT;

      // Conditionally hydrate account ID, template, and website IDs from Squarespace context
      if (sqspContext !== null && sqspContext !== void 0 && sqspContext.website.id) {
        commonData.context_website_id = sqspContext.website.id;
        commonData.user_website_id = sqspContext.website.id;
      }
      if (sqspContext !== null && sqspContext !== void 0 && sqspContext.templateId) {
        commonData.context_template_website_id = sqspContext.templateId;
      }
      if (sqspContext !== null && sqspContext !== void 0 && sqspContext.authenticatedAccount) {
        // @ts-expect-error
        commonData.user_member_account_id = sqspContext.authenticatedAccount.id;
      }

      // Stringify event data - because strings within strings
      payload.commonData = JSON.stringify(commonData);
      payload.customData = JSON.stringify(customData);
      if (this._config.logging) {
        this._log({
          payload: _objectSpread({}, payload)
        });
      }
      return payload;
    }

    /**
     * Spawn a new tracker that extends the configuration and default payload of originating instance
     * @param {Object} defaults - The additional default payload to be sent by the new tracker
     * @returns {EventsClient} - The newly spawned tracker
     */
  }, {
    key: "spawnTracker",
    value: function spawnTracker() {
      var defaults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var defaultPayload = Object.assign({}, this._defaultPayload, defaults);
      return new EventsClient(this._config, defaultPayload);
    }
  }]);
}(BaseClient);
export { EventsClient as default };