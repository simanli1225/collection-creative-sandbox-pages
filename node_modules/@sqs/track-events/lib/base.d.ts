import { ClientConfig, ClientInternalConfig, DefaultPayload, EventSource, SourceEnvironment } from './types';
export { ClientConfig, EventSource, SourceEnvironment };
export default class BaseClient {
    _analyticsId: string;
    _config: ClientInternalConfig;
    _defaultPayload: DefaultPayload;
    _safeSendBeacon?: (typeof navigator)['sendBeacon'];
    track(event?: object): Promise<any>;
    getAnalyticsId(): any;
    protected _getAnalyticsId(): any;
    protected _getLocalStorageItem(): string;
    protected _getNormalizedPathname(): string;
    protected _generatePayload(event: any): any;
    protected _log(message: any): void;
    protected _sendBeacon(payload: any): Promise<void>;
    private _isIllegalInvocationTypeError;
    protected _sendXhr(payload: any, url?: string): Promise<void>;
    protected _setAnalyticsId(value: any): void;
    protected _validateAnalyticsId(value: any): any;
    protected _validateEvent(payload: any): Promise<any>;
    protected _warn(message: any): void;
}
//# sourceMappingURL=base.d.ts.map