import { createSlice } from '@reduxjs/toolkit';
import { actions as bootstrapActions } from './bootstrap';
import { actions as projectActions } from './project';
export var initialState = null;
var slice = createSlice({
  name: 'hamburger',
  initialState: initialState,
  reducers: {},
  extraReducers: builder => {
    builder.addCase(bootstrapActions.hardBootstrap, (_, action) => action.payload.hamburger);
    builder.addCase(bootstrapActions.softBootstrap, (state, action) => {
      return state || action.payload.hamburger;
    });
    builder.addCase(projectActions.updateProjectTitle, (state, action) => {
      if (!state) {
        throw new Error("Received an action of type \"".concat(action.type, "\", but project state hasn't been bootstrapped. ") + 'You probably need to dispatch the "bootstrap/softBootstrap" action first.' + 'See \'Bootstrapping initial state\' in API.md.');
      }
      state.text.label = action.payload;
    });
  }
});
export var reducer = slice.reducer;
export var selectors = {
  selectHamburgerLabel: _ref => {
    var _hamburger$text$label;
    var hamburger = _ref.hamburger;
    return (_hamburger$text$label = hamburger === null || hamburger === void 0 ? void 0 : hamburger.text.label) !== null && _hamburger$text$label !== void 0 ? _hamburger$text$label : null;
  },
  selectAriaLabel: _ref2 => {
    var _hamburger$text$ariaL;
    var hamburger = _ref2.hamburger;
    return (_hamburger$text$ariaL = hamburger === null || hamburger === void 0 ? void 0 : hamburger.text.ariaLabel) !== null && _hamburger$text$ariaL !== void 0 ? _hamburger$text$ariaL : null;
  }
};