import { createSlice } from '@reduxjs/toolkit';
export var initialState = {
  isOpen: false,
  focusedProduct: null,
  isTemplatePickerOpen: false
};
var slice = createSlice({
  name: 'flyout',
  initialState,
  reducers: {
    open(state) {
      state.isOpen = true;
      state.focusedProduct = null;
    },
    close(state) {
      state.isOpen = false;
      state.focusedProduct = null;
    },
    openSubpanel(state, action) {
      state.isOpen = true;
      state.focusedProduct = action.payload;
    },
    closeSubpanel(state) {
      // Don't mutate state.isOpen.
      // This guards against race conditions where closeSubpanel() is called after close().
      state.focusedProduct = null;
    },
    openTemplatePicker(state) {
      state.isTemplatePickerOpen = true;
    },
    closeTemplatePicker(state) {
      state.isTemplatePickerOpen = false;
    }
  }
});
export var reducer = slice.reducer;
export var actions = {
  openFlyout: slice.actions.open,
  closeFlyout: slice.actions.close,
  openFlyoutSubpanel: slice.actions.openSubpanel,
  closeFlyoutSubpanel: slice.actions.closeSubpanel,
  openTemplatePicker: slice.actions.openTemplatePicker,
  closeTemplatePicker: slice.actions.closeTemplatePicker
};
export var selectors = {
  selectIsOpen: _ref => {
    var flyout = _ref.flyout;
    return flyout.isOpen;
  },
  selectFocusedProduct: _ref2 => {
    var flyout = _ref2.flyout;
    return flyout.focusedProduct;
  },
  selectIsTemplatePickerOpen: _ref3 => {
    var flyout = _ref3.flyout;
    return flyout.isTemplatePickerOpen;
  }
};