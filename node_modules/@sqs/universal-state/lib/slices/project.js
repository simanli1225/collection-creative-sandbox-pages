import { createSlice } from '@reduxjs/toolkit';
import { actions as bootstrapActions } from './bootstrap';
export var initialState = null;
var slice = createSlice({
  name: 'project',
  initialState: initialState,
  reducers: {
    updateProjectTitle(state, action) {
      if (!state) {
        throw new Error("Received an action of type \"".concat(action.type, "\", but project state hasn't been bootstrapped. ") + 'You probably need to dispatch the "bootstrap/bootstrap" action first.');
      }
      state.projectTitle = action.payload;
    }
  },
  extraReducers: builder => {
    builder.addCase(bootstrapActions.hardBootstrap, (_, action) => action.payload.project);
    builder.addCase(bootstrapActions.softBootstrap, (state, action) => {
      return state || action.payload.project;
    });
  }
});
export var reducer = slice.reducer;
export var actions = {
  updateProjectTitle: slice.actions.updateProjectTitle
};
export var selectors = {
  selectProjectTitle: _ref => {
    var _project$projectTitle;
    var project = _ref.project;
    return (_project$projectTitle = project === null || project === void 0 ? void 0 : project.projectTitle) !== null && _project$projectTitle !== void 0 ? _project$projectTitle : null;
  }
};