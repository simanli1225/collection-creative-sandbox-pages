export declare enum UniversalStateEventType {
    REGISTER = "register",
    DISPATCH = "dispatch",
    STATE_UPDATE = "state-update"
}
export type RegisterEvent = {
    type: UniversalStateEventType.REGISTER;
};
export type DispatchEvent<A> = {
    type: UniversalStateEventType.DISPATCH;
    payload: {
        action: A;
    };
};
export type StateUpdateEvent<S> = {
    type: UniversalStateEventType.STATE_UPDATE;
    payload: {
        state: S;
    };
};
export type UniversalStateEvent<S, A> = RegisterEvent | DispatchEvent<A> | StateUpdateEvent<S>;
export declare const sendEvent: <S, A>(otherWindow: Window, event: UniversalStateEvent<S, A>) => void;
export declare const listenForEvents: <S, A>(otherWindow: Window, callback: (event: UniversalStateEvent<S, A>) => void) => (() => void);
//# sourceMappingURL=protocol.d.ts.map