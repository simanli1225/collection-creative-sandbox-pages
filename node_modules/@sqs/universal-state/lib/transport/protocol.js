import "core-js/modules/es.array.concat.js";
import log from '../utils/log';

/**
 * Universal State `postMessage` protocol
 *
 * Each message represents an 'event', of which there are 3 types:
 *
 * - Register
 * - Dispatch
 * - State update
 *
 * These are defined below.
 */

export var UniversalStateEventType = /*#__PURE__*/function (UniversalStateEventType) {
  UniversalStateEventType["REGISTER"] = "register";
  UniversalStateEventType["DISPATCH"] = "dispatch";
  UniversalStateEventType["STATE_UPDATE"] = "state-update";
  return UniversalStateEventType;
}({});

/**
 * Sent by the 'consumer window' (e.g. an iframe) to the root window on startup.
 * This is answered with a `state-update` event, which populates state in the
 * consumer window.
 */

/**
 * Sent by the consumer window to the root window whenever an action is dispatched
 * to the FakeStore in the consumer window.
 */

/**
 * Sent by the root window to the iframe upon receipt of a `register` event,
 * and subsequently whenever state changes.
 */

/**
 * Universal State messages are distinguished from messages sent from any other app/library
 * by the 'type' field, which should always be '@sqs/universal-state'.
 */
var MESSAGE_TYPE_IDENTIFIER = '@sqs/universal-state';

/**
 * The Message type wraps the UniversalStateEvent type for transport over `postMessage`.
 */

// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
var isUniversalStateMessage = data => (data === null || data === void 0 ? void 0 : data.type) === MESSAGE_TYPE_IDENTIFIER;

/**
 * Validates that a MessageEvent is a Universal State message from the expected
 * window and returns the payload.
 */
var extractConsumableMessage = (messageEvent, expectedWindow) => {
  // The message must come from the window from which we expect it to come.
  if (messageEvent.source !== expectedWindow) {
    return null;
  }

  // The source window's origin must be the same as the current window's origin.
  if (messageEvent.origin !== window.location.origin) {
    log.warn('Received event from different origin ' + "(".concat(messageEvent.origin, " !== ").concat(window.location.origin, "). ") + 'Discarding.');
    return null;
  }
  var message = messageEvent.data;

  // Filter out any messages that weren't sent by Universal State
  if (!isUniversalStateMessage(message)) {
    return null;
  }
  return message;
};

/**
 * Sends a Universal State event to another window.
 */
export var sendEvent = (otherWindow, event) => {
  var message = {
    type: MESSAGE_TYPE_IDENTIFIER,
    event
  };
  otherWindow.postMessage(message, window.location.origin);
};

/**
 * Listens for Universal State events from another window.
 */
export var listenForEvents = (otherWindow, callback) => {
  var handler = messageEvent => {
    var message = extractConsumableMessage(messageEvent, otherWindow);
    if (!message) {
      return;
    }
    callback(message.event);
  };
  window.addEventListener('message', handler);
  return () => window.removeEventListener('message', handler);
};