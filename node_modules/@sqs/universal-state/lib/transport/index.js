import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useContext, useEffect, useRef, useState } from 'react';
import { createStore as createReduxStore } from 'redux';
import Bridge from './Bridge';
import FakeStore from './FakeStore';
import log from '../utils/log';
/**
 * Create the store, or connect to it if it resides in a different window.
 *
 * @param reducer Redux-style reducer function.
 * @param preloadedState Initial state for the reducer.
 * @param rootWindow Window in which the real store should reside.
 */
export function createStore(reducer, preloadedState, rootWindow) {
  if (rootWindow === window) {
    return createReduxStore(reducer,
    // @ts-expect-error
    preloadedState,
    // @ts-expect-error
    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({
      name: '@sqs/universal-state'
    }));
  }
  return new FakeStore(rootWindow, preloadedState);
}

/**
 * Create a context for a Store, with utility methods and components for connecting React apps to it.
 *
 * @param store Store object created by `createStore`.
 */
export function createContext(store) {
  var getContextValue = () => ({
    state: store.getState(),
    dispatch: store.dispatch.bind(store)
  });
  var AppData = /*#__PURE__*/React.createContext(getContextValue());
  function useStoreContext() {
    var _useState = useState(getContextValue()),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];
    useEffect(() => store.subscribe(() => {
      setValue(getContextValue());
    }), []);
    return value;
  }
  function useSelector(selector) {
    var _useState3 = useState(() => selector(store.getState())),
      _useState4 = _slicedToArray(_useState3, 2),
      value = _useState4[0],
      setValue = _useState4[1];
    var ref = useRef(value);
    useEffect(() => store.subscribe(() => {
      var newValue = selector(store.getState());
      if (newValue !== ref.current) {
        ref.current = newValue;
        setValue(newValue);
      }
    }), [selector]);
    return value;
  }
  function useDispatch() {
    return store.dispatch.bind(store);
  }

  /**
  * FrameBridge sets up a Bridge to the supplied iframe.
  */
  var FrameBridge = _ref => {
    var iframe = _ref.iframe,
      children = _ref.children;
    useEffect(() => {
      if (!iframe) {
        return;
      }
      if (!iframe.contentWindow) {
        // It's not clear when this can ever happen, but we guard against it so components don't error out
        log.error("iframe has no contentWindow - can't set up postMessage bridge");
        return;
      }
      var bridge = new Bridge(store, iframe.contentWindow);
      return () => bridge.teardown();
    }, [iframe]);
    return children;
  };
  var Provider = _ref2 => {
    var children = _ref2.children;
    var value = useStoreContext();
    return /*#__PURE__*/React.createElement(AppData.Provider, {
      value: value
    }, children);
  };
  var Consumer = AppData.Consumer;
  var connect = (mapStateToProps, mapDispatchToProps) => Component => {
    var WrappedComponent = ownProps => {
      var _useContext = useContext(AppData),
        state = _useContext.state,
        dispatch = _useContext.dispatch;
      var allProps = _objectSpread(_objectSpread(_objectSpread({}, mapStateToProps === null || mapStateToProps === void 0 ? void 0 : mapStateToProps(state)), mapDispatchToProps === null || mapDispatchToProps === void 0 ? void 0 : mapDispatchToProps(dispatch)), ownProps);
      return /*#__PURE__*/React.createElement(Component, allProps);
    };
    var displayName = Component.displayName || Component.name || 'Component';
    WrappedComponent.displayName = "connect(".concat(displayName, ")");
    return WrappedComponent;
  };
  return {
    Provider,
    Consumer,
    FrameBridge,
    useSelector,
    useDispatch,
    connect
  };
}