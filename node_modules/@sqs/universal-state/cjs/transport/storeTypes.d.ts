import type { ComponentType, ConsumerProps } from 'react';
import React from 'react';
export interface Store<S, A> {
    getState(): S;
    dispatch: Dispatch<A>;
    subscribe(listener: () => void): () => void;
}
export type Dispatch<A> = (a: A) => any;
export type ContextValue<S, A> = {
    state: S;
    dispatch: Dispatch<A>;
};
export type ProviderProps = {
    children: any;
};
export type FrameBridgeProps = {
    iframe: HTMLIFrameElement | null;
    children: any;
};
export interface ConnectFunction<S, A> {
    <PropsFromState extends Record<string, unknown>>(mapStateToProps: (state: S) => PropsFromState, mapDispatchToProps?: null | undefined): <AllProps extends PropsFromState>(Component: React.ComponentType<AllProps>) => React.ComponentType<Omit<AllProps, keyof PropsFromState>>;
    <PropsFromDispatch extends Record<string, unknown>>(mapStateToProps: null | undefined, mapDispatchToProps: (dispatch: Dispatch<A>) => PropsFromDispatch): <AllProps extends PropsFromDispatch>(Component: React.ComponentType<AllProps>) => React.ComponentType<Omit<AllProps, keyof PropsFromDispatch>>;
    <PropsFromState extends Record<string, unknown>, PropsFromDispatch extends Record<string, unknown>>(mapStateToProps: (state: S) => PropsFromState, mapDispatchToProps: (dispatch: Dispatch<A>) => PropsFromDispatch): <AllProps extends PropsFromState & PropsFromDispatch>(Component: React.ComponentType<AllProps>) => React.ComponentType<Omit<AllProps, keyof (PropsFromState & PropsFromDispatch)>>;
}
export type StoreContext<S, A> = {
    Provider: ComponentType<ProviderProps>;
    Consumer: ComponentType<ConsumerProps<ContextValue<S, A>>>;
    FrameBridge: ComponentType<FrameBridgeProps>;
    useSelector<T>(selector: (state: S) => T): T;
    useDispatch: () => Dispatch<A>;
    connect: ConnectFunction<S, A>;
};
//# sourceMappingURL=storeTypes.d.ts.map