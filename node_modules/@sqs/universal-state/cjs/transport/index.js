"use strict";

require("core-js/modules/es.symbol.js");
require("core-js/modules/es.array.filter.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/web.dom-collections.for-each.js");
require("core-js/modules/es.object.get-own-property-descriptors.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.weak-map.js");
require("core-js/modules/web.dom-collections.iterator.js");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createContext = createContext;
exports.createStore = createStore;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _redux = require("redux");
var _Bridge = _interopRequireDefault(require("./Bridge"));
var _FakeStore = _interopRequireDefault(require("./FakeStore"));
var _log = _interopRequireDefault(require("../utils/log"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * Create the store, or connect to it if it resides in a different window.
 *
 * @param reducer Redux-style reducer function.
 * @param preloadedState Initial state for the reducer.
 * @param rootWindow Window in which the real store should reside.
 */
function createStore(reducer, preloadedState, rootWindow) {
  if (rootWindow === window) {
    return (0, _redux.createStore)(reducer,
    // @ts-expect-error
    preloadedState,
    // @ts-expect-error
    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({
      name: '@sqs/universal-state'
    }));
  }
  return new _FakeStore.default(rootWindow, preloadedState);
}

/**
 * Create a context for a Store, with utility methods and components for connecting React apps to it.
 *
 * @param store Store object created by `createStore`.
 */
function createContext(store) {
  var getContextValue = () => ({
    state: store.getState(),
    dispatch: store.dispatch.bind(store)
  });
  var AppData = /*#__PURE__*/_react.default.createContext(getContextValue());
  function useStoreContext() {
    var _useState = (0, _react.useState)(getContextValue()),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];
    (0, _react.useEffect)(() => store.subscribe(() => {
      setValue(getContextValue());
    }), []);
    return value;
  }
  function useSelector(selector) {
    var _useState3 = (0, _react.useState)(() => selector(store.getState())),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      value = _useState4[0],
      setValue = _useState4[1];
    var ref = (0, _react.useRef)(value);
    (0, _react.useEffect)(() => store.subscribe(() => {
      var newValue = selector(store.getState());
      if (newValue !== ref.current) {
        ref.current = newValue;
        setValue(newValue);
      }
    }), [selector]);
    return value;
  }
  function useDispatch() {
    return store.dispatch.bind(store);
  }

  /**
  * FrameBridge sets up a Bridge to the supplied iframe.
  */
  var FrameBridge = _ref => {
    var iframe = _ref.iframe,
      children = _ref.children;
    (0, _react.useEffect)(() => {
      if (!iframe) {
        return;
      }
      if (!iframe.contentWindow) {
        // It's not clear when this can ever happen, but we guard against it so components don't error out
        _log.default.error("iframe has no contentWindow - can't set up postMessage bridge");
        return;
      }
      var bridge = new _Bridge.default(store, iframe.contentWindow);
      return () => bridge.teardown();
    }, [iframe]);
    return children;
  };
  var Provider = _ref2 => {
    var children = _ref2.children;
    var value = useStoreContext();
    return /*#__PURE__*/_react.default.createElement(AppData.Provider, {
      value: value
    }, children);
  };
  var Consumer = AppData.Consumer;
  var connect = (mapStateToProps, mapDispatchToProps) => Component => {
    var WrappedComponent = ownProps => {
      var _useContext = (0, _react.useContext)(AppData),
        state = _useContext.state,
        dispatch = _useContext.dispatch;
      var allProps = _objectSpread(_objectSpread(_objectSpread({}, mapStateToProps === null || mapStateToProps === void 0 ? void 0 : mapStateToProps(state)), mapDispatchToProps === null || mapDispatchToProps === void 0 ? void 0 : mapDispatchToProps(dispatch)), ownProps);
      return /*#__PURE__*/_react.default.createElement(Component, allProps);
    };
    var displayName = Component.displayName || Component.name || 'Component';
    WrappedComponent.displayName = "connect(".concat(displayName, ")");
    return WrappedComponent;
  };
  return {
    Provider,
    Consumer,
    FrameBridge,
    useSelector,
    useDispatch,
    connect
  };
}