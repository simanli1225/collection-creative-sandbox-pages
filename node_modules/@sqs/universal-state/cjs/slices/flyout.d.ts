import type { FlyoutProduct } from '../types/FlyoutProduct';
import type { State as RootState } from '../state';
export type State = {
    isOpen: boolean;
    focusedProduct: FlyoutProduct | null;
    isTemplatePickerOpen: boolean;
};
export declare const initialState: State;
export declare const reducer: import("redux").Reducer<State>;
export declare const actions: {
    openFlyout: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<"flyout/open">;
    closeFlyout: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<"flyout/close">;
    openFlyoutSubpanel: import("@reduxjs/toolkit").ActionCreatorWithPayload<FlyoutProduct, "flyout/openSubpanel">;
    closeFlyoutSubpanel: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<"flyout/closeSubpanel">;
    openTemplatePicker: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<"flyout/openTemplatePicker">;
    closeTemplatePicker: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<"flyout/closeTemplatePicker">;
};
export type Action = ReturnType<typeof actions.openFlyout> | ReturnType<typeof actions.closeFlyout> | ReturnType<typeof actions.openFlyoutSubpanel> | ReturnType<typeof actions.closeFlyoutSubpanel> | ReturnType<typeof actions.openTemplatePicker> | ReturnType<typeof actions.closeTemplatePicker>;
export declare const selectors: {
    selectIsOpen: ({ flyout }: RootState) => boolean;
    selectFocusedProduct: ({ flyout }: RootState) => FlyoutProduct | null;
    selectIsTemplatePickerOpen: ({ flyout }: RootState) => boolean;
};
//# sourceMappingURL=flyout.d.ts.map