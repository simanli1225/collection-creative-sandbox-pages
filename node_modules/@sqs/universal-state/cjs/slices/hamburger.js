"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectors = exports.reducer = exports.initialState = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _bootstrap = require("./bootstrap");
var _project = require("./project");
var initialState = exports.initialState = null;
var slice = (0, _toolkit.createSlice)({
  name: 'hamburger',
  initialState: initialState,
  reducers: {},
  extraReducers: builder => {
    builder.addCase(_bootstrap.actions.hardBootstrap, (_, action) => action.payload.hamburger);
    builder.addCase(_bootstrap.actions.softBootstrap, (state, action) => {
      return state || action.payload.hamburger;
    });
    builder.addCase(_project.actions.updateProjectTitle, (state, action) => {
      if (!state) {
        throw new Error("Received an action of type \"".concat(action.type, "\", but project state hasn't been bootstrapped. ") + 'You probably need to dispatch the "bootstrap/softBootstrap" action first.' + 'See \'Bootstrapping initial state\' in API.md.');
      }
      state.text.label = action.payload;
    });
  }
});
var reducer = exports.reducer = slice.reducer;
var selectors = exports.selectors = {
  selectHamburgerLabel: _ref => {
    var _hamburger$text$label;
    var hamburger = _ref.hamburger;
    return (_hamburger$text$label = hamburger === null || hamburger === void 0 ? void 0 : hamburger.text.label) !== null && _hamburger$text$label !== void 0 ? _hamburger$text$label : null;
  },
  selectAriaLabel: _ref2 => {
    var _hamburger$text$ariaL;
    var hamburger = _ref2.hamburger;
    return (_hamburger$text$ariaL = hamburger === null || hamburger === void 0 ? void 0 : hamburger.text.ariaLabel) !== null && _hamburger$text$ariaL !== void 0 ? _hamburger$text$ariaL : null;
  }
};