"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectors = exports.reducer = exports.initialState = exports.actions = void 0;
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.set.js");
require("core-js/modules/web.dom-collections.iterator.js");
var _toolkit = require("@reduxjs/toolkit");
var _AccessPermissions = _interopRequireDefault(require("@sqs/enums/AccessPermissions"));
var _actions = require("../actions");
var initialState = exports.initialState = null;
var slice = (0, _toolkit.createSlice)({
  name: 'accessPermissions',
  initialState: initialState,
  reducers: {
    update(_, action) {
      return action.payload;
    }
  },
  extraReducers: builder => {
    builder.addCase(_actions.bootstrap.hardBootstrap, (_, action) => action.payload.accessPermissions);
    builder.addCase(_actions.bootstrap.softBootstrap, (state, action) => {
      return state || action.payload.accessPermissions;
    });
  }
});
var reducer = exports.reducer = slice.reducer;
var actions = exports.actions = {
  updateAccessPermissions: slice.actions.update
};

/**
 * Selectors accept a permission as either an enum key or value.
 * The following are equivalent:
 *
 * selectHasPermission(AccessPermission.CONFIG_SETTINGS)
 * selectHasPermission('CONFIG_SETTINGS')
 */

function hasPermission(permission, permissionSet) {
  var key = typeof permission === 'string' ? _AccessPermissions.default[permission] : permission;
  if (key === undefined) {
    throw new Error(permission ? "Permission '".concat(permission, "' not found.") : 'Permission is undefined.');
  }
  return permissionSet.has(key);
}
var selectPermissions = rootState => rootState.accessPermissions;
var selectPermissionSet = (0, _toolkit.createSelector)(selectPermissions, accessPermissions => new Set(accessPermissions));
function selectHasPermission(permission) {
  return (0, _toolkit.createSelector)(selectPermissionSet, permissionSet => hasPermission(permission, permissionSet));
}
function selectHasAllPermissions(permissions) {
  return (0, _toolkit.createSelector)(selectPermissionSet, permissionSet => permissions.every(permission => hasPermission(permission, permissionSet)));
}
function selectHasAnyPermission(permissions) {
  return (0, _toolkit.createSelector)(selectPermissionSet, permissionSet => permissions.some(permission => hasPermission(permission, permissionSet)));
}
var selectIsAdmin = selectHasPermission(_AccessPermissions.default.ADMIN);
var selectors = exports.selectors = {
  selectHasPermission,
  selectHasAllPermissions,
  selectHasAnyPermission,
  selectIsAdmin
};