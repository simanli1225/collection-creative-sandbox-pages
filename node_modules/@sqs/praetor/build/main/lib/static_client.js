"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var VARIANT_TRUE = 'true';
var DEFAULT_SEGMENT = 'default';
var ExperimentType;
(function (ExperimentType) {
    ExperimentType["FEATURE_TOGGLE"] = "FEATURE_TOGGLE";
    ExperimentType["AB_TEST"] = "AB_TEST";
})(ExperimentType = exports.ExperimentType || (exports.ExperimentType = {}));
var Configuration = /** @class */ (function () {
    function Configuration(variant) {
        var _this = this;
        this.experiments = {};
        this.isConfigurationLoaded = Boolean(variant.isConfigurationLoaded);
        if (Array.isArray(variant.experimentContextList)) {
            variant.experimentContextList.forEach(function (context) {
                if (context !== null &&
                    typeof context === 'object' &&
                    context.hasOwnProperty('name')) {
                    _this.experiments[context.name] = context;
                }
            });
        }
    }
    Configuration.prototype.isValid = function () {
        return this.isConfigurationLoaded;
    };
    Configuration.prototype.getContext = function (experimentName) {
        return this.experiments[experimentName];
    };
    return Configuration;
}());
exports.Configuration = Configuration;
var StaticPraetorClient = /** @class */ (function () {
    function StaticPraetorClient(variant) {
        this.configuration = new Configuration(variant);
    }
    StaticPraetorClient.prototype.getFeatureToggle = function (feature, defaultIfError) {
        var _a = this.getContextValidity(feature, ExperimentType.FEATURE_TOGGLE), context = _a.context, error = _a.error;
        if (error || context === null) {
            return {
                enabled: defaultIfError,
                error: error
            };
        }
        if (context.containsError) {
            return {
                enabled: this.isFeatureToggleEnabled(context),
                error: 'The specified feature has an invalid server-side definition'
            };
        }
        return {
            enabled: this.isFeatureToggleEnabled(context)
        };
    };
    StaticPraetorClient.prototype.getABTestVariant = function (feature, defaultVariantIfError) {
        var _a = this.getContextValidity(feature, ExperimentType.AB_TEST), context = _a.context, error = _a.error;
        if (error || context === null) {
            return {
                error: error,
                segment: DEFAULT_SEGMENT,
                variant: defaultVariantIfError
            };
        }
        if (context.containsError) {
            return {
                error: 'The specified feature has an invalid server-side definition',
                segment: context.segmentName,
                variant: context.variant
            };
        }
        return {
            segment: context.segmentName,
            variant: context.variant
        };
    };
    StaticPraetorClient.prototype.getAllExperiments = function () {
        return this.configuration;
    };
    StaticPraetorClient.prototype.getContextValidity = function (feature, expectedType) {
        if (!this.configuration.isValid()) {
            return {
                context: null,
                error: 'The underlying Praetor configuration is not loaded'
            };
        }
        var context = this.configuration.getContext(feature);
        if (context === undefined) {
            return {
                context: null,
                error: 'The specified feature does not exist'
            };
        }
        else if (context.experimentType !== expectedType) {
            return {
                context: null,
                error: "The specified feature is not a " + expectedType
            };
        }
        return {
            context: context
        };
    };
    StaticPraetorClient.prototype.isFeatureToggleEnabled = function (context) {
        return context.variant === VARIANT_TRUE;
    };
    return StaticPraetorClient;
}());
exports.default = StaticPraetorClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGljX2NsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvc3RhdGljX2NsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQztBQUM1QixJQUFNLGVBQWUsR0FBRyxTQUFTLENBQUM7QUFFbEMsSUFBWSxjQUdYO0FBSEQsV0FBWSxjQUFjO0lBQ3hCLG1EQUFpQyxDQUFBO0lBQ2pDLHFDQUFtQixDQUFBO0FBQ3JCLENBQUMsRUFIVyxjQUFjLEdBQWQsc0JBQWMsS0FBZCxzQkFBYyxRQUd6QjtBQW9DRDtJQUlFLHVCQUFZLE9BQXVCO1FBQW5DLGlCQWFDO1FBZk8sZ0JBQVcsR0FBdUMsRUFBRSxDQUFDO1FBRzNELElBQUksQ0FBQyxxQkFBcUIsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDcEUsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO1lBQ2hELE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsVUFBQSxPQUFPO2dCQUMzQyxJQUNFLE9BQU8sS0FBSyxJQUFJO29CQUNoQixPQUFPLE9BQU8sS0FBSyxRQUFRO29CQUMzQixPQUFPLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxFQUM5QjtvQkFDQSxLQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUM7aUJBQzFDO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFTSwrQkFBTyxHQUFkO1FBQ0UsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUM7SUFDcEMsQ0FBQztJQUVNLGtDQUFVLEdBQWpCLFVBQWtCLGNBQXNCO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBQ0gsb0JBQUM7QUFBRCxD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