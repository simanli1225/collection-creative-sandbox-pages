"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ava_1 = __importDefault(require("ava"));
var static_client_1 = __importStar(require("./static_client"));
var goodConfig = {
    isConfigurationLoaded: true,
    experimentContextList: [
        {
            name: 'toggle-1',
            description: '',
            experimentType: static_client_1.ExperimentType.FEATURE_TOGGLE,
            segmentName: 'default',
            variant: 'true',
            containsError: false,
            status: 'ACTIVE'
        },
        {
            name: 'abtest-1',
            description: '',
            experimentType: static_client_1.ExperimentType.AB_TEST,
            segmentName: 'special',
            variant: 'blue',
            containsError: false,
            status: 'ACTIVE'
        }
    ]
};
var badConfig = {
    isConfigurationLoaded: false,
    experimentContextList: []
};
var emptyConfig = {};
ava_1.default('can retrieve feature toggle details', function (t) {
    var client = new static_client_1.default(goodConfig);
    t.is(client.getFeatureToggle('toggle-1', false).enabled, true);
});
ava_1.default("returns default if feature doesn't exist", function (t) {
    var client = new static_client_1.default(goodConfig);
    t.is(client.getFeatureToggle('toggle-nope', false).enabled, false);
});
ava_1.default('can retrieve AB test variants', function (t) {
    var client = new static_client_1.default(goodConfig);
    var _a = client.getABTestVariant('abtest-1', 'red'), error = _a.error, variant = _a.variant, segment = _a.segment;
    t.is(error, undefined);
    t.is(variant, 'blue');
    t.is(segment, 'special');
});
ava_1.default('returns default if AB test does not exist', function (t) {
    var client = new static_client_1.default(goodConfig);
    var _a = client.getABTestVariant('abtest-nope', 'red'), error = _a.error, variant = _a.variant, segment = _a.segment;
    t.not(error, undefined);
    t.is(variant, 'red');
    t.is(segment, 'default');
});
ava_1.default('returns default for an AB test if the configuration is bad', function (t) {
    var client = new static_client_1.default(badConfig);
    var _a = client.getABTestVariant('abtest-nope', 'red'), error = _a.error, variant = _a.variant, segment = _a.segment;
    t.not(error, undefined);
    t.is(variant, 'red');
    t.is(segment, 'default');
});
ava_1.default('returns default for a feature toggle if the configuration is bad', function (t) {
    var client = new static_client_1.default(badConfig);
    t.is(client.getFeatureToggle('toggle-nope', false).enabled, false);
});
ava_1.default('constructs an praetor client with invalid config if the configuration is empty', function (t) {
    t.notThrows(function () { return new static_client_1.default(emptyConfig); });
    var client = new static_client_1.default(emptyConfig);
    var config = client.getAllExperiments();
    t.is(config.isValid(), false);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGljX2NsaWVudC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9zdGF0aWNfY2xpZW50LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsNENBQXVCO0FBQ3ZCLCtEQUd5QjtBQUV6QixJQUFNLFVBQVUsR0FBRztJQUNqQixxQkFBcUIsRUFBRSxJQUFJO0lBQzNCLHFCQUFxQixFQUFFO1FBQ3JCO1lBQ0UsSUFBSSxFQUFFLFVBQVU7WUFDaEIsV0FBVyxFQUFFLEVBQUU7WUFDZixjQUFjLEVBQUUsOEJBQWMsQ0FBQyxjQUFjO1lBQzdDLFdBQVcsRUFBRSxTQUFTO1lBQ3RCLE9BQU8sRUFBRSxNQUFNO1lBQ2YsYUFBYSxFQUFFLEtBQUs7WUFDcEIsTUFBTSxFQUFFLFFBQVE7U0FDakI7UUFDRDtZQUNFLElBQUksRUFBRSxVQUFVO1lBQ2hCLFdBQVcsRUFBRSxFQUFFO1lBQ2YsY0FBYyxFQUFFLDhCQUFjLENBQUMsT0FBTztZQUN0QyxXQUFXLEVBQUUsU0FBUztZQUN0QixPQUFPLEVBQUUsTUFBTTtZQUNmLGFBQWEsRUFBRSxLQUFLO1lBQ3BCLE1BQU0sRUFBRSxRQUFRO1NBQ2pCO0tBQ0Y7Q0FDRixDQUFDO0FBRUYsSUFBTSxTQUFTLEdBQUc7SUFDaEIscUJBQXFCLEVBQUUsS0FBSztJQUM1QixxQkFBcUIsRUFBRSxFQUFFO0NBQzFCLENBQUM7QUFFRixJQUFNLFdBQVcsR0FBbUIsRUFBRSxDQUFDO0FBRXZDLGFBQUksQ0FBQyxxQ0FBcUMsRUFBRSxVQUFBLENBQUM7SUFDM0MsSUFBTSxNQUFNLEdBQUcsSUFBSSx1QkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNuRCxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2pFLENBQUMsQ0FBQyxDQUFD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