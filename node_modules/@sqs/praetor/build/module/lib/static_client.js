var VARIANT_TRUE = 'true';
var DEFAULT_SEGMENT = 'default';
export var ExperimentType;
(function (ExperimentType) {
    ExperimentType["FEATURE_TOGGLE"] = "FEATURE_TOGGLE";
    ExperimentType["AB_TEST"] = "AB_TEST";
})(ExperimentType || (ExperimentType = {}));
var Configuration = /** @class */ (function () {
    function Configuration(variant) {
        var _this = this;
        this.experiments = {};
        this.isConfigurationLoaded = Boolean(variant.isConfigurationLoaded);
        if (Array.isArray(variant.experimentContextList)) {
            variant.experimentContextList.forEach(function (context) {
                if (context !== null &&
                    typeof context === 'object' &&
                    context.hasOwnProperty('name')) {
                    _this.experiments[context.name] = context;
                }
            });
        }
    }
    Configuration.prototype.isValid = function () {
        return this.isConfigurationLoaded;
    };
    Configuration.prototype.getContext = function (experimentName) {
        return this.experiments[experimentName];
    };
    return Configuration;
}());
export { Configuration };
var StaticPraetorClient = /** @class */ (function () {
    function StaticPraetorClient(variant) {
        this.configuration = new Configuration(variant);
    }
    StaticPraetorClient.prototype.getFeatureToggle = function (feature, defaultIfError) {
        var _a = this.getContextValidity(feature, ExperimentType.FEATURE_TOGGLE), context = _a.context, error = _a.error;
        if (error || context === null) {
            return {
                enabled: defaultIfError,
                error: error
            };
        }
        if (context.containsError) {
            return {
                enabled: this.isFeatureToggleEnabled(context),
                error: 'The specified feature has an invalid server-side definition'
            };
        }
        return {
            enabled: this.isFeatureToggleEnabled(context)
        };
    };
    StaticPraetorClient.prototype.getABTestVariant = function (feature, defaultVariantIfError) {
        var _a = this.getContextValidity(feature, ExperimentType.AB_TEST), context = _a.context, error = _a.error;
        if (error || context === null) {
            return {
                error: error,
                segment: DEFAULT_SEGMENT,
                variant: defaultVariantIfError
            };
        }
        if (context.containsError) {
            return {
                error: 'The specified feature has an invalid server-side definition',
                segment: context.segmentName,
                variant: context.variant
            };
        }
        return {
            segment: context.segmentName,
            variant: context.variant
        };
    };
    StaticPraetorClient.prototype.getAllExperiments = function () {
        return this.configuration;
    };
    StaticPraetorClient.prototype.getContextValidity = function (feature, expectedType) {
        if (!this.configuration.isValid()) {
            return {
                context: null,
                error: 'The underlying Praetor configuration is not loaded'
            };
        }
        var context = this.configuration.getContext(feature);
        if (context === undefined) {
            return {
                context: null,
                error: 'The specified feature does not exist'
            };
        }
        else if (context.experimentType !== expectedType) {
            return {
                context: null,
                error: "The specified feature is not a " + expectedType
            };
        }
        return {
            context: context
        };
    };
    StaticPraetorClient.prototype.isFeatureToggleEnabled = function (context) {
        return context.variant === VARIANT_TRUE;
    };
    return StaticPraetorClient;
}());
export default StaticPraetorClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGljX2NsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvc3RhdGljX2NsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFNLFlBQVksR0FBRyxNQUFNLENBQUM7QUFDNUIsSUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDO0FBRWxDLE1BQU0sQ0FBTixJQUFZLGNBR1g7QUFIRCxXQUFZLGNBQWM7SUFDeEIsbURBQWlDLENBQUE7SUFDakMscUNBQW1CLENBQUE7QUFDckIsQ0FBQyxFQUhXLGNBQWMsS0FBZCxjQUFjLFFBR3pCO0FBb0NEO0lBSUUsdUJBQVksT0FBdUI7UUFBbkMsaUJBYUM7UUFmTyxnQkFBVyxHQUF1QyxFQUFFLENBQUM7UUFHM0QsSUFBSSxDQUFDLHFCQUFxQixHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUNwRSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLEVBQUU7WUFDaEQsT0FBTyxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxVQUFBLE9BQU87Z0JBQzNDLElBQ0UsT0FBTyxLQUFLLElBQUk7b0JBQ2hCLE9BQU8sT0FBTyxLQUFLLFFBQVE7b0JBQzNCLE9BQU8sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQzlCO29CQUNBLEtBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQztpQkFDMUM7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVNLCtCQUFPLEdBQWQ7UUFDRSxPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztJQUNwQyxDQUFDO0lBRU0sa0NBQVUsR0FBakIsVUFBa0IsY0FBc0I7UUFDdEMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFDSCxvQkFBQztBQUFELENBQUMs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