export declare enum ExperimentType {
    FEATURE_TOGGLE = "FEATURE_TOGGLE",
    AB_TEST = "AB_TEST"
}
/**
 * ExperimentContext is an object generated by any backend praetor client
 * that represents the given status for an experiment for some subject.
 */
export interface ExperimentContext {
    name: string;
    description: string;
    experimentType: ExperimentType;
    segmentName: string;
    variant: string;
    containsError: boolean;
    status: string;
}
/**
 * SubjectVariant is the JSON-ified object returned by getAllFeatures from your
 * backend Praetor library of choice.
 */
export interface SubjectVariant {
    isConfigurationLoaded?: boolean;
    experimentContextList?: ExperimentContext[];
}
export interface FeatureToggleResponse {
    enabled: boolean;
    error?: string;
}
export interface ABTestResponse {
    variant: string;
    segment: string;
    error?: string;
}
export declare class Configuration {
    private isConfigurationLoaded;
    private experiments;
    constructor(variant: SubjectVariant);
    isValid(): boolean;
    getContext(experimentName: string): ExperimentContext | undefined;
}
export default class StaticPraetorClient {
    private configuration;
    constructor(variant: SubjectVariant);
    getFeatureToggle(feature: string, defaultIfError: boolean): FeatureToggleResponse;
    getABTestVariant(feature: string, defaultVariantIfError: string): ABTestResponse;
    getAllExperiments(): Configuration;
    private getContextValidity;
    private isFeatureToggleEnabled;
}
