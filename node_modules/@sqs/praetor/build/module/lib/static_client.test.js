import test from 'ava';
import StaticPraetorClient, { ExperimentType } from './static_client';
var goodConfig = {
    isConfigurationLoaded: true,
    experimentContextList: [
        {
            name: 'toggle-1',
            description: '',
            experimentType: ExperimentType.FEATURE_TOGGLE,
            segmentName: 'default',
            variant: 'true',
            containsError: false,
            status: 'ACTIVE'
        },
        {
            name: 'abtest-1',
            description: '',
            experimentType: ExperimentType.AB_TEST,
            segmentName: 'special',
            variant: 'blue',
            containsError: false,
            status: 'ACTIVE'
        }
    ]
};
var badConfig = {
    isConfigurationLoaded: false,
    experimentContextList: []
};
var emptyConfig = {};
test('can retrieve feature toggle details', function (t) {
    var client = new StaticPraetorClient(goodConfig);
    t.is(client.getFeatureToggle('toggle-1', false).enabled, true);
});
test("returns default if feature doesn't exist", function (t) {
    var client = new StaticPraetorClient(goodConfig);
    t.is(client.getFeatureToggle('toggle-nope', false).enabled, false);
});
test('can retrieve AB test variants', function (t) {
    var client = new StaticPraetorClient(goodConfig);
    var _a = client.getABTestVariant('abtest-1', 'red'), error = _a.error, variant = _a.variant, segment = _a.segment;
    t.is(error, undefined);
    t.is(variant, 'blue');
    t.is(segment, 'special');
});
test('returns default if AB test does not exist', function (t) {
    var client = new StaticPraetorClient(goodConfig);
    var _a = client.getABTestVariant('abtest-nope', 'red'), error = _a.error, variant = _a.variant, segment = _a.segment;
    t.not(error, undefined);
    t.is(variant, 'red');
    t.is(segment, 'default');
});
test('returns default for an AB test if the configuration is bad', function (t) {
    var client = new StaticPraetorClient(badConfig);
    var _a = client.getABTestVariant('abtest-nope', 'red'), error = _a.error, variant = _a.variant, segment = _a.segment;
    t.not(error, undefined);
    t.is(variant, 'red');
    t.is(segment, 'default');
});
test('returns default for a feature toggle if the configuration is bad', function (t) {
    var client = new StaticPraetorClient(badConfig);
    t.is(client.getFeatureToggle('toggle-nope', false).enabled, false);
});
test('constructs an praetor client with invalid config if the configuration is empty', function (t) {
    t.notThrows(function () { return new StaticPraetorClient(emptyConfig); });
    var client = new StaticPraetorClient(emptyConfig);
    var config = client.getAllExperiments();
    t.is(config.isValid(), false);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGljX2NsaWVudC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9zdGF0aWNfY2xpZW50LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sS0FBSyxDQUFDO0FBQ3ZCLE9BQU8sbUJBQW1CLEVBQUUsRUFDMUIsY0FBYyxFQUVmLE1BQU0saUJBQWlCLENBQUM7QUFFekIsSUFBTSxVQUFVLEdBQUc7SUFDakIscUJBQXFCLEVBQUUsSUFBSTtJQUMzQixxQkFBcUIsRUFBRTtRQUNyQjtZQUNFLElBQUksRUFBRSxVQUFVO1lBQ2hCLFdBQVcsRUFBRSxFQUFFO1lBQ2YsY0FBYyxFQUFFLGNBQWMsQ0FBQyxjQUFjO1lBQzdDLFdBQVcsRUFBRSxTQUFTO1lBQ3RCLE9BQU8sRUFBRSxNQUFNO1lBQ2YsYUFBYSxFQUFFLEtBQUs7WUFDcEIsTUFBTSxFQUFFLFFBQVE7U0FDakI7UUFDRDtZQUNFLElBQUksRUFBRSxVQUFVO1lBQ2hCLFdBQVcsRUFBRSxFQUFFO1lBQ2YsY0FBYyxFQUFFLGNBQWMsQ0FBQyxPQUFPO1lBQ3RDLFdBQVcsRUFBRSxTQUFTO1lBQ3RCLE9BQU8sRUFBRSxNQUFNO1lBQ2YsYUFBYSxFQUFFLEtBQUs7WUFDcEIsTUFBTSxFQUFFLFFBQVE7U0FDakI7S0FDRjtDQUNGLENBQUM7QUFFRixJQUFNLFNBQVMsR0FBRztJQUNoQixxQkFBcUIsRUFBRSxLQUFLO0lBQzVCLHFCQUFxQixFQUFFLEVBQUU7Q0FDMUIsQ0FBQztBQUVGLElBQU0sV0FBVyxHQUFtQixFQUFFLENBQUM7QUFFdkMsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLFVBQUEsQ0FBQztJQUMzQyxJQUFNLE1BQU0sR0FBRyxJQUFJLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ25ELENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FB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