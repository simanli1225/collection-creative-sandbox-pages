"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocaleResolver = void 0;
var cldr_core_1 = require("@phensley/cldr-core");
var i18n_locale_list_1 = require("@sqs/i18n-locale-list");
var SUBTAG_SEPARATOR = '-';
var DEFAULT_ENGLISH = {
    languageRegion: 'en-US',
    language: 'en',
};
var LocaleResolver = (function () {
    function LocaleResolver(localeList, defaultLocale) {
        if (localeList === void 0) { localeList = i18n_locale_list_1.locales.member.all; }
        if (defaultLocale === void 0) { defaultLocale = 'en-US'; }
        this.setLocaleList(localeList, defaultLocale);
    }
    LocaleResolver.prototype.setLocaleList = function (localeList, defaultLocale) {
        if (defaultLocale === void 0) { defaultLocale = 'en-US'; }
        this.localeMatcher = new cldr_core_1.LocaleMatcher([defaultLocale].concat(localeList));
    };
    LocaleResolver.prototype.resolveLocale = function (inputLocale) {
        if (!inputLocale) {
            return DEFAULT_ENGLISH;
        }
        if (!this.localeMatcher) {
            throw new Error('LocaleResolver requires a valid localeMatcher');
        }
        var matchedLocale = this.localeMatcher.match(inputLocale);
        var tag = matchedLocale.locale.tag;
        return {
            languageRegion: [tag.language(), tag.region()].join(SUBTAG_SEPARATOR),
            language: tag.language(),
            region: tag.region(),
        };
    };
    LocaleResolver.parseLocale = function (inputLocale) {
        if (typeof inputLocale !== 'string') {
            throw new Error('LocaleResolver.parseLocale requires a string argument');
        }
        var resolvedTag = cldr_core_1.CLDRFramework.resolveLocale(inputLocale).tag;
        return resolvedTag;
    };
    LocaleResolver.getLanguageId = function (locale) {
        return cldr_core_1.CLDRFramework.resolveLocale(locale).tag.language();
    };
    return LocaleResolver;
}());
exports.LocaleResolver = LocaleResolver;
