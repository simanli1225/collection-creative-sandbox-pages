"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runWatch = exports.run = void 0;
const febs_logger_1 = __importDefault(require("@sqs/febs-logger"));
const webpack_1 = __importDefault(require("webpack"));
const utils_1 = require("./utils");
const run = (compiler, webpackConfig) => {
    return new Promise((resolve, reject) => {
        const compilerCB = (err, stats) => {
            if (err) {
                febs_logger_1.default.error('Webpack compile error:');
                febs_logger_1.default.error(err);
                return reject(err);
            }
            if (!stats) {
                throw new Error('we demand stats');
            }
            const info = stats.toJson();
            const formattedStats = utils_1.formatStats(stats, webpackConfig);
            if (stats.hasWarnings()) {
                febs_logger_1.default.warn('' + info.warnings);
            }
            if (stats.hasErrors()) {
                return reject(formattedStats);
            }
            febs_logger_1.default.debug('Webpack compile complete');
            compiler.close((closeError) => {
                if (closeError) {
                    febs_logger_1.default.error('Webpack post-compile closing error:');
                    febs_logger_1.default.error(closeError);
                }
                resolve(formattedStats);
            });
        };
        febs_logger_1.default.debug('Webpack compiling...');
        compiler.run(compilerCB);
    });
};
exports.run = run;
const runWatch = (compiler, webpackConfig) => {
    return new Promise((resolve, reject) => {
        febs_logger_1.default.info('Webpack watching the files...');
        compiler.watch(Object.assign({ aggregateTimeout: 300, poll: undefined }, webpackConfig.watchOptions), (err, stats) => {
            if (err) {
                febs_logger_1.default.error('Webpack compile error:');
                febs_logger_1.default.error(err);
                return reject(err);
            }
            const formattedStats = utils_1.formatStats(stats, webpackConfig);
            febs_logger_1.default.info(formattedStats);
            resolve();
        });
    });
};
exports.runWatch = runWatch;
exports.default = async (webpackConfig, options) => {
    try {
        const compiler = webpack_1.default(webpackConfig);
        if (options.watch) {
            return await exports.runWatch(compiler, webpackConfig);
        }
        return await exports.run(compiler, webpackConfig).then(stats => {
            febs_logger_1.default.info(stats);
        });
    }
    catch (err) {
        throw new Error(err);
    }
};
//# sourceMappingURL=runWebpack.js.map