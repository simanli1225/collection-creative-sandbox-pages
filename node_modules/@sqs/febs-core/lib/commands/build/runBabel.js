"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBabelCliCommand = exports.getTestFilePaths = exports.formatIgnorePatterns = void 0;
const febs_logger_1 = __importDefault(require("@sqs/febs-logger"));
const child_process_1 = require("child_process");
const exit_hook_1 = __importDefault(require("exit-hook"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("./utils");
exports.default = (options) => {
    febs_logger_1.default.debug('Running babel builds');
    const babelEnvironment = utils_1.getBabelEnvironment(options);
    if (options.watch) {
        exit_hook_1.default(() => {
            subprocessCjs.kill();
            subprocessEsm.kill();
        });
        const subprocessCjs = bablifyWatch(babelEnvironment.cjs, options);
        const subprocessEsm = bablifyWatch(babelEnvironment.esm, options);
    }
    else {
        bablify(babelEnvironment.cjs, options);
        bablify(babelEnvironment.esm, options);
    }
};
function bablify(babelEnv, options) {
    const buildCommand = getBabelCliCommand(babelEnv.outDir, options);
    child_process_1.execSync(buildCommand, {
        encoding: 'utf-8',
        env: Object.assign(Object.assign({}, process.env), { BABEL_ENV: babelEnv.name }),
        stdio: 'inherit',
    });
}
function bablifyWatch(babelEnv, options) {
    const buildCommand = getBabelCliCommand(babelEnv.outDir, options);
    const buildProcess = child_process_1.spawn(buildCommand, {
        env: Object.assign(Object.assign({}, process.env), { BABEL_ENV: babelEnv.name }),
        shell: true,
        stdio: 'inherit',
    });
    return buildProcess;
}
const formatIgnorePatterns = (patterns) => patterns
    .map(pattern => pattern.trim())
    .filter(Boolean)
    .map(pattern => `"${pattern}"`)
    .join(',');
exports.formatIgnorePatterns = formatIgnorePatterns;
const getTestFilePaths = ({ paths, }) => [
    '**/__tests__',
    '**/__mocks__',
    '**/__snapshots__',
    '**/__image_snapshots__',
    path_1.default.join(paths.src, '**/*.spec.ts'),
    path_1.default.join(paths.src, '**/*.test.ts'),
    path_1.default.join(paths.src, '**/*.spec.tsx'),
    path_1.default.join(paths.src, '**/*.test.tsx'),
    path_1.default.join(paths.src, '**/*.spec.js'),
    path_1.default.join(paths.src, '**/*.test.js'),
    path_1.default.join(paths.src, '**/*.spec.jsx'),
    path_1.default.join(paths.src, '**/*.test.jsx'),
];
exports.getTestFilePaths = getTestFilePaths;
function getBabelCliCommand(outDir, options) {
    const babelPath = getBabelCliPath();
    const srcDir = options.paths.src || 'src';
    const ignorePatterns = exports.formatIgnorePatterns([
        ...exports.getTestFilePaths(options),
        ...options.buildIgnorePatterns,
    ]);
    let baseCommand = `${babelPath} ${srcDir} --ignore ${ignorePatterns} -d ${outDir}`;
    const typescriptFlags = '--extensions ".ts,.tsx,.js,.jsx"';
    const watchFlags = options.logLevel === 'debug' ? '--watch --verbose' : '--watch';
    if (options.typescript)
        baseCommand += ' ' + typescriptFlags;
    if (options.watch)
        baseCommand += ' ' + watchFlags;
    return baseCommand;
}
exports.getBabelCliCommand = getBabelCliCommand;
function getBabelCliPath() {
    const babelCliPackagePath = require
        .resolve('@babel/cli')
        .replace('index.js', '');
    const babelCliPackageJsonPath = path_1.default.join(babelCliPackagePath, 'package.json');
    return path_1.default.join(babelCliPackagePath, require(babelCliPackageJsonPath).bin.babel);
}
//# sourceMappingURL=runBabel.js.map