"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.negatePattern = exports.defaultIgnoredPatterns = void 0;
const febs_logger_1 = __importDefault(require("@sqs/febs-logger"));
const chalk_1 = __importDefault(require("chalk"));
const chokidar_1 = __importDefault(require("chokidar"));
const path_1 = __importDefault(require("path"));
const recursive_copy_1 = __importDefault(require("recursive-copy"));
function getCopiedFilePaths(stats = []) {
    return stats.reduce((acc, stat) => {
        const copiedPath = stat.dest;
        if (path_1.default.extname(copiedPath)) {
            acc.push(copiedPath);
        }
        return acc;
    }, []);
}
function logSuccess(outdir, files) {
    febs_logger_1.default.debug(`Successfully copied ${files.length} static files into ${outdir}: ${files.map(filename => chalk_1.default.gray('\n' + filename))}`);
}
exports.defaultIgnoredPatterns = [
    '**/{__tests__,__mocks__,__snapshots__,__image_snapshots__}',
    '**/{__tests__,__mocks__,__snapshots__,__image_snapshots__}/**',
    '**/*.{ts,tsx,js,jsx}',
];
const negatePattern = (pattern) => `!${pattern}`;
exports.negatePattern = negatePattern;
exports.default = (options) => {
    const { cjsOutDir, esmOutDir, src } = options.paths;
    febs_logger_1.default.debug('Copying static files into output directories...');
    const ignoredPatterns = [
        ...exports.defaultIgnoredPatterns,
        ...options.buildIgnorePatterns,
    ];
    const copyOptions = {
        filter: ['**/*', ...ignoredPatterns.map(exports.negatePattern)],
        overwrite: true,
    };
    if (options.watch) {
        chokidar_1.default
            .watch(`${options.paths.src}/**/*`, {
            cwd: options.paths.src,
            ignoreInitial: true,
            ignored: [...ignoredPatterns],
        })
            .on('all', (eventName, changedFilePath) => {
            if (eventName === 'add' || eventName === 'change') {
                Promise.all([
                    recursive_copy_1.default(src, cjsOutDir, Object.assign(Object.assign({}, copyOptions), { filter: [changedFilePath] })),
                    recursive_copy_1.default(src, esmOutDir, Object.assign(Object.assign({}, copyOptions), { filter: [changedFilePath] })),
                ])
                    .then((results) => results.map(result => getCopiedFilePaths(result)))
                    .then(([cjsPaths, esmPaths]) => {
                    logSuccess(cjsOutDir, cjsPaths);
                    logSuccess(esmOutDir, esmPaths);
                })
                    .catch(err => {
                    febs_logger_1.default.error('Copying static files failed:');
                    throw err;
                });
            }
        });
    }
    const cpyToCjs = recursive_copy_1.default(src, cjsOutDir, copyOptions);
    const cpyToEsm = recursive_copy_1.default(src, esmOutDir, copyOptions);
    return Promise.all([cpyToCjs, cpyToEsm])
        .then((results) => results.map(result => getCopiedFilePaths(result)))
        .then(([cjsPaths, esmPaths]) => {
        logSuccess(cjsOutDir, cjsPaths);
        logSuccess(esmOutDir, esmPaths);
    })
        .catch(err => {
        febs_logger_1.default.error('Copying static files failed:');
        throw err;
    });
};
//# sourceMappingURL=copyUnbablifiedFiles.js.map