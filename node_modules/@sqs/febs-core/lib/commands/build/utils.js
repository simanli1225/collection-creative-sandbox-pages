"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBabelEnvironment = exports.formatStats = exports.getWebpackConfigEnvArgs = exports.getSingleCustomConfig = exports.getWebpackConfigs = exports.getDefaultStatsConfig = exports.loadWebpackConfig = exports.toArray = void 0;
const febs_logger_1 = __importDefault(require("@sqs/febs-logger"));
const febs_utils_1 = require("@sqs/febs-utils");
const webpack_base_config_1 = __importDefault(require("./webpack.base.config"));
const toArray = (item) => (Array.isArray(item) ? item : [item]);
exports.toArray = toArray;
function loadWebpackConfig(path) {
    let webpackConfig;
    try {
        webpackConfig = require(febs_utils_1.resolveAppModule(path));
        febs_logger_1.default.debug('Custom webpack config %s found', webpackConfig);
    }
    catch (e) {
        throw new Error(`Could not load webpack config at ${path} \n${JSON.stringify(e)}`);
    }
    return webpackConfig;
}
exports.loadWebpackConfig = loadWebpackConfig;
const getDefaultStatsConfig = () => ({});
exports.getDefaultStatsConfig = getDefaultStatsConfig;
function getWebpackConfigs(options) {
    if (options.webpackConfig) {
        const customWebpackConfig = loadWebpackConfig(options.webpackConfig);
        febs_logger_1.default.debug('Generating custom webpack configs...');
        return getCustomConfigs(options, customWebpackConfig);
    }
    febs_logger_1.default.debug('Generating default webpack config...');
    return getDefaultConfigs(options);
}
exports.getWebpackConfigs = getWebpackConfigs;
function getDefaultConfigs(options) {
    const envs = getWebpackConfigEnvArgs(options);
    return envs.map(env => {
        return webpack_base_config_1.default(env, options);
    });
}
function getCustomConfigs(options, customWebpackConfig) {
    const envs = getWebpackConfigEnvArgs(options);
    const webpackConfigs = exports.toArray(customWebpackConfig);
    const configs = envs.reduce((acc, env) => {
        webpackConfigs.forEach(webpackConfig => {
            const result = typeof webpackConfig === 'function'
                ? webpackConfig(env, options)
                : webpackConfig;
            if (Array.isArray(result)) {
                acc.push(...result);
            }
            else {
                acc.push(result);
            }
        });
        return acc;
    }, []);
    febs_logger_1.default.debug('Generated %s total custom webpack configs', configs.length);
    return configs;
}
function getSingleCustomConfig(options, env, configIndex) {
    const customWebpackConfig = loadWebpackConfig(options.webpackConfig);
    const webpackConfigs = getCustomConfigs(options, customWebpackConfig);
    const availableCpus = febs_utils_1.getAvailableCPUs();
    const maxAvailableCpus = options.parallel ?
        Math.min(options.parallel, availableCpus) :
        availableCpus;
    options.parallel = Math.max(maxAvailableCpus / webpackConfigs.length - 1, 1);
    const webpackConfig = webpackConfigs[configIndex];
    return typeof webpackConfig === 'function'
        ? webpackConfig(env, options)
        : webpackConfig;
}
exports.getSingleCustomConfig = getSingleCustomConfig;
function getWebpackConfigEnvArgs(options) {
    return options.locale.map(locale => {
        return Object.assign(Object.assign({}, options.env), { locale });
    });
}
exports.getWebpackConfigEnvArgs = getWebpackConfigEnvArgs;
const formatStats = (stats, webpackConfig) => stats.toString((webpackConfig && webpackConfig.stats) || exports.getDefaultStatsConfig());
exports.formatStats = formatStats;
const getBabelEnvironment = (options) => {
    return {
        cjs: {
            name: 'cjs',
            outDir: options.paths.cjsOutDir,
        },
        esm: {
            name: 'esm',
            outDir: options.paths.esmOutDir,
        },
    };
};
exports.getBabelEnvironment = getBabelEnvironment;
//# sourceMappingURL=utils.js.map