"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const febs_logger_1 = __importDefault(require("@sqs/febs-logger"));
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
const recursive_copy_1 = __importDefault(require("recursive-copy"));
const utils_1 = require("./utils");
exports.default = async (options) => {
    const babelEnvironment = utils_1.getBabelEnvironment(options);
    const emitToDir = babelEnvironment.esm.outDir;
    const copyToDir = babelEnvironment.cjs.outDir;
    emitDeclarations(emitToDir);
    await copyDeclarations(emitToDir, copyToDir);
};
function emitDeclarations(outDir) {
    febs_logger_1.default.debug(`Emitting declarations to ${outDir}`);
    const tscCommand = `${getTscCliPath()} --noEmit false --emitDeclarationOnly --declarationDir ${outDir}`;
    return child_process_1.execSync(tscCommand, {
        encoding: 'utf-8',
        stdio: 'inherit',
    });
}
function copyDeclarations(fromDir, toDir) {
    febs_logger_1.default.debug(`Copying declarations from ${fromDir} to ${toDir}...`);
    const copyOptions = {
        filter: /\.d.ts/,
        overwrite: true,
    };
    return recursive_copy_1.default(fromDir, toDir, copyOptions)
        .then(copied => {
        febs_logger_1.default.debug(`Successfully copied ${copied.length} declaration files.`);
    })
        .catch(err => {
        febs_logger_1.default.error('Copying files failed:');
        throw err;
    });
}
function getTscCliPath() {
    const appDirectory = fs_1.default.realpathSync(process.cwd());
    return require.resolve('typescript/bin/tsc', {
        paths: [appDirectory],
    });
}
//# sourceMappingURL=emitTscDeclarations.js.map