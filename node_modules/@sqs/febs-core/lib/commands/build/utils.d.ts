import webpack, { Stats } from 'webpack';
export declare const toArray: <T>(item: T | T[]) => T[];
declare type WebpackConfigFn = (env: {
    [key: string]: string;
}, argv: {
    [key: string]: string;
}) => webpack.Configuration;
declare type WebpackConfig = WebpackConfigFn | webpack.Configuration | Array<WebpackConfigFn | webpack.Configuration>;
export declare function loadWebpackConfig(path: string): WebpackConfig;
export declare const getDefaultStatsConfig: () => unknown;
export interface Options {
    env: {
        [key: string]: boolean;
    };
    locale: string[];
    parallel?: number;
    webpackConfig: string;
    [key: string]: any;
}
export declare function getWebpackConfigs(options: Options): webpack.Configuration[];
export declare function getSingleCustomConfig(options: Options, env: {
    [key: string]: string;
}, configIndex: number): webpack.Configuration;
interface WebpackConfigEnv {
    [key: string]: any;
    locale: string;
}
export declare function getWebpackConfigEnvArgs(options: {
    [key: string]: any;
} & Pick<Options, 'env' | 'locale'>): WebpackConfigEnv[];
export declare const formatStats: (stats: webpack.Stats, webpackConfig?: webpack.Configuration | undefined) => string;
export interface BabelEnvironment {
    outDir: string;
    name: string;
}
export declare const getBabelEnvironment: (options: {
    [key: string]: any;
    paths: {
        [key: string]: any;
        cjsOutDir: string;
        esmOutDir: string;
    };
}) => {
    [key: string]: BabelEnvironment;
};
export {};
//# sourceMappingURL=utils.d.ts.map