"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const febs_logger_1 = __importDefault(require("@sqs/febs-logger"));
const copyUnbablifiedFiles_1 = __importDefault(require("./copyUnbablifiedFiles"));
const emitTscDeclarations_1 = __importDefault(require("./emitTscDeclarations"));
const parallelBuild_1 = __importDefault(require("./parallelBuild"));
const reportBuildStats_1 = __importDefault(require("./reporters/reportBuildStats"));
const runBabel_1 = __importDefault(require("./runBabel"));
const runWebpack_1 = __importDefault(require("./runWebpack"));
const utils_1 = require("./utils");
const serialBuild_1 = __importDefault(require("./serialBuild"));
function buildLibrary(config) {
    runBabel_1.default(config);
    const copyHelpers = [copyUnbablifiedFiles_1.default(config)];
    if (config.typescript && !config.watch) {
        copyHelpers.push(emitTscDeclarations_1.default(config));
    }
    return Promise.all(copyHelpers);
}
function buildWebapp(config) {
    febs_logger_1.default.debug('Loading webpack configurations...');
    const webpackConfigs = utils_1.getWebpackConfigs(config);
    if (webpackConfigs.length > 1 && config.parallelBuild) {
        febs_logger_1.default.debug('Running parallel builds with %s different configurations', webpackConfigs.length);
        return parallelBuild_1.default(config, webpackConfigs);
    }
    if (webpackConfigs.length > 1 && !config.parallelBuild) {
        febs_logger_1.default.debug('Running %s builds in series', webpackConfigs.length);
        return serialBuild_1.default(webpackConfigs, config);
    }
    febs_logger_1.default.debug('Running single build');
    return runWebpack_1.default(webpackConfigs[0], config);
}
function handleBuildError(err) {
    febs_logger_1.default.error(err);
    febs_logger_1.default.error('Build failed');
    process.exit(1);
}
exports.default = async (config) => {
    febs_logger_1.default.setLevel(config.logLevel);
    if (config.production) {
        process.env.NODE_ENV = 'production';
    }
    febs_logger_1.default.debug('Running febs build command...\nConfigurations:\n%o', Object.assign(Object.assign({}, config), { 'process.env.NODE_ENV': process.env.NODE_ENV }));
    try {
        if (config.library) {
            await buildLibrary(config);
        }
        else {
            await buildWebapp(config);
            if (config.stats) {
                await reportBuildStats_1.default(config);
            }
        }
        if (!config.watch) {
            febs_logger_1.default.info('Build complete');
        }
    }
    catch (err) {
        handleBuildError(err);
    }
};
//# sourceMappingURL=index.js.map