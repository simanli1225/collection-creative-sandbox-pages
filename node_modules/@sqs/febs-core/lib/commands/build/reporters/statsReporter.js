"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BRANCH_ENV_KEY = exports.BUILD_ENV_KEY = exports.getBuildNumber = exports.getBranchName = exports.reportToGraphite = void 0;
const febs_logger_1 = __importDefault(require("@sqs/febs-logger"));
const graphite_client_1 = __importDefault(require("graphite-client"));
const kebabCase_1 = __importDefault(require("lodash/kebabCase"));
const config_1 = require("./config");
Object.defineProperty(exports, "BRANCH_ENV_KEY", { enumerable: true, get: function () { return config_1.BRANCH_ENV_KEY; } });
Object.defineProperty(exports, "BUILD_ENV_KEY", { enumerable: true, get: function () { return config_1.BUILD_ENV_KEY; } });
const getBuildNumber = () => process.env[config_1.BUILD_ENV_KEY];
exports.getBuildNumber = getBuildNumber;
const getBranchName = () => kebabCase_1.default(process.env[config_1.BRANCH_ENV_KEY]) || undefined;
exports.getBranchName = getBranchName;
const { GRAPHITE_HOST, GRAPHITE_PORT } = config_1.REPORTING;
function reportToGraphite(prefixedMetrics, { silent } = {}) {
    const graphite = new graphite_client_1.default(GRAPHITE_HOST, GRAPHITE_PORT, 'UTF-8');
    if (silent) {
        febs_logger_1.default.setLevel('silent');
    }
    return new Promise((resolve, reject) => {
        graphite.on('error', (err) => {
            febs_logger_1.default.error('Error connecting to Graphite server', err);
            reject(err);
        });
        graphite.on('end', () => {
            resolve();
            febs_logger_1.default.debug('Graphite client disconnected');
        });
        graphite.connect(() => {
            febs_logger_1.default.debug('Connected to Graphite server');
            graphite.write(prefixedMetrics, Date.now(), (err) => {
                febs_logger_1.default.error('An error occured writing metrics to graphite: ', err);
                reject(err);
            });
            febs_logger_1.default.info('Reported metrics to graphite');
            graphite.end();
        });
    });
}
exports.reportToGraphite = reportToGraphite;
//# sourceMappingURL=statsReporter.js.map