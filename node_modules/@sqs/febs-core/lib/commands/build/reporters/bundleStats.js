"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatAsBundleStats = exports.fileNameCleanupPattern = exports.diffBundleSizes = exports.getBundleInputSizes = exports.formatData = void 0;
const febs_logger_1 = __importDefault(require("@sqs/febs-logger"));
const utils_1 = require("./utils");
const diffBundleSizes = (preSizes, minSizes) => {
    const entries = Object.entries(minSizes)
        .filter(([filename, minSize]) => filename in preSizes)
        .map(([filename, minSize]) => [filename, preSizes[filename] - minSize]);
    return entries.reduce(utils_1.entriesToObject, {});
};
exports.diffBundleSizes = diffBundleSizes;
const formatData = (data) => {
    const entries = data.chunks
        .map(({ size, names, id }) => [names.find(Boolean) || id, size]);
    return entries.reduce(utils_1.entriesToObject, {});
};
exports.formatData = formatData;
const dumpError = (err) => {
    febs_logger_1.default.error('[bundleStats] Error!', err);
    throw err;
};
const fileNameCleanupPattern = /\-\w+\-min/;
exports.fileNameCleanupPattern = fileNameCleanupPattern;
const formatAsBundleStats = (stats) => {
    const entries = Object.entries(stats)
        .filter(([filename]) => /-en-US-js/.test(filename))
        .map(([filename, size]) => [
        filename.replace(fileNameCleanupPattern, '').replace('-en-US-js', ''),
        size,
    ]);
    return entries.reduce(utils_1.entriesToObject, {});
};
exports.formatAsBundleStats = formatAsBundleStats;
const getBundleInputSizes = (filePath) => utils_1.readJsonFileAsync(filePath)
    .then(formatData)
    .catch(dumpError);
exports.getBundleInputSizes = getBundleInputSizes;
//# sourceMappingURL=bundleStats.js.map