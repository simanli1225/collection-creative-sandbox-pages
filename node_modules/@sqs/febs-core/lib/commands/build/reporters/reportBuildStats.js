"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const febs_logger_1 = __importDefault(require("@sqs/febs-logger"));
const config_1 = require("./config");
const getScriptSizeMetrics_1 = __importDefault(require("./getScriptSizeMetrics"));
const getWebpackSpeedMetrics_1 = __importDefault(require("./getWebpackSpeedMetrics"));
const statsReporter_1 = require("./statsReporter");
async function reportBuildStats(config) {
    if (!config.graphiteGroup) {
        throw new Error('You must configure "graphiteGroup" in order to build with stats');
    }
    const branchName = statsReporter_1.getBranchName() || 'DEV';
    const sizeStats = await getScriptSizeMetrics_1.default(config);
    const speedStats = await getWebpackSpeedMetrics_1.default(config);
    const sizeStatsPrefix = `${config.graphiteGroup}.${config_1.REPORTING.GRAPHITE_KEY_ASSET_SIZE}.${branchName}`;
    const speedStatsPrefix = `${config.graphiteGroup}.${config_1.REPORTING.GRAPHITE_KEY_WEBPACK_SPEED}.${branchName}`;
    const prefixedMetrics = {
        [sizeStatsPrefix]: sizeStats,
        [speedStatsPrefix]: speedStats,
    };
    return statsReporter_1.reportToGraphite(prefixedMetrics).catch((err) => {
        febs_logger_1.default.error('Reporting build stats failed.');
        throw err;
    });
}
exports.default = reportBuildStats;
//# sourceMappingURL=reportBuildStats.js.map