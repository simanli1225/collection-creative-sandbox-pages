"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const febs_logger_1 = __importDefault(require("@sqs/febs-logger"));
const utils_1 = require("../build/utils");
const server_1 = __importDefault(require("./server"));
exports.default = (config) => {
    febs_logger_1.default.setLevel(config.logLevel);
    febs_logger_1.default.debug('Running `start`');
    febs_logger_1.default.debug('FEBS config:\n%o', config);
    if (config.library) {
        febs_logger_1.default.error('`febs start` cannot be run in libraries. Please use `febs build --watch` instead.');
        return;
    }
    const webpackConfigs = utils_1.getWebpackConfigs(config);
    if (typeof webpackConfigs[0] === 'object') {
        febs_logger_1.default.debug(`Starting the development server ${config.hot ? 'with' : 'without'} hot module replacement.`);
        server_1.default(webpackConfigs, { hot: config.hot, liveReload: config.liveReload, open: config.open });
    }
    else {
        const envs = utils_1.getWebpackConfigEnvArgs(config);
        const allWebpackConfigs = [];
        const numMultiConfigs = webpackConfigs.length / envs.length;
        const envByConfigIdx = envs.reduce((acc, env) => {
            for (let multiConfigIdx = 0; multiConfigIdx < numMultiConfigs; multiConfigIdx++) {
                acc.push(env);
            }
            return acc;
        }, []);
        for (const j in webpackConfigs) {
            const env = envByConfigIdx[j];
            const webpackConfig = utils_1.getSingleCustomConfig(config, env, Number(j));
            allWebpackConfigs.push(webpackConfig);
        }
        server_1.default(allWebpackConfigs, { hot: config.hot, liveReload: config.liveReload, open: config.open });
    }
};
//# sourceMappingURL=index.js.map