"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDevServerUrl = void 0;
const febs_logger_1 = __importDefault(require("@sqs/febs-logger"));
const webpack_1 = __importDefault(require("webpack"));
const webpack_dev_server_1 = __importDefault(require("webpack-dev-server"));
const getDevServerUrl = ({ host, https, port, }) => `${https ? 'https' : 'http'}://${host}:${port}`;
exports.getDevServerUrl = getDevServerUrl;
exports.default = (webpackConfigs, { hot = false, liveReload = true, open = true } = {}) => {
    const webpackConfigWithDevServerOptions = (webpackConfigs.find((config) => config.devServer) || webpackConfigs[0] || { devServer: {} }).devServer;
    const stats = 'minimal';
    const defaultDevServerOptions = {
        host: 'localhost',
        overlay: true,
        port: 1337,
        https: false,
        hot,
        liveReload,
        stats,
        open
    };
    const devServerOptions = Object.assign(Object.assign({}, defaultDevServerOptions), webpackConfigWithDevServerOptions);
    const configs = webpackConfigs;
    if (hot) {
        febs_logger_1.default.debug('Setting up hot module replacement');
        webpack_dev_server_1.default.addDevServerEntrypoints(configs, devServerOptions);
    }
    febs_logger_1.default.debug('Webpack devserver config:\n%o', devServerOptions);
    const compiler = webpack_1.default(webpackConfigs);
    const server = new webpack_dev_server_1.default(compiler, devServerOptions);
    const devServerUrl = exports.getDevServerUrl({
        host: devServerOptions.host,
        https: !!devServerOptions.https,
        port: devServerOptions.port,
    });
    server.listen(devServerOptions.port, devServerOptions.host, err => {
        if (err) {
            febs_logger_1.default.error(`An error occurred starting server on ${devServerUrl}`);
            throw err;
        }
        febs_logger_1.default.info(`Starting development server on ${devServerUrl}`);
        if (hot) {
            febs_logger_1.default.info('ðŸ”¥ Hot module replacement enabled ðŸ”¥');
        }
    });
};
//# sourceMappingURL=server.js.map