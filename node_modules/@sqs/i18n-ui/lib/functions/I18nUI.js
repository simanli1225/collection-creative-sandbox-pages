"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var moment_1 = tslib_1.__importDefault(require("moment"));
var isFunction_1 = tslib_1.__importDefault(require("lodash/isFunction"));
var isObject_1 = tslib_1.__importDefault(require("lodash/isObject"));
var i18n_locale_list_1 = require("@sqs/i18n-locale-list");
var i18n_locale_resolver_1 = require("@sqs/i18n-locale-resolver");
var i18n_visual_context_utils_1 = require("@sqs/i18n-visual-context-utils");
var TranslationsLoadError_1 = require("../errors/TranslationsLoadError");
var framework_1 = tslib_1.__importDefault(require("./cldr/framework"));
var defaults_1 = require("./cldr/defaults");
var withDebugMode_1 = tslib_1.__importDefault(require("./helpers/withDebugMode"));
var translationDictionary_1 = require("./translationDictionary");
var customizeMoment_1 = tslib_1.__importDefault(require("./date/customizeMoment"));
var dateify_1 = tslib_1.__importDefault(require("./date/dateify"));
var DateTimeFormatAliases_1 = tslib_1.__importDefault(require("./date/DateTimeFormatAliases"));
var money_1 = tslib_1.__importDefault(require("../money"));
var pseudolocalize_1 = tslib_1.__importDefault(require("./pseudolocalize"));
var NativeLanguageNames_1 = tslib_1.__importDefault(require("../constants/NativeLanguageNames"));
var translationFileLocaleResolver = new i18n_locale_resolver_1.LocaleResolver(i18n_locale_list_1.locales.translationFiles);
var defaultOnTranslationsLoadError = function (_err, translationsLoadErrorMetadata) {
    var packageName = translationsLoadErrorMetadata.packageName, translationLocale = translationsLoadErrorMetadata.translationLocale;
    var packageNameString = packageName ? "[".concat(packageName, "] ") : '';
    console.error("".concat(packageNameString, "Could not find translation file for \"").concat(translationLocale, "\""));
};
var identityHTMLAttributesTransform = function (_resolvedValue, _substitutions, htmlAttributeProps) {
    return htmlAttributeProps;
};
var I18nUI = (function () {
    function I18nUI() {
        var options = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            options[_i] = arguments[_i];
        }
        var _this = this;
        this.isLegacyAPI = false;
        this.setTranslationLocale = function (translationLocale) {
            _this.translationLocale = translationLocale;
            _this.translationsCldr = _this.getCldrInstance(_this.translationLocale);
        };
        this.setFormattingLocale = function (formattingLocale) {
            _this.formattingLocale = formattingLocale;
            _this.formattingCldr = _this.getCldrInstance(_this.formattingLocale);
            _this.configureMoment(_this.formattingLocale);
        };
        this.setLocale = function (translationLocale, formattingLocale) {
            _this.setTranslationLocale(translationLocale);
            if (_this.isLegacyAPI === true) {
                _this.setFormattingLocale(translationLocale);
            }
            else {
                _this.setFormattingLocale(formattingLocale);
            }
        };
        this.setDebugMode = function (desiredState) {
            if (desiredState === void 0) { desiredState = false; }
            if (desiredState) {
                _this.isDebugMode = true;
                return;
            }
            _this.isDebugMode = false;
        };
        this.extendTranslationDictionary = function (dict) {
            _this.translationDictionary.extend(dict);
        };
        this.getPluralKey = function (value, opts) {
            var key = (0, translationDictionary_1.getHashKeyFromOptions)(value, opts);
            var pluralForm;
            if (opts && opts.hasOwnProperty('count')) {
                pluralForm = _this.plural(opts.count);
                key = _this.dynamicKey(key, pluralForm);
            }
            return key;
        };
        this.assignSubstitution = function (subs, newSubKey, newSubValue) {
            var _a;
            return Object.assign({}, subs || {}, (_a = {}, _a[newSubKey] = newSubValue, _a));
        };
        this.dynamicKey = function (key, pluralForm) {
            return [key, pluralForm].filter(function (i) { return i; }).join('.');
        };
        this.setTranslation = function (translation, value, opts) {
            var key = (0, translationDictionary_1.getHashKeyFromOptions)(value, opts);
            _this.translationDictionary.set(key, translation);
            return _this;
        };
        this.getTranslation = function (value, opts) {
            var key = _this.getPluralKey(value, opts);
            return _this.translationDictionary.get(key);
        };
        this.hasTranslation = function (value, opts) {
            var key = _this.getPluralKey(value, opts);
            return _this.translationDictionary.has(key);
        };
        this.resetTranslationDictionary = function () {
            return _this.translationDictionary.reset();
        };
        this.translate = function (stringValue, substitutionsObject, options) {
            if (substitutionsObject === void 0) { substitutionsObject = {}; }
            var key = (0, translationDictionary_1.getHashKeyFromOptions)(stringValue, options);
            var translation = _this.translationDictionary.get(key);
            var returnVal = translation || stringValue;
            if (returnVal) {
                returnVal = (0, translationDictionary_1.performStringSubs)(returnVal, substitutionsObject || {});
            }
            if (_this.isPseudoLocalized) {
                returnVal = (0, pseudolocalize_1.default)(returnVal);
            }
            if (_this.visualContextInstance.isExtensionEnabled) {
                _this.visualContextInstance.updateStringMap(key, returnVal);
            }
            return _this.isDebugMode ? (0, withDebugMode_1.default)(returnVal) : returnVal;
        };
        this.pluralize = function (formsObject, selectValue, substitutionsObject, options) {
            if (substitutionsObject === void 0) { substitutionsObject = {}; }
            if (formsObject && !(0, translationDictionary_1.isPOJO)(formsObject)) {
                throw new TypeError('formsObject must be an object.');
            }
            if (typeof selectValue !== 'number' || isNaN(selectValue)) {
                throw new TypeError('selectValue is required and must be a number.');
            }
            var key = (0, translationDictionary_1.getHashKeyFromOptions)(formsObject, options);
            var pluralForm = _this.plural(selectValue);
            var pluralKey = _this.dynamicKey(key, pluralForm);
            var defaultKey = _this.dynamicKey(key, translationDictionary_1.FALLBACK_PLURAL_FORM);
            var subsWithDynamicKeys = _this.assignSubstitution(substitutionsObject, '%n', _this.formatNumber(selectValue));
            var translation = _this.translationDictionary.get(pluralKey) || _this.translationDictionary.get(defaultKey);
            var fallbackValue = formsObject[pluralForm] || formsObject[translationDictionary_1.FALLBACK_PLURAL_FORM];
            var returnVal = translation || fallbackValue || '';
            if (returnVal) {
                returnVal = (0, translationDictionary_1.performStringSubs)(returnVal, subsWithDynamicKeys);
            }
            if (_this.visualContextInstance.isExtensionEnabled) {
                _this.visualContextInstance.updateStringMap(key, returnVal);
            }
            return _this.isDebugMode ? (0, withDebugMode_1.default)(returnVal) : returnVal;
        };
        this.getTranslationFileLocale = function (locale) {
            return translationFileLocaleResolver.resolveLocale(locale)
                .languageRegion;
        };
        this.loadTranslations = function (translationLoader, onLoadError, packageName) {
            var translationsFileLocale = _this.getTranslationFileLocale(_this.translationLocale);
            var translations;
            try {
                translations = translationLoader(translationsFileLocale);
            }
            catch (e) {
                var errorMessage = e.message;
                var err = new TranslationsLoadError_1.TranslationsLoadError("Loading \"".concat(translationsFileLocale, "\" translations failed while executing provided translationLoader function\n") +
                    "translationLoader()=".concat(translationLoader, "\n") +
                    'Ensure YAML or JSON files are importable\n' +
                    errorMessage);
                var errorHandler = (0, isFunction_1.default)(onLoadError)
                    ? onLoadError
                    : _this.translationsLoadErrorCallback;
                if (errorHandler) {
                    errorHandler(err, {
                        translationLocale: translationsFileLocale,
                        packageName: packageName,
                    });
                    return;
                }
                throw err;
            }
            if (!(0, isObject_1.default)(translations) || translations.length === 0) {
                throw new TranslationsLoadError_1.TranslationsLoadError("Invalid translations returned from translationLoader when loading \"".concat(translationsFileLocale, "\" translations\n") +
                    'Ensure your translation files are non-empty with valid translations');
            }
            _this.extendTranslationDictionary(translations);
        };
        this.formatCurrency = function (num, currencyCode, opts) {
            var options = tslib_1.__assign(tslib_1.__assign({}, defaults_1.CURRENCY_FORMATTING_DEFAULTS), opts);
            var formattedVal = !isNaN(num)
                ?
                    _this.formattingCldr.Numbers.formatCurrency(num, currencyCode, options)
                : String(NaN);
            return _this.isDebugMode ? (0, withDebugMode_1.default)(formattedVal) : formattedVal;
        };
        this.formatCurrencyToParts = function (num, currencyCode, opts) {
            var options = tslib_1.__assign(tslib_1.__assign({}, defaults_1.CURRENCY_FORMATTING_DEFAULTS), opts);
            return _this.formattingCldr.Numbers.formatCurrencyToParts(num, currencyCode, options);
        };
        this.getCurrencySymbol = function (currencyCode, width) {
            return _this.formattingCldr.Numbers.getCurrencySymbol(currencyCode, width);
        };
        this.getCurrencyFractions = function (currencyCode) {
            return _this.formattingCldr.Numbers.getCurrencyFractions(currencyCode);
        };
        this.formatNumber = function (num, opts) {
            var options = tslib_1.__assign(tslib_1.__assign({}, defaults_1.NUMBER_FORMATTING_DEFAULTS), opts);
            try {
                var formattedVal = _this.formattingCldr.Numbers.formatDecimal(num, options);
                return _this.isDebugMode ? (0, withDebugMode_1.default)(formattedVal) : formattedVal;
            }
            catch (e) {
                console.error("[formatNumber] Expects a numeric value (received number=\"".concat(num, "\")"));
                return '';
            }
        };
        this.formatQuantity = function (qty, opts) {
            var options = tslib_1.__assign(tslib_1.__assign({}, defaults_1.QUANTITY_FORMATTING_DEFAULTS), opts);
            var unit = qty.unit, restQty = tslib_1.__rest(qty, ["unit"]);
            var isUnitSupported = unit && _this.getAvailableUnits().includes(unit);
            var formattedVal = _this.formattingCldr.Units.formatQuantity(isUnitSupported ? qty : restQty, options);
            return _this.isDebugMode ? (0, withDebugMode_1.default)(formattedVal) : formattedVal;
        };
        this.formatMoney = function (money, cldrCurrencyOpts) {
            if (cldrCurrencyOpts === void 0) { cldrCurrencyOpts = {}; }
            if (!(money instanceof money_1.default)) {
                throw new Error('Format expects a Money instance.');
            }
            var value = money.toFloat();
            var currencyCode = money.getCurrencyCode();
            return _this.formatCurrency(value, currencyCode, cldrCurrencyOpts);
        };
        this.plural = function (num) {
            return _this.translationsCldr.Numbers.getPluralCardinal(num);
        };
        this.pluralOrdinal = function (num) { return _this.translationsCldr.Numbers.getPluralOrdinal(num); };
        this.getCountries = function (displayOptions) {
            return _this.getLocalizedList(translationDictionary_1.COUNTRIES, displayOptions);
        };
        this.getOfacCountries = function (displayOptions) {
            return _this.getLocalizedList(translationDictionary_1.OFAC_COUNTRIES, displayOptions);
        };
        this.getCountryName = function (countryCode, displayOptions) {
            if (displayOptions === void 0) { displayOptions = { context: 'standalone' }; }
            return _this.translationsCldr.General.getRegionDisplayName(countryCode, displayOptions);
        };
        this.formatDate = function (date, options) {
            var _a, _b;
            if (options === void 0) { options = { date: 'medium' }; }
            var normalizedDate;
            var browserTimeZone = (_b = (_a = Intl === null || Intl === void 0 ? void 0 : Intl.DateTimeFormat()) === null || _a === void 0 ? void 0 : _a.resolvedOptions()) === null || _b === void 0 ? void 0 : _b.timeZone;
            if (date instanceof Date || typeof date === 'number') {
                normalizedDate = {
                    date: date,
                    zoneId: browserTimeZone,
                };
            }
            else if (!date.zoneId) {
                normalizedDate = {
                    date: date.date,
                    zoneId: browserTimeZone,
                };
            }
            else {
                normalizedDate = date;
            }
            return _this.formattingCldr.Calendars.formatDate(normalizedDate, options);
        };
        this.formatDateTime = function (date, outputFormat, inputFormat, onInvalidDate) {
            if (outputFormat === void 0) { outputFormat = 'lll'; }
            var momentInstance;
            if (inputFormat && inputFormat.length > 0) {
                if (typeof date !== 'string') {
                    console.warn('Date format: The "date" parameter needs to be a string, when passing an input format.');
                }
                momentInstance = (0, moment_1.default)(date, inputFormat);
            }
            else {
                momentInstance = (0, moment_1.default)((0, dateify_1.default)(date));
            }
            if (onInvalidDate && !momentInstance.isValid()) {
                onInvalidDate(date);
            }
            if (outputFormat === 'date') {
                console.warn("Date format: The \"date\" format is deprecated. To produce a similar formatted date,\n        use the \"ddd MMM DD YYYY HH:mm:ss ZZ\" format string");
                var formattedVal_1 = momentInstance.toDate().toString();
                return _this.isDebugMode ? (0, withDebugMode_1.default)(formattedVal_1) : formattedVal_1;
            }
            outputFormat =
                DateTimeFormatAliases_1.default[outputFormat] ||
                    moment_1.default.localeData().longDateFormat(outputFormat) ||
                    outputFormat;
            var formattedVal = momentInstance.format(outputFormat);
            return _this.isDebugMode ? (0, withDebugMode_1.default)(formattedVal) : formattedVal;
        };
        this.formatDateInterval = function (start, end, options) {
            var formattedVal = _this.formattingCldr.Calendars.formatDateInterval(start, end, tslib_1.__assign(tslib_1.__assign({}, defaults_1.DATE_INTERVAL_FORMATTING_DEFAULTS), options));
            return _this.isDebugMode ? (0, withDebugMode_1.default)(formattedVal) : formattedVal;
        };
        this.formatRelativeTime = function (baseDate, fromDate, omitAffixes, _debug, onInvalidDate) {
            if (omitAffixes === void 0) { omitAffixes = false; }
            if (_debug === void 0) { _debug = false; }
            var momentInstance = (0, moment_1.default)((0, dateify_1.default)(baseDate));
            var invalidDates = [];
            if (!momentInstance.isValid()) {
                invalidDates = invalidDates.concat(baseDate);
            }
            if (!(0, moment_1.default)(fromDate).isValid()) {
                invalidDates = invalidDates.concat(fromDate);
            }
            if (onInvalidDate && invalidDates.length) {
                onInvalidDate(invalidDates);
            }
            var formattedVal = momentInstance.from(fromDate, omitAffixes);
            return _this.isDebugMode ? (0, withDebugMode_1.default)(formattedVal) : formattedVal;
        };
        this.weekdays = function (options) {
            var weekdays = _this.formattingCldr.Calendars.weekdays(options);
            return Object.keys(weekdays).map(function (weekdayNumber) { return weekdays[weekdayNumber]; });
        };
        this.getLanguageName = function (languageTag, displayOptions) {
            if (displayOptions === void 0) { displayOptions = { context: 'standalone' }; }
            return _this.translationsCldr.General.getLanguageDisplayName(languageTag, displayOptions);
        };
        this.DateTimeFormatAliases = DateTimeFormatAliases_1.default;
        this.getFormattingCldrForTemplateEngine = function () {
            return _this.formattingCldr;
        };
        this.getTimeZoneInfo = function (zoneid) {
            return _this.formattingCldr.Calendars.timeZoneInfo(zoneid);
        };
        this.timeZoneFromUTC = function (timestamp, timeZoneId) {
            return _this.formattingCldr.Calendars.timeZoneFromUTC(timestamp, timeZoneId);
        };
        this.getNativeLanguageName = function (languageTag) {
            var _a;
            var language = i18n_locale_resolver_1.LocaleResolver.parseLocale(languageTag).language();
            return (_a = NativeLanguageNames_1.default[language]) !== null && _a !== void 0 ? _a : _this.getLanguageName(languageTag);
        };
        this.formatList = function (items, type) {
            return _this.formattingCldr.General.formatList(items, type);
        };
        this.getAvailableUnits = function () {
            return _this.formattingCldr.Units.availableUnits();
        };
        this.isLegacyAPI = false;
        if (options.length === 1 && (0, isObject_1.default)(options[0])) {
            var optionsWithDefaults = tslib_1.__assign({ translationDictionary: {}, isDebugMode: false, cldrOptions: {}, translationsLoadErrorCallback: defaultOnTranslationsLoadError, htmlAttributesTransform: identityHTMLAttributesTransform }, options[0]);
            var htmlAttributesTransform = optionsWithDefaults.htmlAttributesTransform, translationLocale = optionsWithDefaults.translationLocale, formattingLocale = optionsWithDefaults.formattingLocale, translationDictionary = optionsWithDefaults.translationDictionary, translationsLoader = optionsWithDefaults.translationsLoader, isDebugMode = optionsWithDefaults.isDebugMode, cldrOptions = optionsWithDefaults.cldrOptions, isPseudoLocalized = optionsWithDefaults.isPseudoLocalized, translationsLoadErrorCallback = optionsWithDefaults.translationsLoadErrorCallback;
            if (!translationLocale) {
                throw new Error('Missing required translationLocale value');
            }
            if (!formattingLocale) {
                throw new Error('Missing required translationLocale value');
            }
            this.framework = (0, framework_1.default)(cldrOptions);
            this.htmlAttributesTransform = htmlAttributesTransform;
            this.translationDictionary = new translationDictionary_1.MessageStore(translationDictionary);
            this.isDebugMode = isDebugMode;
            this.isPseudoLocalized = isPseudoLocalized;
            this.translationsLoadErrorCallback = translationsLoadErrorCallback;
            this.translationLocale = translationLocale;
            this.formattingLocale = formattingLocale;
            if ((0, isFunction_1.default)(translationsLoader)) {
                this.loadTranslations(translationsLoader);
            }
        }
        else {
            this.isLegacyAPI = true;
            var _a = options[0], locale = _a === void 0 ? 'en-US' : _a, _b = options[1], translationDictionary = _b === void 0 ? {} : _b, _c = options[2], isDebugMode = _c === void 0 ? false : _c;
            this.framework = (0, framework_1.default)();
            this.htmlAttributesTransform =
                identityHTMLAttributesTransform;
            this.translationDictionary = new translationDictionary_1.MessageStore(translationDictionary);
            this.isDebugMode = isDebugMode;
            this.translationLocale = locale;
            this.formattingLocale = locale;
        }
        this.translationsCldr = this.getCldrInstance(this.translationLocale);
        this.formattingCldr = this.getCldrInstance(this.formattingLocale);
        this.configureMoment(this.formattingLocale);
        this.visualContextInstance = new i18n_visual_context_utils_1.VisualContext({ source: '@sqs/i18n-ui' });
    }
    I18nUI.prototype.getCldrInstance = function (locale) {
        try {
            return this.framework.get(locale);
        }
        catch (e) {
            e.message =
                'Unable to create I18nUI instance.\n' +
                    'Cannot load CLDR instance for locale=' +
                    locale +
                    '.\n' +
                    e.message;
            throw e;
        }
    };
    I18nUI.prototype.configureMoment = function (locale) {
        try {
            (0, customizeMoment_1.default)(locale);
        }
        catch (e) {
            moment_1.default.locale(i18n_locale_resolver_1.LocaleResolver.parseLocale(locale).language());
        }
    };
    I18nUI.prototype.getLocalizedList = function (list, displayOptions) {
        var _this = this;
        if (displayOptions === void 0) { displayOptions = { context: 'ui-list-or-menu' }; }
        return list
            .sort(function (codeA, codeB) {
            var countryNameA = _this.getCountryName(codeA, displayOptions);
            var countryNameB = _this.getCountryName(codeB, displayOptions);
            return countryNameA.localeCompare(countryNameB, _this.translationLocale);
        })
            .reduce(function (countryList, countryCode) {
            countryList[countryCode] = _this.getCountryName(countryCode, displayOptions);
            return countryList;
        }, {});
    };
    return I18nUI;
}());
exports.default = I18nUI;
