import { MomentInput, MomentFormatSpecification } from 'moment';
import type { HTMLAttributesTransformFunction } from '../react/components/componentUtils';
import { SupportedTranslationLocale, Locale } from '@sqs/i18n-locale-list';
import { VisualContext } from '@sqs/i18n-visual-context-utils';
import type { CLDROptions, CurrencyType, CLDR, CLDRFramework, DecimalFormatOptions, Quantity, UnitFormatOptions, CurrencyFormatOptions, DisplayNameOptions, CalendarFieldsOptions, CurrencySymbolWidthType, ListPatternType, DateFormatOptions, DateIntervalFormatOptions, ZonedDateTime, CalendarDate } from '@phensley/cldr-core';
import { MessageStore } from './translationDictionary';
import Money from '../money';
export type TranslationDictionary = Record<string, TranslateValue>;
export type TranslationsLoader = (locale: SupportedTranslationLocale) => TranslationDictionary;
export interface Plural {
    one?: string;
    other?: string;
    few?: string;
    many?: string;
    two?: string;
    zero?: string;
    [k: string]: string | undefined;
}
export interface TranslationOptions {
    project: string;
    notes?: string;
    translationId?: string;
}
export interface TranslationsLoadErrorMetadata {
    translationLocale: string;
    packageName: string | undefined;
}
export type TranslationsLoadErrorCallback = (err: Error, translationsLoadErrorMetadata: TranslationsLoadErrorMetadata) => void;
export type TranslateValue = string | Plural | number | undefined;
export type PluralFormsType = 'one' | 'other';
export interface I18nUIOptions {
    translationLocale: SupportedTranslationLocale;
    formattingLocale: Locale;
    translationDictionary: TranslationDictionary;
    isDebugMode?: boolean;
    isPseudoLocalized?: boolean;
    translationsLoader: TranslationsLoader;
    cldrOptions: CLDROptions;
    translationsLoadErrorCallback: TranslationsLoadErrorCallback;
    htmlAttributesTransform?: HTMLAttributesTransformFunction;
}
export interface CountryList {
    [key: string]: string;
}
export default class I18nUI {
    htmlAttributesTransform: HTMLAttributesTransformFunction | undefined;
    isLegacyAPI: boolean;
    framework: CLDRFramework;
    isDebugMode: boolean;
    isPseudoLocalized: boolean | undefined;
    translationDictionary: MessageStore;
    translationsCldr: CLDR;
    formattingCldr: CLDR;
    translationLocale: SupportedTranslationLocale;
    formattingLocale: Locale;
    translationsLoadErrorCallback: TranslationsLoadErrorCallback | undefined;
    visualContextInstance: VisualContext;
    constructor(...options: any[]);
    private getCldrInstance;
    private configureMoment;
    setTranslationLocale: (translationLocale: SupportedTranslationLocale) => void;
    setFormattingLocale: (formattingLocale: Locale) => void;
    setLocale: (translationLocale: SupportedTranslationLocale, formattingLocale?: Locale) => void;
    setDebugMode: (desiredState?: boolean) => void;
    extendTranslationDictionary: (dict: TranslationDictionary) => void;
    getPluralKey: (value: TranslateValue, opts: {
        count: number;
        project: string;
    }) => any;
    assignSubstitution: (subs: TranslationDictionary | null, newSubKey: string, newSubValue: string) => TranslationDictionary & {
        [x: string]: string;
    };
    dynamicKey: (key: string, pluralForm: PluralFormsType) => string;
    setTranslation: (translation: string | Record<string, any>, value: TranslateValue, opts: TranslationOptions | null) => this;
    getTranslation: (value: TranslateValue, opts: {
        count: number;
        project: string;
    }) => string | null;
    hasTranslation: (value: string | Plural, opts: {
        count: number;
        project: string;
    }) => boolean;
    resetTranslationDictionary: () => MessageStore;
    translate: (stringValue: string, substitutionsObject: (TranslationDictionary | null) | undefined, options: TranslationOptions) => string;
    pluralize: (formsObject: TranslationDictionary, selectValue: number, substitutionsObject: (Record<string, TranslateValue> | null) | undefined, options: TranslationOptions) => string;
    getTranslationFileLocale: (locale: SupportedTranslationLocale) => SupportedTranslationLocale;
    loadTranslations: (translationLoader: (locale: SupportedTranslationLocale) => Record<string, TranslateValue>, onLoadError?: TranslationsLoadErrorCallback, packageName?: string) => void;
    formatCurrency: (num: number, currencyCode: string, opts?: CurrencyFormatOptions) => string;
    formatCurrencyToParts: (num: number, currencyCode: CurrencyType, opts: any) => import("@phensley/cldr-core").Part[];
    getCurrencySymbol: (currencyCode: CurrencyType, width?: CurrencySymbolWidthType) => string;
    getCurrencyFractions: (currencyCode: CurrencyType) => import("@phensley/cldr-core").CurrencyFractions;
    formatNumber: (num: number, opts?: DecimalFormatOptions) => string;
    formatQuantity: (qty: Quantity, opts?: UnitFormatOptions) => string;
    formatMoney: (money: Money, cldrCurrencyOpts?: CurrencyFormatOptions) => string;
    plural: (num: number) => PluralFormsType;
    pluralOrdinal: (num: number) => string;
    getCountries: (displayOptions?: DisplayNameOptions) => CountryList;
    getOfacCountries: (displayOptions?: DisplayNameOptions) => CountryList;
    private getLocalizedList;
    getCountryName: (countryCode: string, displayOptions?: DisplayNameOptions) => string;
    formatDate: (date: ZonedDateTime | Date | number, options?: DateFormatOptions) => string;
    formatDateTime: (date: MomentInput, outputFormat?: MomentFormatSpecification, inputFormat?: MomentFormatSpecification, onInvalidDate?: (date: MomentInput) => void) => string;
    formatDateInterval: (start: CalendarDate | ZonedDateTime | Date, end: CalendarDate | ZonedDateTime | Date, options?: DateIntervalFormatOptions) => string;
    formatRelativeTime: (baseDate: MomentInput, fromDate: MomentInput, omitAffixes?: boolean, _debug?: boolean, onInvalidDate?: (invalidDates: MomentInput[]) => void) => string;
    weekdays: (options?: CalendarFieldsOptions) => any[];
    getLanguageName: (languageTag: string, displayOptions?: DisplayNameOptions) => string;
    DateTimeFormatAliases: {
        minute: string;
        minutes: string;
        hours12: string;
        hours24: string;
        day: string;
        month: string;
        months: string;
        shortMonth: string;
        year: string;
        years: string;
        time: string;
        abbreviatedDate: string;
        shortDate: string;
        longDate: string;
        shortDateTime: string;
        mediumDateTime: string;
        longDateTime: string;
        date: string;
    };
    getFormattingCldrForTemplateEngine: () => CLDR;
    getTimeZoneInfo: (zoneid: string) => import("@phensley/cldr-core").TimeZoneInfo;
    timeZoneFromUTC: (timestamp: number, timeZoneId: string) => import("@phensley/cldr-core").ZoneInfo | undefined;
    getNativeLanguageName: (languageTag: string) => string;
    formatList: (items: string[], type?: ListPatternType) => string;
    getAvailableUnits: () => import("@phensley/cldr-core").UnitType[];
}
