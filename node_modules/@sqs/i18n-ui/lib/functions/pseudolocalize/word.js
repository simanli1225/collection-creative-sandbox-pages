"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var character_1 = tslib_1.__importDefault(require("./character"));
var getFirstCharacterToExpand = function (word, skipCharacter) {
    return word.split('').findIndex(function (c) { return !skipCharacter(c); });
};
var getLastCharacterToExpand = function (word, skipCharacter) {
    var lastIdx = word.length - 1;
    while (skipCharacter(word[lastIdx])) {
        lastIdx--;
    }
    return lastIdx;
};
var stringInsert = function (originalStr, idx, stringToInsert) {
    return originalStr.slice(0, idx) + stringToInsert + originalStr.slice(idx);
};
var getWordWidth = function (str) {
    return str
        .split('')
        .reduce(function (acc, character) { return acc + new character_1.default(character).getWidthMultiplier(); }, 0);
};
var expand = function (options) {
    var originalWord = options.originalWord, transformedWord = options.transformedWord, expansionFactor = options.expansionFactor, skipCharacter = options.skipCharacter;
    if (expansionFactor < 1) {
        throw new Error('Shrinking is not supported.');
    }
    var wordWidth = getWordWidth(originalWord);
    var targetWidth = wordWidth * expansionFactor;
    var diff = targetWidth - wordWidth;
    var halfDiff = Math.round(diff / 2);
    var firstIdx = getFirstCharacterToExpand(originalWord, skipCharacter);
    if (firstIdx === -1) {
        return transformedWord;
    }
    var firstChar = originalWord[firstIdx];
    var prefix = new character_1.default(firstChar).getExpansion(halfDiff);
    var expandedWord = stringInsert(transformedWord, firstIdx, prefix);
    var lastIdx = getLastCharacterToExpand(originalWord, skipCharacter);
    var lastChar = originalWord[lastIdx];
    var suffix = new character_1.default(lastChar).getExpansion(halfDiff, character_1.default.FROM_BACK);
    expandedWord = stringInsert(expandedWord, lastIdx + prefix.length, suffix);
    return expandedWord;
};
exports.default = {
    expand: expand,
};
