import Big from 'big.js';
declare class IncompatibleMoneyError extends Error {
    constructor();
}
declare class InvalidCurrencyError extends Error {
    constructor(currencyCode: string);
}
interface MoneyJson {
    value?: string;
    decimalValue?: string;
    currency?: string;
    currencyCode?: string;
}
type MoneyValue = string | number | Big;
declare class Money {
    static IncompatibleMoneyError: typeof IncompatibleMoneyError;
    static InvalidCurrencyError: typeof InvalidCurrencyError;
    currencyCode: string;
    value: Big;
    constructor(value: MoneyValue, currencyCode: string);
    static fromJson(moneyJson: MoneyJson | any): Money;
    toJSON(): {
        decimalValue: string;
        currencyCode: string;
    };
    toJson(): {
        decimalValue: string;
        currencyCode: string;
    };
    toFloat(): number;
    toSubunits(fractionDigits?: number): number;
    getCurrencyCode(): string;
    isPositive(): boolean;
    isNegative(): boolean;
    isZero(): boolean;
    compare(other: Money): import("big.js").Comparison;
    divide(divisor: number): Money;
    multiply(multiplicand: number): Money;
    add(money: Money): Money;
    subtract(money: Money): Money;
    negate(): Money;
    round(fractionDigits?: number): Money;
}
export default Money;
