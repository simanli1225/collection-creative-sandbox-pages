"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var big_js_1 = tslib_1.__importDefault(require("big.js"));
var some_1 = tslib_1.__importDefault(require("lodash/some"));
var CURRENCY_CODE_PATTERN = /^[A-Z]{3}$/;
var IncompatibleMoneyError = (function (_super) {
    tslib_1.__extends(IncompatibleMoneyError, _super);
    function IncompatibleMoneyError() {
        var _newTarget = this.constructor;
        var _this = _super.call(this, 'Monies are not comparable for arithmetic') || this;
        Object.setPrototypeOf(_this, _newTarget.prototype);
        return _this;
    }
    return IncompatibleMoneyError;
}(Error));
var InvalidCurrencyError = (function (_super) {
    tslib_1.__extends(InvalidCurrencyError, _super);
    function InvalidCurrencyError(currencyCode) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, "Invalid currency code ".concat(currencyCode)) || this;
        Object.setPrototypeOf(_this, _newTarget.prototype);
        return _this;
    }
    return InvalidCurrencyError;
}(Error));
var validateCompatibility = function () {
    var monies = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        monies[_i] = arguments[_i];
    }
    var currencyCode = monies[0].currencyCode;
    var invalid = (0, some_1.default)(monies, function (money) { return money.currencyCode !== currencyCode; });
    if (invalid) {
        throw new IncompatibleMoneyError();
    }
};
var Money = (function () {
    function Money(value, currencyCode) {
        if (typeof currencyCode !== 'string' || !CURRENCY_CODE_PATTERN.test(currencyCode)) {
            throw new InvalidCurrencyError(currencyCode);
        }
        this.value = new big_js_1.default(value);
        this.currencyCode = currencyCode;
        Object.freeze(this);
    }
    Money.fromJson = function (moneyJson) {
        var value = moneyJson.value, decimalValue = moneyJson.decimalValue, currency = moneyJson.currency, currencyCode = moneyJson.currencyCode;
        return new Money(decimalValue || value, currencyCode || currency);
    };
    Money.prototype.toJSON = function () {
        return {
            decimalValue: this.value.toString(),
            currencyCode: this.currencyCode,
        };
    };
    Money.prototype.toJson = function () {
        return this.toJSON();
    };
    Money.prototype.toFloat = function () {
        return parseFloat(this.value);
    };
    Money.prototype.toSubunits = function (fractionDigits) {
        if (fractionDigits === void 0) { fractionDigits = 2; }
        var subunits = parseInt(this.value.times(Math.pow(10, fractionDigits)).toFixed());
        return subunits;
    };
    Money.prototype.getCurrencyCode = function () {
        return this.currencyCode;
    };
    Money.prototype.isPositive = function () {
        return this.value.gt(0);
    };
    Money.prototype.isNegative = function () {
        return this.value.lt(0);
    };
    Money.prototype.isZero = function () {
        return this.value.eq(0);
    };
    Money.prototype.compare = function (other) {
        validateCompatibility(this, other);
        return this.value.cmp(other.value);
    };
    Money.prototype.divide = function (divisor) {
        return new Money(this.value.div(divisor), this.currencyCode);
    };
    Money.prototype.multiply = function (multiplicand) {
        return new Money(this.value.times(multiplicand), this.currencyCode);
    };
    Money.prototype.add = function (money) {
        validateCompatibility(this, money);
        return new Money(this.value.plus(money.value), this.currencyCode);
    };
    Money.prototype.subtract = function (money) {
        validateCompatibility(this, money);
        return new Money(this.value.minus(money.value), this.currencyCode);
    };
    Money.prototype.negate = function () {
        return this.multiply(-1);
    };
    Money.prototype.round = function (fractionDigits) {
        if (fractionDigits === void 0) { fractionDigits = 2; }
        return new Money(this.value.round(fractionDigits), this.currencyCode);
    };
    Money.IncompatibleMoneyError = IncompatibleMoneyError;
    Money.InvalidCurrencyError = InvalidCurrencyError;
    return Money;
}());
exports.default = Money;
