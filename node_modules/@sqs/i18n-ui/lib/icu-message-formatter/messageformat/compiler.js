"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
require("core-js/modules/es.array.join.js");
require("core-js/modules/es.array.map.js");
require("core-js/modules/es.regexp.constructor.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.regexp.to-string.js");
require("core-js/modules/es.string.replace.js");
require("core-js/modules/es.string.trim.js");
var _reservedWords = _interopRequireDefault(require("reserved-words"));
var _messageformatParser = require("@sqs/messageformat-parser");
function Compiler(mf) {
  this.mf = mf;
  this.lc = null;
  this.locales = {};
  this.runtime = {};
  this.formatters = {};
}
Compiler.propname = function (key, obj) {
  if (/^[A-Z_$][0-9A-Z_$]*$/i.test(key) && ['break', 'continue', 'delete', 'else', 'for', 'function', 'if', 'in', 'new', 'return', 'this', 'typeof', 'var', 'void', 'while', 'with', 'case', 'catch', 'default', 'do', 'finally', 'instanceof', 'switch', 'throw', 'try'].indexOf(key) < 0) {
    return obj ? obj + '.' + key : key;
  }
  var jkey = JSON.stringify(key);
  return obj ? obj + '[' + jkey + ']' : jkey;
};
Compiler.funcname = function (key) {
  var fn = key.trim().replace(/\W+/g, '_');
  return _reservedWords.default.check(fn, 'es2015', true) || /^\d/.test(fn) ? '_' + fn : fn;
};
Compiler.bidiMarkText = function (text, locale) {
  function isLocaleRTL(locale) {
    var rtlLanguages = ['ar', 'ckb', 'fa', 'he', 'ks($|[^bfh])', 'lrc', 'mzn', 'pa-Arab', 'ps', 'ug', 'ur', 'uz-Arab', 'yi'];
    return new RegExp('^' + rtlLanguages.join('|^')).test(locale);
  }
  var mark = JSON.stringify(isLocaleRTL(locale) ? "\u200F" : "\u200E");
  return mark + ' + ' + text + ' + ' + mark;
};
Compiler.prototype.cases = function (token, plural) {
  var needOther = true;
  var r = token.cases.map(function (c) {
    if (c.key === 'other') {
      needOther = false;
    }
    var s = c.tokens.map(function (tok) {
      return this.token(tok, plural);
    }, this);
    return Compiler.propname(c.key) + ': ' + (s.join(' + ') || '""');
  }, this);
  if (needOther) {
    throw new Error("No 'other' form found in " + JSON.stringify(token));
  }
  return '{ ' + r.join(', ') + ' }';
};
Compiler.prototype.token = function (token, plural) {
  if (typeof token === 'string') {
    return JSON.stringify(token);
  }
  var fn,
    args = [Compiler.propname(token.arg, 'd')];
  switch (token.type) {
    case 'argument':
      return this.mf.bidiSupport ? Compiler.bidiMarkText(args[0], this.lc) : args[0];
    case 'select':
      fn = 'select';
      args.push(this.cases(token, this.mf.strictNumberSign ? null : plural));
      this.runtime.select = true;
      break;
    case 'selectordinal':
      fn = 'plural';
      args.push(0, Compiler.funcname(this.lc), this.cases(token, token), 1);
      this.locales[this.lc] = true;
      this.runtime.plural = true;
      break;
    case 'plural':
      fn = 'plural';
      args.push(token.offset || 0, Compiler.funcname(this.lc), this.cases(token, token));
      this.locales[this.lc] = true;
      this.runtime.plural = true;
      break;
    case 'function':
      if (this.mf.intlSupport && !(token.key in this.mf.fmt) && token.key in this.mf.constructor.formatters) {
        var fmt = this.mf.constructor.formatters[token.key];
        this.mf.fmt[token.key] = typeof fmt(this.mf) === 'function' ? fmt(this.mf) : fmt;
      }
      if (!this.mf.fmt[token.key]) {
        throw new Error('Formatting function ' + JSON.stringify(token.key) + ' not found!');
      }
      args.push(JSON.stringify(this.lc));
      if (token.params) {
        switch (token.params.length) {
          case 0:
            break;
          case 1:
            args.push(JSON.stringify(token.params[0]));
            break;
          default:
            args.push(JSON.stringify(token.params));
            break;
        }
      }
      fn = Compiler.propname(token.key, 'fmt');
      this.formatters[token.key] = true;
      break;
    case 'octothorpe':
      if (!plural) {
        return '"#"';
      }
      fn = 'number';
      args = [Compiler.propname(plural.arg, 'd'), JSON.stringify(plural.arg)];
      if (plural.offset) {
        args.push(plural.offset);
      }
      this.runtime.number = true;
      break;
  }
  if (!fn) {
    throw new Error('Parser error for token ' + JSON.stringify(token));
  }
  return fn + '(' + args.join(', ') + ')';
};
Compiler.prototype.compile = function (src, lc, plurals) {
  if ((0, _typeof2.default)(src) !== 'object') {
    this.lc = lc;
    var pc = plurals[lc] || {
      cardinal: [],
      ordinal: []
    };
    var r = (0, _messageformatParser.parse)(src, pc).map(function (token) {
      return this.token(token);
    }, this);
    return 'function(d) { return ' + (r.join(' + ') || '""') + '; }';
  }
  var result = {};
  for (var key in src) {
    var lcKey = plurals.hasOwnProperty(key) ? key : lc;
    result[key] = this.compile(src[key], lcKey, plurals);
  }
  return result;
};
var _default = exports.default = Compiler;
module.exports = exports.default;