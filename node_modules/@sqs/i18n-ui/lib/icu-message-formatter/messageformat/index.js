"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/es.array.join.js");
require("core-js/modules/es.object.keys.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.regexp.to-string.js");
require("core-js/modules/es.string.replace.js");
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _compiler = _interopRequireDefault(require("./compiler"));
var _runtime = _interopRequireDefault(require("./runtime"));
/** @file messageformat.js - ICU PluralFormat + SelectFormat for JavaScript
 *
 * @author Alex Sexton - @SlexAxton, Eemeli Aro
 * @version 1.0.2
 * @copyright 2012-2016 Alex Sexton, Eemeli Aro, and Contributors
 * @license To use or fork, MIT. To contribute back, JS Foundation CLA
 */
function MessageFormat(locale) {
  this.pluralFuncs = {};
  if (locale) {
    if ((0, _typeof2.default)(locale) !== 'object') {
      throw new Error('Must be initialized with plural functions');
    }
    for (var lc in locale) {
      if (locale.hasOwnProperty(lc)) {
        if (typeof locale[lc] !== 'function') {
          throw new Error('Expected function value for locale ' + JSON.stringify(lc));
        }
        this.pluralFuncs[lc] = locale[lc];
      }
    }
  }
  this.fmt = {};
  this.runtime = new _runtime.default(this);
}
MessageFormat.defaultLocale = 'en';
MessageFormat.escape = function (str) {
  return str.replace(/[#{}\\]/g, '\\$&');
};
MessageFormat.formatters = {
  number: function number(self) {
    return new Function('v,lc,p', 'return new Intl.NumberFormat(lc,\n' + "    p=='integer' ? {maximumFractionDigits:0}\n" + "  : p=='percent' ? {style:'percent'}\n" + "  : p=='currency' ? {style:'currency', currency:'" + (self.currency || 'USD') + "', minimumFractionDigits:2, maximumFractionDigits:2}\n" + '  : {}).format(v)');
  },
  date: function date(v, lc, p) {
    var o = {
      day: 'numeric',
      month: 'short',
      year: 'numeric'
    };
    switch (p) {
      case 'full':
        o.weekday = 'long';
      case 'long':
        o.month = 'long';
        break;
      case 'short':
        o.month = 'numeric';
    }
    return new Date(v).toLocaleDateString(lc, o);
  },
  time: function time(v, lc, p) {
    var o = {
      second: 'numeric',
      minute: 'numeric',
      hour: 'numeric'
    };
    switch (p) {
      case 'full':
      case 'long':
        o.timeZoneName = 'short';
        break;
      case 'short':
        delete o.second;
    }
    return new Date(v).toLocaleTimeString(lc, o);
  }
};
MessageFormat.prototype.addFormatters = function (fmt) {
  for (var name in fmt) {
    if (fmt.hasOwnProperty(name)) {
      this.fmt[name] = fmt[name];
    }
  }
  return this;
};
MessageFormat.prototype.disablePluralKeyChecks = function () {
  this.noPluralKeyChecks = true;
  for (var lc in this.pluralFuncs) {
    if (this.pluralFuncs.hasOwnProperty(lc)) {
      this.pluralFuncs[lc].cardinal = [];
      this.pluralFuncs[lc].ordinal = [];
    }
  }
  return this;
};
MessageFormat.prototype.setBiDiSupport = function (enable) {
  this.bidiSupport = !!enable || typeof enable === 'undefined';
  return this;
};
MessageFormat.prototype.setIntlSupport = function (enable) {
  this.intlSupport = !!enable || typeof enable === 'undefined';
  return this;
};
MessageFormat.prototype.setStrictNumberSign = function (enable) {
  this.strictNumberSign = !!enable || typeof enable === 'undefined';
  this.runtime.setStrictNumber(this.strictNumberSign);
  return this;
};
MessageFormat.prototype.compile = function (messages, locale) {
  function _stringify(obj, level) {
    if (!level) {
      level = 0;
    }
    if ((0, _typeof2.default)(obj) !== 'object') {
      return obj;
    }
    var o = [],
      indent = '';
    for (var i = 0; i < level; ++i) {
      indent += '  ';
    }
    for (var k in obj) {
      o.push('\n' + indent + '  ' + _compiler.default.propname(k) + ': ' + _stringify(obj[k], level + 1));
    }
    return '{' + o.join(',') + '\n' + indent + '}';
  }
  var pf;
  if (Object.keys(this.pluralFuncs).length == 0) {
    if (!locale) {
      locale = MessageFormat.defaultLocale;
    }
    pf = {};
    pf[locale] = getPluralFunc(locale, this.noPluralKeyChecks);
  } else if (locale) {
    pf = {};
    pf[locale] = this.pluralFuncs[locale];
    if (!pf[locale]) {
      throw new Error('Locale ' + JSON.stringify(locale) + 'not found in ' + JSON.stringify(this.pluralFuncs) + '!');
    }
  } else {
    pf = this.pluralFuncs;
    locale = Object.keys(pf)[0];
  }
  var compiler = new _compiler.default(this);
  var obj = compiler.compile(messages, locale, pf);
  if ((0, _typeof2.default)(messages) !== 'object') {
    var fn = new Function('number, plural, select, fmt', _compiler.default.funcname(locale), 'return ' + obj);
    var rt = this.runtime;
    return fn(rt.number, rt.plural, rt.select, this.fmt, pf[locale]);
  }
  var rtStr = this.runtime.toString(pf, compiler) + '\n';
  var objStr = _stringify(obj);
  var result = new Function(rtStr + 'return ' + objStr)();
  if (result.hasOwnProperty('toString')) {
    throw new Error('The top-level message key `toString` is reserved');
  }
  result.toString = function (global) {
    switch (global || '') {
      case 'exports':
        var o = [];
        for (var k in obj) {
          o.push(_compiler.default.propname(k, 'exports') + ' = ' + _stringify(obj[k]));
        }
        return rtStr + o.join(';\n');
      case 'module.exports':
        return rtStr + 'module.exports = ' + objStr;
      case 'export default':
        return rtStr + 'export default ' + objStr;
      case '':
        return rtStr + 'return ' + objStr;
      default:
        if (global.indexOf('.') > -1) {
          return rtStr + global + ' = ' + objStr;
        }
        return rtStr + ['(function (root, G) {', '  if (typeof define === "function" && define.amd) { define(G); }', '  else if (typeof exports === "object") { module.exports = G; }', '  else { ' + _compiler.default.propname(global, 'root') + ' = G; }', '})(this, ' + objStr + ');'].join('\n');
    }
  };
  return result;
};
var _default = exports.default = MessageFormat;
module.exports = exports.default;