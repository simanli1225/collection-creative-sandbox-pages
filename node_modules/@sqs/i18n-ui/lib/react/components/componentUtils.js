"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.propsToOpts = exports.performComponentSubs = exports.parseString = exports.shallowDifference = void 0;
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var findKey_1 = tslib_1.__importDefault(require("lodash/findKey"));
var matchTags = /\{([^}]+)\}/g;
var findClosestChild = function (str, keys) {
    var indexer = keys
        .map(function (part) { return ({ key: part, index: str.indexOf(part) }); })
        .filter(function (_a) {
        var index = _a.index;
        return index !== -1;
    })
        .sort(function (a, b) { return a.index - b.index; });
    return indexer[0] || null;
};
var shallowDifference = function (baseObj, subsetObj) {
    return Object.entries(baseObj).reduce(function (acc, _a) {
        var key = _a[0], value = _a[1];
        if (!Object.values(subsetObj).includes(value) || !Object.keys(subsetObj).includes(key))
            acc[key] = value;
        return acc;
    }, {});
};
exports.shallowDifference = shallowDifference;
var parseString = function (stringToParse) {
    if (!stringToParse) {
        return [];
    }
    var replArr = stringToParse.match(matchTags);
    if (replArr === null) {
        return [stringToParse];
    }
    var children = [];
    while (stringToParse.length) {
        var slicePoint = findClosestChild(stringToParse, replArr);
        if (slicePoint === null) {
            break;
        }
        children.push(stringToParse.slice(0, slicePoint.index));
        children.push(slicePoint.key);
        stringToParse = stringToParse.slice(slicePoint.index + (slicePoint.key ? slicePoint.key.length : 0));
    }
    children.push(stringToParse);
    return children;
};
exports.parseString = parseString;
var performComponentSubs = function (str, replacements) {
    var children = (0, exports.parseString)(str);
    var replaced = [];
    if (replacements) {
        children = children.map(function (child) {
            var replacementKey = (0, findKey_1.default)(replacements, function (_x, key) { return "{".concat(key, "}") === child; });
            if (replacementKey) {
                if (react_1.default.isValidElement(replacements[replacementKey]) &&
                    replacements[replacementKey].key === null) {
                    replaced = replaced.concat(replacementKey);
                    return react_1.default.cloneElement(replacements[replacementKey], {
                        key: replacementKey,
                    });
                }
                return replacements[replacementKey];
            }
            return child;
        });
    }
    return { children: children, replaced: replaced };
};
exports.performComponentSubs = performComponentSubs;
var propsToOpts = function (project, notes) {
    var opts = { project: project };
    if (notes) {
        Object.assign(opts, { notes: notes });
    }
    return opts;
};
exports.propsToOpts = propsToOpts;
