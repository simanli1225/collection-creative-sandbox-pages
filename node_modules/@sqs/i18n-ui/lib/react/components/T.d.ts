import React, { ReactNode } from 'react';
import PropTypes from 'prop-types';
import { HTMLAttributesTransformFunction } from './componentUtils';
import type { TranslationOptions } from '../../functions/I18nUI';
export interface TPropsInternal {
    children: ReactNode;
    project: string;
    formatter: (value: string, nonCompProps: Record<string, string>, opts: TranslationOptions) => string;
    notes?: string;
    readonly locale?: string;
    readonly htmlAttributesTransform: HTMLAttributesTransformFunction;
    [k: string]: any;
}
declare const T: {
    ({ children, formatter, locale, notes, project, htmlAttributesTransform, ...rest }: TPropsInternal): React.JSX.Element | null;
    propTypes: {
        children: PropTypes.Requireable<NonNullable<string | any[] | PropTypes.ReactElementLike | null | undefined>>;
        formatter: PropTypes.Validator<(...args: any[]) => any>;
        notes: PropTypes.Requireable<string>;
        project: PropTypes.Validator<string>;
    };
};
export default T;
