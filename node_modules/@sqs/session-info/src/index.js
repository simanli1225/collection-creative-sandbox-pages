import uuid from 'uuid/v4'
import cookie from '@sqs/cookie-cutter'

const FIRST_SESSION_KEY = 'SS_IS_FIRST_SESSION'
const HAS_LANDED_KEY = 'SS_HAS_LANDED'
const SESSION_ID_KEY = 'SS_SESSION_ID'
const ROOT_DOMAINS = [
  'squarespace.com',
  'squarespace.net',
  'sqsp.net',
]

const setCookie = ( key, value ) => {
  let domain
  ROOT_DOMAINS.forEach(( rootDomain ) => {
    if ( window.location.hostname.indexOf( rootDomain ) > -1 ) {
      domain = rootDomain
    }
  })
  domain = domain || window.location.hostname

  cookie.set( key, value, {
    domain,
    path: '/',
    secure: ( window.location.protocol.indexOf( 'https' ) > -1 ),
  })
}

export function getSessionInfo( isCookieEnabled = true ) {
  if ( typeof window === 'undefined' ) {
    return
  }

  if ( window._sessionInfo ) {
    return window._sessionInfo
  }

  try {
    const ls = localStorage.getItem( HAS_LANDED_KEY ) // This will be set if the user has had previous sessions
    const ss = sessionStorage.getItem( FIRST_SESSION_KEY )  // This will be set if the user has previously viewed other pages during the current session

    let isFirstLanding = ss === null
    let isFirstSession = ls === null || ss === 'true'
    let sessionId = cookie.get( SESSION_ID_KEY )

    localStorage.setItem( HAS_LANDED_KEY, 'true' )

    if ( isFirstLanding ) {
      if ( isFirstSession ) {
        sessionStorage.setItem( FIRST_SESSION_KEY, 'true' )
      }
      else {
        sessionStorage.setItem( FIRST_SESSION_KEY, 'false' )
      }
    }

    if ( !sessionId && isCookieEnabled ) {
      sessionId = uuid()
      setCookie( SESSION_ID_KEY, sessionId )
    }

    window._sessionInfo = { isFirstLanding, isFirstSession, sessionId }
    return window._sessionInfo
  }
  catch ( error ) {
    console.warn( 'Unable access local/session storage.' )
    return { isFirstLanding: false, isFirstSession: false }
  }
}