const path = require('path');
const fs = require('fs');
const { execSync } = require('child_process');
const { getMonorepoUtils } = require('../utils/monorepo');

/**
 * Files that are in FEBs examples but not needed
 */
const EXTRANEOUS_FILES_AND_DIRECTORIES = ['.git'];

/**
 * We have references to the creatable examples git repos. We don't want
 * to duplicate these out, but treat the FEBs examples as the source of
 * truth (otherwise risking drift).
 */
const EXAMPLES = {
  library: {
    typescript: 'git@github.com:sqsp/febs-example-library-ts.git',
    javascript: 'git@github.com:sqsp/febs-example-library.git'
  }
};

/**
 * Step through a series of invalid states, and if any are present
 * throw a corresponding informative error.
 *
 * @param {*} answers
 */
const assertValidOptionSet = (answers) => {
  const { directory, language, monorepoTool, name, projectType } = answers;
  const { getExistingProjectPackages } = getMonorepoUtils(monorepoTool);
  const existingProjects = getExistingProjectPackages ? getExistingProjectPackages(monorepoTool) : new Map();

  if (fs.existsSync(directory)) {
    throw new Error(`Package already utilizing directory name: ${name}`);
  }

  if (!EXAMPLES[projectType]) {
    throw new Error(`No templates for project type: ${projectType}`);
  }

  if (existingProjects.get(name)) {
    throw new Error(`Package with name ${name} already configured within this repository`);
  }

  if (!EXAMPLES[projectType][language]) {
    throw new Error([
      `No template for a ${language} ${projectType}.`,
      `Supported languages ${Object.keys(EXAMPLES[projectType])}`
    ].join(' '));
  }
};

/**
 * Given the provided answers, append the information to
 * the projects configured within the rush.json
 *
 * @param {Object} answers PlopJs answers object
 */
const cloneFebsExample = function (answers) {
  const { directory, projectType, language } = answers;
  assertValidOptionSet(answers);

  // We execute our git command in the parent to the directory
  // we are going to create and put our code in. We need to ensure
  // it exists.
  const cwd = path.resolve(directory, '..');
  fs.mkdirSync(cwd, { recursive: true });

  execSync(`git clone --depth 1 ${EXAMPLES[projectType][language]} ${path.basename(directory)}`, {
    stdio: [0, 1, 2],
    cwd
  });

  answers.febsExampleRepository = {
    remote: EXAMPLES[projectType][language],
    commit: execSync('git rev-parse HEAD', {
      encoding: 'utf8',
      cwd: directory
    }) || ''
  };

  execSync(`rm -rf ${EXTRANEOUS_FILES_AND_DIRECTORIES.join(' ')}`, {
    stdio: [0, 1, 2],
    cwd: directory
  });

  return 'Successfully cloned example';
};

module.exports = cloneFebsExample;
module.exports.EXAMPLES = EXAMPLES;