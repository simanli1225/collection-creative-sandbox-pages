const path = require('path');
const { getOptions } = require('@sqs/febs-utils');
const { getPackageNameWithoutSqsScope } = require('../utils');
const { MONOREPO_TOOLS } = require('../utils/monorepo');
const InquirerDirectory = require('../prompts/InquirerDirectory');

const addRushProject = require('../actions/addRushProject');
const cloneFebsExample = require('../actions/cloneFebsExample');
const updatePackageJsonMeta = require('../actions/updatePackageJsonMeta');
const updatePackageJsonScripts = require('../actions/updatePackageJsonScripts');
const updateTsConfigJson = require('../actions/updateTsConfigJson');

// What does our clone action know to clone?
// Use this to guide available answers.
const { EXAMPLES } = cloneFebsExample;

/**
 * Declare our actions as an array, with a little bit of sugar for
 * a "when", to colocate conditionals for when they shouldn't be
 * executed, based upon the user actions
 */
const AVAILABLE_ACTIONS = [
  {
    type: 'Clone example repository',
    action: cloneFebsExample
  },
  {
    type: 'Update Rush JSON',
    action: addRushProject,
    when: ({ monorepoTool }) => monorepoTool === MONOREPO_TOOLS.RUSH
  },
  {
    type: 'Specify provided package data',
    action: updatePackageJsonMeta
  },
  {
    type: 'Configure package JSON scripts',
    action: updatePackageJsonScripts,
    when: ({ monorepoTool }) => monorepoTool === MONOREPO_TOOLS.RUSH
  },
  {
    type: 'Configure Typescript',
    action: updateTsConfigJson,
    when: ({ monorepoTool, language }) => monorepoTool !== MONOREPO_TOOLS.NONE && language === 'typescript'
  },
];

/**
 * Configure and perform our steps for creating a library,
 * based on the users selected options. They are:
 *
 * (1) Clone an example repository that matches the users selections
 * (2) Update the rush.json to include our new package name, and a path to our
 * newly created project directory
 * (3) Update the name/description/version/homepage for our package,
 * otherwise it is equal to that of the cloned project in (1)
 * (4) Update config files in (1) to be reflective of a monorepos requirements
 *
 * @param {Plop} plop
 */
module.exports = function (plop) {
  plop.setPrompt('directory', InquirerDirectory);

  // Inform Plop of our action name/function pairs
  AVAILABLE_ACTIONS.forEach(({ type, action }) => plop.setActionType(type, action));

  // Run our script, prompting the user for the information we want,
  // and then run the actions above
  plop.setGenerator('create', {
    prompts: [{
      type: 'input',
      name: 'name',
      message: 'What is the name of your package (e.g. @sqs/my-package)?',
      validate: name => name.length ? true : 'A package name is required'
    }, {
      type: 'input',
      name: 'description',
      message: 'How would you describe your package (e.g. My package does X)?',
      default: '',
    }, {
      type: 'list',
      name: 'projectType',
      message: 'What project type would you like to create?',
      choices: Object.keys(EXAMPLES),
      default: 0
    }, {
      type: 'list',
      name: 'language',
      message: 'Choose a language for your package',
      choices: ({ projectType }) => Object.keys(EXAMPLES[projectType]),
      default: 0
    }, {
      type: 'list',
      name: 'monorepoTool',
      message: 'Choose a monorepo tool in this repository',
      choices: Object.values(MONOREPO_TOOLS),
      default: 0
    },
    {
      type: 'directory',
      name: 'directory',
      message: 'Parent directory for your project to be created in as [entered_directory]/[package_name]',
      basePath: process.cwd(),
      filter: (directory, { name } = getOptions(process.argv)) =>
        path.join(process.cwd(), directory, getPackageNameWithoutSqsScope(name))
    }],
    // Given the user provided answers, only run the relevant steps
    actions: (answers) =>
      AVAILABLE_ACTIONS
        .filter(({ when }) => typeof when !== 'function' || when(answers))
        .map(({ type }) => ({ type }))
  });
};