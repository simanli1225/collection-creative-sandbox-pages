package com.squarespace.reactnative.toolkit.arguments

import com.facebook.react.bridge.ReadableType
import com.google.gson.JsonArray
import com.google.gson.JsonNull
import com.google.gson.JsonObject
import org.junit.After
import org.junit.Assert.assertEquals
import org.junit.Assert.assertFalse
import org.junit.Assert.assertTrue
import org.junit.Before
import org.junit.Test

class ArgumentUtilsStructureTest {
  companion object {
    private const val NO_DELTA = 0.0
  }

  @Before
  fun setup() {
    ArgumentUtils.allowNativeDataStructures = false
  }

  @Test
  fun testToJsonObject() {

    val arg = ArgumentUtils.createMap()
      .apply {
        putPrimitive("int", 1)
        putPrimitive("double", 1.1)
        putString("string", "test")
        putString("nullString", null)
        putPrimitive("boolean", true)
        putMap("map", ArgumentUtils.createMap())
        putMap("nullMap", null)
        putArray("array", ArgumentUtils.createArray())
        putMap("nullArray", null)
        putNull("null")
      }

    val jsonObject = ArgumentUtils.toJsonObject(arg)

    jsonObject.get("int").let {
      assertTrue(it.isJsonPrimitive)
      assertEquals(1, it.asJsonPrimitive.asInt)
    }

    jsonObject.get("double").let {
      assertTrue(it.isJsonPrimitive)
      assertEquals(1.1, it.asJsonPrimitive.asDouble, NO_DELTA)
    }

    jsonObject.get("string").let {
      assertTrue(it.isJsonPrimitive)
      assertEquals("test", it.asJsonPrimitive.asString)
    }

    jsonObject.get("nullString").let {
      assertTrue(it.isJsonNull)
    }

    jsonObject.get("boolean").let {
      assertTrue(it.isJsonPrimitive)
      assertEquals(true, it.asJsonPrimitive.asBoolean)
    }

    jsonObject.get("map").let {
      assertTrue(it.isJsonObject)
      assertEquals(0, it.asJsonObject.size())
    }

    jsonObject.get("nullMap").let {
      assertTrue(it.isJsonNull)
    }

    jsonObject.get("array").let {
      assertTrue(it.isJsonArray)
      assertEquals(0, it.asJsonArray.size())
    }

    jsonObject.get("nullArray").let {
      assertTrue(it.isJsonNull)
    }

    jsonObject.get("null").let {
      assertTrue(it.isJsonNull)
    }
  }

  @Test
  fun testToJsonObjectWithLong() {
    val nativeMap = ArgumentUtils.createMap().of(
      "long" to 1420965491,
      "double" to 1420965491.1
    )
    val args = ArgumentUtils.toJsonObject(nativeMap)
    assertEquals("1420965491", args.asJsonObject.get("long").toString())
    assertEquals(1420965491.1.toString(), args.asJsonObject.get("double").toString())
  }

  @Test
  fun testFromJsonObject() {
    val arg = JsonObject().apply {
      addProperty("int", 1)
      addProperty("double", 1.1)
      addProperty("string", "test")
      addProperty("boolean", true)
      add("map", JsonObject())
      add("array", JsonArray())
      add("null", JsonNull.INSTANCE)
    }

    val map = ArgumentUtils.fromJsonObject(arg)

    map.getDynamic("int").let {
      assertEquals(ReadableType.Number, it.type)
      assertEquals(1, it.asInt())
    }

    map.getDynamic("double").let {
      assertEquals(ReadableType.Number, it.type)
      assertEquals(1.1, it.asDouble(), NO_DELTA)
    }

    map.getDynamic("string").let {
      assertEquals(ReadableType.String, it.type)
      assertEquals("test", it.asString())
    }

    map.getDynamic("boolean").let {
      assertEquals(ReadableType.Boolean, it.type)
      assertEquals(true, it.asBoolean())
    }

    map.getDynamic("map").let {
      assertEquals(ReadableType.Map, it.type)
      assertFalse(it.asMap().keySetIterator().hasNextKey())
    }

    map.getDynamic("array").let {
      assertEquals(ReadableType.Array, it.type)
      assertEquals(0, it.asArray().size())
    }

    map.getDynamic("null").let {
      assertEquals(ReadableType.Null, it.type)
    }
  }

  @Test
  fun testToJsonArray() {
    val arg = ArgumentUtils.createArray()
      .apply {
        pushPrimitive(1)
        pushPrimitive(1.1)
        pushPrimitive("test")
        pushString(null)
        pushPrimitive(true)
        pushMap(ArgumentUtils.createMap())
        pushMap(null)
        pushArray(ArgumentUtils.createArray())
        pushArray(null)
        pushNull()
      }

    val jsonObject = ArgumentUtils.toJsonArray(arg)

    jsonObject.get(0).let {
      assertTrue(it.isJsonPrimitive)
      assertEquals(1, it.asJsonPrimitive.asInt)
    }

    jsonObject.get(1).let {
      assertTrue(it.isJsonPrimitive)
      assertEquals(1.1, it.asJsonPrimitive.asDouble, NO_DELTA)
    }

    jsonObject.get(2).let {
      assertTrue(it.isJsonPrimitive)
      assertEquals("test", it.asJsonPrimitive.asString)
    }

    jsonObject.get(3).let {
      assertTrue(it.isJsonNull)
    }

    jsonObject.get(4).let {
      assertTrue(it.isJsonPrimitive)
      assertEquals(true, it.asJsonPrimitive.asBoolean)
    }

    jsonObject.get(5).let {
      assertTrue(it.isJsonObject)
      assertEquals(0, it.asJsonObject.size())
    }

    jsonObject.get(6).let {
      assertTrue(it.isJsonNull)
    }

    jsonObject.get(7).let {
      assertTrue(it.isJsonArray)
      assertEquals(0, it.asJsonArray.size())
    }

    jsonObject.get(8).let {
      assertTrue(it.isJsonNull)
    }

    jsonObject.get(9).let {
      assertTrue(it.isJsonNull)
    }
  }

  @Test
  fun testFromJsonArray() {
    val arg = JsonArray().apply {
      add(1)
      add(1.1)
      add("test")
      add(true)
      add(JsonObject())
      add(JsonArray())
      add(JsonNull.INSTANCE)
    }

    val map = ArgumentUtils.fromJsonArray(arg)

    map.getDynamic(0).let {
      assertEquals(ReadableType.Number, it.type)
      assertEquals(1, it.asInt())
    }

    map.getDynamic(1).let {
      assertEquals(ReadableType.Number, it.type)
      assertEquals(1.1, it.asDouble(), NO_DELTA)
    }

    map.getDynamic(2).let {
      assertEquals(ReadableType.String, it.type)
      assertEquals("test", it.asString())
    }

    map.getDynamic(3).let {
      assertEquals(ReadableType.Boolean, it.type)
      assertEquals(true, it.asBoolean())
    }

    map.getDynamic(4).let {
      assertEquals(ReadableType.Map, it.type)
      assertFalse(it.asMap().keySetIterator().hasNextKey())
    }

    map.getDynamic(5).let {
      assertEquals(ReadableType.Array, it.type)
      assertEquals(0, it.asArray().size())
    }

    map.getDynamic(6).let {
      assertEquals(ReadableType.Null, it.type)
    }
  }

  @Test
  fun testWritableArrayOf() {
    val array = ArgumentUtils.createArray().apply {
      pushInt(0)
      pushBoolean(true)
    }

    val map = ArgumentUtils.createMap().apply {
      putBoolean("something", false)
      putInt("someValue", 35)
    }

    val testArray = ArgumentUtils.createArray().of(
      null,
      0,
      6.5,
      true,
      "Something",
      array,
      map
    )

    assertEquals(7, testArray.size())

    testArray.getDynamic(0).let {
      assertEquals(ReadableType.Null, it.type)
    }

    assertEquals(0, testArray.getInt(1))
    assertEquals(6.5, testArray.getDouble(2), 0.0001)
    assertEquals(true, testArray.getBoolean(3))
    assertEquals("Something", testArray.getString(4))

    testArray.getDynamic(5).let {
      assertEquals(ReadableType.Array, it.type)
      assertEquals(2, it.asArray().size())
    }

    testArray.getDynamic(6).let {
      assertEquals(ReadableType.Map, it.type)
      assertEquals(2, it.asMap().toMapCorrect().size)
    }
  }

  @Test(expected = IllegalArgumentException::class)
  fun testWritableArrayOf_Exception() {
    ArgumentUtils.createArray().of(125f)
  }

  @Test
  fun testWritableMapOf() {
    val array = ArgumentUtils.createArray().apply {
      pushInt(0)
      pushBoolean(true)
    }

    val map = ArgumentUtils.createMap().apply {
      putBoolean("something", false)
      putInt("someValue", 35)
    }

    val testMap = ArgumentUtils.createMap().of(
      "0" to null,
      "1" to 0,
      "2" to 6.5,
      "3" to true,
      "4" to "Something",
      "5" to array,
      "6" to map
    )

    assertEquals(7, testMap.toMapCorrect().size)

    testMap.getDynamic("0").let {
      assertEquals(ReadableType.Null, it.type)
    }
    assertEquals(0, testMap.getInt("1"))
    assertEquals(6.5, testMap.getDouble("2"), 0.0001)
    assertEquals(true, testMap.getBoolean("3"))
    assertEquals("Something", testMap.getString("4"))

    testMap.getDynamic("5").let {
      assertEquals(ReadableType.Array, it.type)
      assertEquals(2, it.asArray().size())
    }

    testMap.getDynamic("6").let {
      assertEquals(ReadableType.Map, it.type)
      assertEquals(2, it.asMap().toMapCorrect().size)
    }
  }

  @Test(expected = IllegalArgumentException::class)
  fun testWritableMapOf_Exception() {
    ArgumentUtils.createMap().of("something" to 125f)
  }

  @After
  fun teardown() {
    ArgumentUtils.allowNativeDataStructures = true
  }
}
