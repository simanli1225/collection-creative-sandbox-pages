package com.squarespace.reactnative.toolkit.arguments

import com.google.gson.JsonPrimitive
import org.junit.Assert
import org.junit.Test

class ArgumentUtilsPrimitivesTest {

  @Test
  fun testFromJsonString() {
    val arg = ArgumentUtils.fromJsonPrimitive(JsonPrimitive("test"))
    Assert.assertTrue(arg is String)
    Assert.assertEquals("test", arg as String)
  }

  @Test
  fun testToJsonString() {
    val arg = ArgumentUtils.toJsonPrimitive("test")
    Assert.assertTrue(arg.isString)
    Assert.assertEquals("test", arg.asString)
  }

  @Test
  fun testFromJsonBool() {
    val arg = ArgumentUtils.fromJsonPrimitive(JsonPrimitive(true))
    Assert.assertTrue(arg is Boolean)
    Assert.assertTrue(arg as Boolean)
  }

  @Test
  fun testToJsonBool() {
    val arg = ArgumentUtils.toJsonPrimitive(true)
    Assert.assertTrue(arg.isBoolean)
    Assert.assertEquals(true, arg.asBoolean)
  }

  @Test
  fun testFromJsonInteger() {
    val arg = ArgumentUtils.fromJsonPrimitive(JsonPrimitive(1))
    Assert.assertTrue(arg is Int)
    Assert.assertEquals(1, arg as Int)
  }

  @Test
  fun testToJsonInteger() {
    val arg = ArgumentUtils.toJsonPrimitive(1)
    Assert.assertTrue(arg.isNumber)
    Assert.assertEquals(1, arg.asInt)
  }

  @Test
  fun testFromJsonDouble() {
    val arg = ArgumentUtils.fromJsonPrimitive(JsonPrimitive(1.1))
    Assert.assertTrue(arg is Double)
    val delta = 0.0
    Assert.assertEquals(1.1, arg as Double, delta)
  }

  @Test
  fun testToJsonLong() {
    val arg = ArgumentUtils.toJsonPrimitive(Long.MAX_VALUE.toDouble())
    Assert.assertTrue(arg.isNumber)
    Assert.assertEquals(Long.MAX_VALUE, arg.asLong)
  }

  @Test
  fun testFromJsonLong() {
    val arg = ArgumentUtils.fromJsonPrimitive(JsonPrimitive(Long.MAX_VALUE))
    Assert.assertTrue(arg is Double)
    Assert.assertEquals(Long.MAX_VALUE, (arg as Double).toLong())
  }

  @Test
  fun testToJsonDouble() {
    val arg = ArgumentUtils.toJsonPrimitive(1.1)
    Assert.assertTrue(arg.isNumber)
    val delta = 0.0
    Assert.assertEquals(1.1, arg.asDouble, delta)
  }

  @Test
  fun testFromJsonFloat() {
    val arg = ArgumentUtils.fromJsonPrimitive(JsonPrimitive(1.1F))
    Assert.assertTrue(arg is Double)
    val delta = 0.00000003
    Assert.assertEquals(1.1, arg as Double, delta)
  }

  @Test
  fun testToJsonFloat() {
    val arg = ArgumentUtils.toJsonPrimitive(1.1F)
    Assert.assertTrue(arg.isNumber)
    val delta = 0.0F
    Assert.assertEquals(1.1F, arg.asFloat, delta)
  }

  @Test
  fun testMakeWholeNumberValuesInts() {
    var map = HashMap<String, Any>().apply {
      put("float", 1.1)
      put("whole", 1.0)
      put("string", "string")
      put("nested", HashMap<String, Any>().apply {
        put("nestedFloat", 1.1)
        put("nestedWhole", 1.0f)
        put("nestedString", "string")
      })
    }

    Assert.assertEquals("1.1", map["float"].toString())
    Assert.assertEquals("1.0", map["whole"].toString())
    Assert.assertEquals("string", map["string"].toString())
    Assert.assertEquals("1.1", (map["nested"] as HashMap<String, Any>)["nestedFloat"].toString())
    Assert.assertEquals("1.0", (map["nested"] as HashMap<String, Any>)["nestedWhole"].toString())
    Assert.assertEquals("string", (map["nested"] as HashMap<String, Any>)["nestedString"].toString())

    val fixed = makeWholeNumberValuesLongs(map)

    Assert.assertEquals("1.1", fixed["float"].toString())
    Assert.assertEquals("1", fixed["whole"].toString())
    Assert.assertEquals("string", fixed["string"].toString())
    Assert.assertEquals("1.1", (fixed["nested"] as HashMap<String, Any>)["nestedFloat"].toString())
    Assert.assertEquals("1", (fixed["nested"] as HashMap<String, Any>)["nestedWhole"].toString())
    Assert.assertEquals("string", (fixed["nested"] as HashMap<String, Any>)["nestedString"].toString())
  }
}