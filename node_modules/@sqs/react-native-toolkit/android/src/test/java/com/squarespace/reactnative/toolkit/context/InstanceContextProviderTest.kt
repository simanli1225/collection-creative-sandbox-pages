package com.squarespace.reactnative.toolkit.context

import com.facebook.react.ReactInstanceManager
import com.facebook.react.bridge.ReactContext
import com.nhaarman.mockitokotlin2.any
import com.nhaarman.mockitokotlin2.argumentCaptor
import com.nhaarman.mockitokotlin2.doReturn
import com.nhaarman.mockitokotlin2.mock
import com.nhaarman.mockitokotlin2.never
import com.nhaarman.mockitokotlin2.times
import com.nhaarman.mockitokotlin2.verify
import com.nhaarman.mockitokotlin2.whenever
import org.junit.Assert.*
import org.junit.Before
import org.junit.Test

class InstanceContextProviderTest {

  private val mockInstanceManager: ReactInstanceManager = mock()

  private val mockContext: ReactContext = mock()

  private lateinit var testContextProvider: ReactContextProvider

  @Before
  fun setup() {
    testContextProvider = InstanceContextProvider(mockInstanceManager)
  }

  @Test
  fun `context used immediately if already created`() {
    doReturn(mockContext)
      .whenever(mockInstanceManager)
      .currentReactContext

    testContextProvider.withContext { it.destroy() }

    verify(mockContext, times(1))
      .destroy()

    verify(mockInstanceManager, times(1))
      .currentReactContext

    verify(mockInstanceManager, never())
      .hasStartedCreatingInitialContext()

    verify(mockInstanceManager, never())
      .addReactInstanceEventListener(any())

    verify(mockInstanceManager, never())
      .createReactContextInBackground()
  }

  @Test
  fun `listener attached when context not created`() {
    doReturn(null)
      .whenever(mockInstanceManager)
      .currentReactContext

    doReturn(true)
      .whenever(mockInstanceManager)
      .hasStartedCreatingInitialContext()

    testContextProvider.withContext { it.destroy() }

    val listener = argumentCaptor<ReactInstanceManager.ReactInstanceEventListener> {
      verify(mockInstanceManager, times(1))
        .addReactInstanceEventListener(capture())
    }.firstValue

    assertNotNull(listener)
  }

  @Test
  fun `listener called whenever context is created`() {
    doReturn(null)
      .whenever(mockInstanceManager)
      .currentReactContext

    doReturn(true)
      .whenever(mockInstanceManager)
      .hasStartedCreatingInitialContext()

    testContextProvider.withContext { it.destroy() }

    val listener = argumentCaptor<ReactInstanceManager.ReactInstanceEventListener> {
      verify(mockInstanceManager, times(1))
        .addReactInstanceEventListener(capture())
    }.firstValue

    listener.onReactContextInitialized(mockContext)

    verify(mockContext, times(1))
      .destroy()
  }

  @Test
  fun `listener detached whenever context is created`() {
    doReturn(null)
      .whenever(mockInstanceManager)
      .currentReactContext

    doReturn(true)
      .whenever(mockInstanceManager)
      .hasStartedCreatingInitialContext()

    testContextProvider.withContext { it.destroy() }

    val listener = argumentCaptor<ReactInstanceManager.ReactInstanceEventListener> {
      verify(mockInstanceManager, times(1))
        .addReactInstanceEventListener(capture())
    }.firstValue

    listener.onReactContextInitialized(mockContext)

    verify(mockInstanceManager, times(1))
      .removeReactInstanceEventListener(listener)
  }

  @Test
  fun `creates context if not created`() {
    doReturn(null)
      .whenever(mockInstanceManager)
      .currentReactContext

    doReturn(false)
      .whenever(mockInstanceManager)
      .hasStartedCreatingInitialContext()

    testContextProvider.withContext { it.destroy() }

    verify(mockInstanceManager, times(1))
      .createReactContextInBackground()
  }

  @Test
  fun `does not create context if already in progress`() {
    doReturn(null)
      .whenever(mockInstanceManager)
      .currentReactContext

    doReturn(true)
      .whenever(mockInstanceManager)
      .hasStartedCreatingInitialContext()

    testContextProvider.withContext { it.destroy() }

    verify(mockInstanceManager, never())
      .createReactContextInBackground()
  }

  @Test
  fun `context is used correctly with extension`() {
    doReturn(mockContext)
      .whenever(mockInstanceManager)
      .currentReactContext

    val contextProvider = mockInstanceManager.contextProvider

    contextProvider.withContext { it.destroy() }

    verify(mockContext, times(1))
      .destroy()
  }
}
