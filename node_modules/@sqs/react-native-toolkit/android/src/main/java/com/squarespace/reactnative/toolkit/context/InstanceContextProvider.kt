package com.squarespace.reactnative.toolkit.context

import com.facebook.react.ReactInstanceManager
import com.facebook.react.bridge.ReactContext

/**
 * Wraps an [ReactInstanceManager], giving it a chance to asynchronously create a [ReactContext] before a client
 * tries to use it.
 */
class InstanceContextProvider(private val instanceManager: ReactInstanceManager) : ReactContextProvider {
  override fun withContext(action: (ReactContext) -> Unit) {
    val context = instanceManager.currentReactContext
    if (context != null) {
      // if the context was already created, use it now
      action.invoke(context)
    } else {
      // if the context wasn't created yet, defer the action to after the context is created
      instanceManager.addReactInstanceEventListener(
        object : ReactInstanceManager.ReactInstanceEventListener {
          override fun onReactContextInitialized(context: ReactContext) {
            instanceManager.removeReactInstanceEventListener(this)
            action.invoke(context)
          }
        }
      )

      // finally, no one has requested to actually create a context, make that request now
      if (!instanceManager.hasStartedCreatingInitialContext()) {
        instanceManager.createReactContextInBackground()
      }
    }
  }
}

/**
 * Convenience function used to get a [ReactContextProvider] out of a [ReactInstanceManager].
 */
val ReactInstanceManager.contextProvider: ReactContextProvider
  get() = InstanceContextProvider(this)
