import UIKit
import React

@objc(LayoutInfoManager)
open class LayoutInfoManager: RCTEventEmitter {

    private enum Events: String {
        case layoutInfo
    }

    @objc override public static func requiresMainQueueSetup() -> Bool {
        return false
    }

    open override func supportedEvents() -> [String]! {
        return [
            Events.layoutInfo.rawValue
        ]
    }

    public override init() {
        super.init()
        setupNotifications()
    }

    deinit {
        NotificationCenter.default.removeObserver(self)
    }

    /// Provides the absolute position and size for the react view, in screen coordinates.
    /// In javascript, use the `findNodeHandle()` function to get the react tag for a component.
    @objc(layoutInfo:resolver:rejector:)
    public final func layoutInfo(for reactTag: NSNumber, resolver resolve: @escaping RCTPromiseResolveBlock, rejector reject: @escaping RCTPromiseRejectBlock) {
        reactView(for: reactTag) { [weak self] view in
            guard let info = self?.layoutInfo(view: view, reactTag: reactTag) else {
                reject("LayoutInfoManagerError", "unable to determine layout info", nil)
                return
            }
            resolve(info)
        }
    }

    /// Subscribes to changes in layout info for the react view.
    @objc(subscribe:)
    public final func subscribe(reactTag: NSNumber) {
        DispatchQueue.main.async {
            self.subscriptions.insert(reactTag)
        }
    }

    /// Cancels a previous subscription to changes.
    @objc(cancel:)
    public final func cancel(reactTag: NSNumber) {
        DispatchQueue.main.async {
            self.subscriptions.remove(reactTag)
        }
    }

    // MARK: - Private

    private var subscriptions = Set<NSNumber>()

    private func setupNotifications() {
        NotificationCenter.default.addObserver(forName: .layoutInfo, object: nil, queue: nil) { [weak self] notification in
            self?.subscriptions.forEach { reactTag in
                self?.reactView(for: reactTag) { view in
                    guard let info = self?.layoutInfo(view: view, reactTag: reactTag) else { return }
                    self?.sendEvent(withName: Events.layoutInfo.rawValue, body: info)
                }
            }
        }
    }

    private func reactView(for reactTag: NSNumber, completion: @escaping (UIView?) -> Void ) {
        DispatchQueue.main.async {
            guard let uiManager = ReactBridge.shared?.uiManager else {
                print("uiManager not found for bridge")
                completion(nil)
                return
            }

            uiManager.rootView(forReactTag: reactTag) { view in
                guard let rootView = view?.rctRootView() else {
                    print("root view not found for tag: \(reactTag)")
                    completion(nil)
                    return
                }
                completion(rootView)
            }
        }
    }

    private func layoutInfo(view: UIView?, reactTag: NSNumber) -> [String: Any]? {
        // convert the view's frame to screen coordinates
        guard let view = view, let superview = view.superview else { return nil }
        let frame = superview.convert(view.frame, to: nil)

        let info: [String: Any] = [
            "reactTag": reactTag,
            "x": frame.origin.x,
            "y": frame.origin.y,
            "width": frame.size.width,
            "height": frame.size.height
        ]
        return info
    }
}

fileprivate extension UIView {
    func rctRootView() -> UIView? {
        if self is RCTRootView {
            return self
        }
        return superview?.rctRootView()
    }
}

public extension Notification.Name {
    /// Notifies all subscribers of layout info changes.
    static let layoutInfo = Notification.Name("LayoutInfoManager.layoutInfoNotification")
}
