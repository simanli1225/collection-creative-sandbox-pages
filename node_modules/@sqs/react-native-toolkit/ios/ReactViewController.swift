import UIKit
import React

open class ReactViewController: UIViewController {
    public init() {
        super.init(nibName: nil, bundle: nil)
    }

    required public init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    open func props() -> [String: AnyObject] {
        return [:]
    }

    fileprivate func propsWithReference() -> [String: AnyObject] {
        var viewProps = props()
        viewProps["reference"] = reactComponentReferenceIdentifier as NSString
        return viewProps
    }

    /// The "reference" identifier passed into your React Native component.
    /// Used to associate your component with it's containing ReactViewController
    /// during native module communication.
    open var reactComponentReferenceIdentifier: String {
        return ObjectReference.reference(forObject: self)
    }

    public final func updateProps() {
        reactView.appProperties = propsWithReference()
    }

    open var componentName: String {
        fatalError("Subclasses must override 'componentName'")
    }

    open override func viewDidLoad() {
        super.viewDidLoad()

        guard let bridge = ReactBridge.shared else { fatalError("ReactBridge.shared is nil") }
        let rootView = RCTRootView(bridge: bridge, moduleName: componentName, initialProperties: propsWithReference())
        view.addSubview(rootView)
        rootView.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            rootView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),
            rootView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            rootView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),
            rootView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)
        ])
    }

    public final var reactView: RCTRootView {
        return view.subviews.first as! RCTRootView
    }

    /// Get the associated native module for this view controller with the given type, covers the equivalent method on ReactView
    /// - Parameter moduleClass: The type of the module this method should find.
    /// - returns: The react native module instance for the given type.
    public func module<T: AnyObject>(for moduleClass: T.Type) -> T? {
        return reactView.bridge.module(for: moduleClass) as? T
    }
}
