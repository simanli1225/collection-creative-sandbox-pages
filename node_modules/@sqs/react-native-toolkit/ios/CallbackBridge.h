#ifndef CallbackBridge_h
#define CallbackBridge_h

#import <Foundation/Foundation.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTEventEmitter.h>

// Macros to declare a NativeModule object that receives callbacks from React and
// forwards invocations to the instance of the native-wrapper for that component.
//
// SQS_CALLBACK_BRIDGE: Declares a class to handle callbacks from JS. The exported name is the same name as the class.
// SQS_CALLBACK_METHOD: Declares a callback func that maps parameters to a target class.
//
// Example:
//
//     @interface SQS_CALLBACK_BRIDGE(MyComponent)
//         SQS_CALLBACK_METHOD(onMyCallback:(nonnull NSString *)reference filename:(nonnull NSString *)filename data:(nonnull NSString *)data,
//             MyComponentViewController, @selector(onMyCallbackWithFilename:data:), (@[filename, data]));
//     @end
//
// * Creates a class and NativeComponent module called "MyComponent"
// * Declares a callback-func "onMyCallBack()" that takes 3 parameters: reference, filename, and data.
// * Declares a target callback-func on the "MyComponentViewController" class with the selector: onMyCallbackWithFilename:data:
// * Maps the parameters from the callback (filename, data) to the parameters of the target func.
//
// From Javascript:
//
//   MyComponent.onMyCallback(reference, "someFilename", "someData");
//
//   ...will invoke MyComponentViewController.onMyCallback(filename, data) in Swift automatically. 

#define SQS_CALLBACK_BRIDGE(managerName) \
managerName: RCTEventEmitter <RCTBridgeModule> \
@end \
@implementation managerName \
RCT_EXPORT_MODULE(managerName)

#define SQS_CALLBACK_METHOD(method, targetClass, targetSelector, arguments) \
_RCT_EXTERN_REMAP_METHOD(, method, NO) \
- (void)method { \
    NSObject *object = [ObjectReference nsobjectForReference:reference]; \
    targetClass *target = (targetClass *)object; \
    if (!target) { \
        return; \
    } \
     \
    NSMethodSignature *sig = [target methodSignatureForSelector:targetSelector]; \
     \
    NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:sig]; \
    invocation.selector = targetSelector; \
    invocation.target = target; \
     \
    __block int index=2; \
    [arguments enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) { \
        [invocation setArgument:&obj atIndex:index++]; \
    }]; \
     \
    [invocation invokeWithTarget:target]; \
}

#endif /* CallbackBridge_h */
