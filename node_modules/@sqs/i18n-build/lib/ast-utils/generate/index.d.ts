/**
 * This module leverages a variety of babel-types API to transform and re-create code
 * For reference see https://babeljs.io/docs/core-packages/babel-types/
 */
import * as t from '@babel/types';
import { PluralizeValue } from '../utils/hash';
/**
 * Transforms a valid T function to include the `project` and `notes` attributes.
 * Both are needed to calculate the translation hash in run-time to support the visual-context tool.
 *
 * @param {JSXElement} tElement - T Component node
 * @param {string} translation
 * @return {JSXElement} JSXElement - transformed component
 */
export declare function transformTComponent(tElement: t.JSXElement, translation: string): t.JSXElement;
/**
 * Transforms a valid T function to include the `project` and `notes` arguments.
 * Both are exclusively needed to calculate the translation hash in run-time to support the visual-context tool.
 *
 * @param {CallExpression} tExpression - function node
 * @param {string} translation
 * @return {CallExpression} t - transformed node
 */
export declare function transformTFunction(tExpression: t.CallExpression, translation: string): t.CallExpression;
/**
 * Transforms a valid Plural component to remove unnecessary run-time attributes
 *
 * @param {JSXElement} pluralElement - Plural Component node
 * @param {TranslationOrPluralValue} translation
 * @return {JSXElement} JSXElement - transformed component
 */
export declare function transformPluralComponent(pluralElement: t.JSXElement, translation: PluralizeValue): t.JSXElement;
/**
 * Transforms a valid pluralize function to remove unnecessary run-time attributes
 *
 * @param {CallExpression} pluralizeExpression - function node
 * @param {TranslationOrPluralValue} translation
 * @return {CallExpression} t - transformed node
 */
export declare function transformPluralizeFunction(pluralizeExpression: t.CallExpression, translation: PluralizeValue): t.CallExpression;
