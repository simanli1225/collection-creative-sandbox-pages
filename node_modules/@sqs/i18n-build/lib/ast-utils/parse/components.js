"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTComponent = exports.parsePluralComponent = void 0;
const tslib_1 = require("tslib");
const t = tslib_1.__importStar(require("@babel/types"));
const jsx_1 = require("../utils/jsx");
const hash_1 = require("../utils/hash");
const string_1 = require("../utils/string");
const index_1 = require("../index");
function getProject(node) {
    const project = (0, jsx_1.getAttributeValue)(node, index_1.PROJECT_TAG);
    return (0, string_1.stringlikeToStringLiteral)(project);
}
function getNotes(node) {
    const notes = (0, jsx_1.getAttributeValue)(node, index_1.NOTES_TAG);
    // Ignore null values for notes
    return notes && !t.isNullLiteral(notes.expression)
        ? (0, string_1.stringlikeToStringLiteral)(notes)
        : '';
}
function getTranslationId(node) {
    const translationId = (0, jsx_1.getAttributeValue)(node, index_1.TRANSLATION_ID_TAG);
    return translationId ? (0, string_1.stringlikeToStringLiteral)(translationId) : null;
}
function getPluralComponentValues(node) {
    const forms = (0, jsx_1.getAttributeValue)(node, 'forms');
    const expression = forms.expression;
    const properties = expression.properties;
    return properties.reduce((acc, curr) => {
        const currKey = curr.key;
        acc[currKey.name] = (0, string_1.stringlikeToStringLiteral)(curr.value);
        return acc;
    }, {});
}
function stripWhiteSpace(str) {
    return str.replace(/\s\s+/g, ' ').trim();
}
function getTComponentValue(node) {
    return node && node.children && node.children.length
        ? stripWhiteSpace(node.children.map((c) => (0, string_1.stringlikeToStringLiteral)(c)).join(' '))
        : null;
}
/**
 * Finds any invalid usage errors. If none, parses a valid Plural component
 *
 * @param {JSXElement} node
 * @returns {translationInstance}
 */
const parsePluralComponent = (node) => {
    const errors = index_1.I18nValidate.getPluralComponentErrors(node);
    if (errors.length > 0) {
        return {
            errors,
        };
    }
    const value = getPluralComponentValues(node);
    const type = `<${index_1.PLURAL_COMPONENT_NAME}>`;
    const notes = getNotes(node);
    const project = getProject(node);
    const translationId = getTranslationId(node);
    const uid = (0, hash_1.hash)(project, value, notes);
    return {
        extractionResult: {
            type,
            notes,
            project,
            translationId,
            value,
            uid,
        },
    };
};
exports.parsePluralComponent = parsePluralComponent;
/**
 * Finds any invalid usage errors. If none, parses a valid T component
 *
 * @param {JSXElement} node
 * @returns {translationInstance}
 */
const parseTComponent = (node) => {
    const errors = index_1.I18nValidate.getTComponentErrors(node);
    if (errors.length > 0) {
        return {
            errors,
        };
    }
    const type = `<${index_1.T_COMPONENT_NAME}>`;
    const value = getTComponentValue(node);
    const notes = getNotes(node);
    const project = getProject(node);
    const translationId = getTranslationId(node);
    const uid = (0, hash_1.hash)(project, value, notes);
    return {
        extractionResult: {
            type,
            notes,
            project,
            translationId,
            value,
            uid,
        },
    };
};
exports.parseTComponent = parseTComponent;
