"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hash = void 0;
exports.resolveTranslation = resolveTranslation;
const tslib_1 = require("tslib");
const md5_1 = tslib_1.__importDefault(require("md5"));
const lodash_1 = require("lodash"); // eslint-disable-line
const string_1 = require("./string");
const constants_1 = tslib_1.__importDefault(require("./constants"));
/**
 * Resolve translation value from string or object form
 *
 * @param {string|object} value string or forms object
 * @returns {string} - resolved string value
 */
function resolveToStringValue(value) {
    if (typeof value === 'string') {
        return (0, string_1.replaceNewlines)(value);
    }
    if (typeof value === 'object' && !Array.isArray(value)) {
        return Object.keys(value)
            .map((key) => constants_1.default.PLURALIZATION_KEYS.includes(key) ? `${key}:${value[key]}` : '')
            .join('');
    }
    return '';
}
/**
 * Get hash key for given project, value, notes
 *
 * @param {string} project
 * @param {string | Object} value
 * @param {string} notes
 * @returns {string} key
 */
function getHashKey(project, value, notes) {
    // In order to disambiguate between similar but different
    // translation helpers, inject words to deliminate hash
    // sections. like 'value:', 'one:', 'other:', 'notes:', etc.
    //
    // Use case:
    //    t('h', null, {project: 'hi', notes: 'ello'});
    //    t('he', null, {project: 'hi', notes: 'llo'});
    // old: hash(hihello);
    // new: hash(hivalue:henotes:ello)
    const resolvedStringValue = value ? 'value:' + resolveToStringValue(value) : '';
    const resolvedNotesValue = notes ? 'notes:' + (0, string_1.replaceNewlines)(notes) : '';
    // If project || value || notes change, the hash changes.
    const key = notes
        ? project + resolvedStringValue + resolvedNotesValue
        : project + resolvedStringValue;
    return key;
}
/**
 * Calculate and return an md5 hash, intended to be a uid for translation
 * instances. All values should be provided by the AST node (parsed via ast-utils)
 *
 * @param {string} project - the `project` declaration on a translation helper. Required.
 *
 * @param {string|object} value - type depends on the translation helper. t() and
 * <T> are strings, whereas pluralize() and <Plural> are objects with 'one' and
 * 'other' keys. Required.
 *
 * @param {string} notes - Notes provided to translators. Can be null.
 *
 * @returns (string) the md5 hash representing the unique ID for a translation instance.
 */
function getHash(project, value, notes) {
    const hashSum = getHashKey(project, value, notes);
    return (0, md5_1.default)(hashSum);
}
exports.hash = (0, lodash_1.memoize)(getHash, getHashKey);
/**
 * Resolves appropriate translation fallback logic
 * translationOverride -> uid
 *
 * @param {Object} translations - loader's translations dictionary
 * @param {string} uid - unique key for translation
 * @param {string} [translationOverride=null] unique translation id override
 * @returns {string} Translation value or empty string
 */
function resolveTranslation(translations, uid, translationOverride = null) {
    const overridden = translationOverride ? translations[translationOverride] : null;
    return overridden || translations[uid] || '';
}
