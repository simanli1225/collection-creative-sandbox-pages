export type TranslationValue = string;
export interface PluralizeValue {
    one: string;
    other: string;
    [key: string]: string;
}
export type TranslationOrPluralValue = TranslationValue | PluralizeValue;
export type UUID = string;
export type TranslationsDictionary = Record<string, TranslationOrPluralValue>;
/**
 * Calculate and return an md5 hash, intended to be a uid for translation
 * instances. All values should be provided by the AST node (parsed via ast-utils)
 *
 * @param {string} project - the `project` declaration on a translation helper. Required.
 *
 * @param {string|object} value - type depends on the translation helper. t() and
 * <T> are strings, whereas pluralize() and <Plural> are objects with 'one' and
 * 'other' keys. Required.
 *
 * @param {string} notes - Notes provided to translators. Can be null.
 *
 * @returns (string) the md5 hash representing the unique ID for a translation instance.
 */
declare function getHash(project: string, value: TranslationValue | PluralizeValue | null, notes?: string | null): string;
export declare const hash: typeof getHash & import("lodash").MemoizedFunction;
/**
 * Resolves appropriate translation fallback logic
 * translationOverride -> uid
 *
 * @param {Object} translations - loader's translations dictionary
 * @param {string} uid - unique key for translation
 * @param {string} [translationOverride=null] unique translation id override
 * @returns {string} Translation value or empty string
 */
export declare function resolveTranslation(translations: TranslationsDictionary, uid: UUID, translationOverride?: string | null): TranslationOrPluralValue;
export {};
