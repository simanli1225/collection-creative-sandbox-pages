/**
 * A module for getting errors messages when validation fails
 */
import * as t from '@babel/types';
export declare enum ERROR_MESSAGES {
    PLURALIZE_FIRST_PARAM_ERROR = "1st param (forms) should be an object like: \n{ one: 'there is a single {color} dog, other: 'there are {%n} {color} dogs'}",
    PLURALIZE_SECOND_PARAM_ERROR = "2nd param (a number that identifies which plural form to use) cannot be null.",
    PLURALIZE_NUM_PARAMS_ERROR = "pluralize() function takes exactly 4 arguments: \nformsObject, n as selectValue, substitutionsObject, and options (where your project goes). \nPlease see https://i18n-docs.squarespace.net/docs/api/i18n-ui-object#pluralize for more details.",
    PLURAL_COMPONENT_FORMS_ERROR = "Prop 'forms' is required to match single and plural translations for plural component. \nIt should have the shape \nforms={{ one: 'there is a single {color} dog', other: 'there are {%n} {color} dogs' }} ",
    PLURAL_COMPONENT_N_ERROR = "Prop 'n' is required to determine proper plural form from forms: it is the number value used to determine string output.",
    PLURAL_COMPONENT_SELF_CLOSING_ERROR = "Plural component cannot contain children. \nPlease self-close the component like so: <Plural />",
    T_COMPONENT_ERROR_VALID_CHILDREN = "<T> component should wrap valid children",
    T_COMPONENT_ERROR_SELF_CLOSING = "<T> component must contain children. Children should resolve to strings and can have substitutions. \nExample: <T project='app.greeting' name='Bob'>{'Hello {name}'}</T>",
    T_FUNCTION_FIRST_PARAM_ERROR = "1st param (value) should be a string",
    T_FUNCTION_NUM_PARAMS_ERROR = "t() function takes exactly 3 arguments: stringValue, substitutionsObject, and options.",
    T_FUNCTION_SUBS_ERROR = "Invalid substitutions object. You can either leave as null, or make sure it is formatted correctly, as an object.",
    PROJECT_ERROR_VANILLA_FUNCTION = "'project' key-value pair is invalid. It cannot be an empty string. For example, for a t() function: \nt('Okay', null, { project: 'web.campaigns' })",
    PROJECT_ERROR_JSX = "Project (which is required) is not specified.",
    PROJECT_ERROR_WS = "Project name cannot contain whitespace characters",
    NOTES_ERROR = "Notes is improperly formatted. Make sure it resolves to a string value.",
    MISSING_PROJECT_ERROR_VANILLA_FUNCTION = "'project' attribute is missing. For example, for a t() function: \nt('Okay', null, { project: 'web.campaigns' })",
    MISSING_TRANSLATION_ID = "Missing translationId"
}
/**
 * Checks for JSX component errors for <T> and <Pluralize />.
 * Returns either a string with all errors related to project, notes, and translationId
 * OR an empty string if no such errors are found.
 *
 * @param {Node} node
 * @returns {ERROR_MESSAGES[]}
 */
export declare function getJSXComponentErrors(node: t.JSXElement): ERROR_MESSAGES[];
/**
 * Checks for function errors for t() and pluralize().
 * Checks for project, notes, translationId, and properly formatted subs object.
 * If no errors, returns empty array.
 *
 * @param {object} subsObject, {Node} extractionObject
 * @returns {ERROR_MESSAGES[]}
 */
export declare function getVanillaFunctionErrors(subsObject: t.Node, extractionObject: t.Node): ERROR_MESSAGES[];
