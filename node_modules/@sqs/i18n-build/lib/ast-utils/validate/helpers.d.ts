/**
 * This module containers helpers to be used
 * by the validation functions on React and Vanilla
 * translation functions
 */
import * as t from '@babel/types';
/**
 * Determines if form properties are valid
 * Must contain two keys "one" & "two" with
 * values that resolve to strings
 *
 * @param {array} props - Property list
 * @returns {boolean}
 */
export declare function isValidFormsProperties(props: t.ObjectProperty[]): boolean;
/**
 * Determines if an expression is valid for forms
 * Must be an object expression with two properties
 *
 * @param {ObjectExpression} expression
 * @returns {boolean}
 */
export declare function isFormsObjectExpression(expression: t.ObjectExpression): boolean;
/**
 * Determines if a forms attribute is valid
 * Must be an expression container with an object expression
 *
 * @param {}
 * @returns {boolean}
 */
export declare function isValidFormsAttribute(attribute: t.JSXExpressionContainer): boolean;
/**
 * Checks if a node is a function call with
 * a specific name idenfiier
 *
 * @param {CallExpression} node
 * @param {string} name
 * @returns {boolean}
 */
export declare function isNamedFunctionCall(node: t.Node, name: string): boolean;
/**
 * Checks if a subs node is valid
 * Can be either null or object expression with non-zero properties
 *
 * @param {} subs
 * @returns {boolean}
 */
export declare function isValidSubs(subs: t.Node): boolean;
/**
 * Checks if a notes node is valid
 * Must be either undefined or resolve to string node
 *
 * @returns {boolean}
 * @param {Node} node
 */
export declare function isValidNotes(node: t.Node | boolean | null): boolean;
/**
 * Checks if a translationId node is valid
 * Must be either undefined or non-empty string literal
 *
 * @returns {boolean}
 * @param {Node} node
 */
export declare function isValidTranslationId(node: t.Node | boolean | null): boolean;
/**
 * Checks if expression is a require statement
 *
 * @param {CallExpression} expression
 * @returns {boolean}
 */
export declare function isRequireOrImportStatement(expression: t.CallExpression): boolean;
