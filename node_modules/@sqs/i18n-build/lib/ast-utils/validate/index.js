"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const t = tslib_1.__importStar(require("@babel/types"));
const helpers_1 = require("./../errors/helpers");
const string_1 = require("../utils/string");
const jsx_1 = require("../utils/jsx");
const constants_1 = tslib_1.__importDefault(require("../utils/constants"));
const { PLURAL_COMPONENT_NAME, PLURAL_COMPONENT_NUMBER_TAG, PLURALIZE_FUNCTION_NAME, FORMS_TAG, T_COMPONENT_NAME, T_FUNCTION_NAME, } = constants_1.default;
const helpers_2 = require("./helpers");
exports.default = {
    isTComponent: (node) => (0, jsx_1.isEqualElementTagName)(node, T_COMPONENT_NAME),
    isPluralComponent: (node) => (0, jsx_1.isEqualElementTagName)(node, PLURAL_COMPONENT_NAME),
    isTFunction: (node) => (0, helpers_2.isNamedFunctionCall)(node, T_FUNCTION_NAME),
    isPluralizeFunction: (node) => (0, helpers_2.isNamedFunctionCall)(node, PLURALIZE_FUNCTION_NAME),
    getTComponentErrors: (node) => {
        const errors = [];
        if (node.openingElement.selfClosing) {
            errors.push(helpers_1.ERROR_MESSAGES.T_COMPONENT_ERROR_SELF_CLOSING);
        }
        if (!(0, jsx_1.isWrapper)(node, T_COMPONENT_NAME)) {
            errors.push(helpers_1.ERROR_MESSAGES.T_COMPONENT_ERROR_VALID_CHILDREN);
        }
        return errors.concat((0, helpers_1.getJSXComponentErrors)(node));
    },
    getPluralComponentErrors: (node) => {
        const errors = [];
        const forms = (0, jsx_1.getAttributeValue)(node, FORMS_TAG);
        const numberValue = (0, jsx_1.getAttributeValue)(node, PLURAL_COMPONENT_NUMBER_TAG);
        if (!(0, helpers_2.isValidFormsAttribute)(forms)) {
            errors.push(helpers_1.ERROR_MESSAGES.PLURAL_COMPONENT_FORMS_ERROR);
        }
        if (!node.openingElement.selfClosing) {
            errors.push(helpers_1.ERROR_MESSAGES.PLURAL_COMPONENT_SELF_CLOSING_ERROR);
        }
        if (!numberValue) {
            errors.push(helpers_1.ERROR_MESSAGES.PLURAL_COMPONENT_N_ERROR);
        }
        return errors.concat((0, helpers_1.getJSXComponentErrors)(node));
    },
    getTFunctionErrors: (node) => {
        const errors = [];
        if (node.arguments.length !== 3) {
            errors.push(helpers_1.ERROR_MESSAGES.T_FUNCTION_NUM_PARAMS_ERROR);
        }
        const [value, subsObject, extractionObject] = node.arguments;
        if (!(0, string_1.resolvesToString)(value)) {
            errors.push(helpers_1.ERROR_MESSAGES.T_FUNCTION_FIRST_PARAM_ERROR);
        }
        return errors.concat((0, helpers_1.getVanillaFunctionErrors)(subsObject, extractionObject));
    },
    getPluralizeFunctionErrors: (node) => {
        const errors = [];
        if (node.arguments.length !== 4) {
            errors.push(helpers_1.ERROR_MESSAGES.PLURALIZE_NUM_PARAMS_ERROR);
        }
        const [forms, n, subsObject, extractionObject] = node.arguments;
        if (!(0, helpers_2.isFormsObjectExpression)(forms)) {
            errors.push(helpers_1.ERROR_MESSAGES.PLURALIZE_FIRST_PARAM_ERROR);
        }
        if (t.isNullLiteral(n)) {
            errors.push(helpers_1.ERROR_MESSAGES.PLURALIZE_SECOND_PARAM_ERROR);
        }
        return errors.concat((0, helpers_1.getVanillaFunctionErrors)(subsObject, extractionObject));
    },
};
