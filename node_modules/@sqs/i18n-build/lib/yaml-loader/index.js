"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = yamlLoader;
const tslib_1 = require("tslib");
const loaderUtils = tslib_1.__importStar(require("loader-utils"));
const js_yaml_1 = tslib_1.__importDefault(require("js-yaml"));
const ES_EXPORT = 'export default ';
const CJS_EXPORT = 'module.exports = ';
/**
 * Loads a yaml file as a json object. You should not often require
 * any options for this to work, and it's likely wrong to do so, even
 * if they exist.
 * @name @sqs/i18n-build/lib/yaml-loader
 * @module @sqs/i18n-build/lib/yaml-loader
 *
 * @example
 *  const { DEFAULT_FULL_SCHEMA } = require('js-yaml');
 *  module.exports = {
 *    module: {
 *      rules: [
 *        {
 *          test: /\.yaml$/,
 *          use: [
 *            {
 *              loader: '@sqs/i18n-build/lib/yaml-loader',
 *              options: {
 *                module: 'es',
 *                json: true,
 *                schema: DEFAULT_FULL_SCHEMA
 *              }
 *            }
 *          ],
 *        }
 *      ]
 *    }
 *  };
 *
 * @property {object} [options={}] config options.
 * @property {string} [options.module="cjs"] Whether to load this as a cjs or es module.
 * @property {string} [options.filename] filepath for logging errors. defaults to the resource path.
 * @property {function} [options.onWarning] callback for warnings.
 * @property {boolean} [options.json=false] compatibility with JSON.parse.
 * @property {yaml.Schema} [options.schema=DEFAULT_SAFE_SCHEMA] Specific yaml schema to apply.
 */
/**
 * @private
 * @function
 * @param {string} input The loaded yaml file
 * @return {string} The module code.
 */
function yamlLoader(input) {
    if (this.cacheable) {
        this.cacheable();
    }
    const loaderOptions = loaderUtils.getOptions(this) || {};
    if (!loaderOptions.filename && this.resourcePath) {
        loaderOptions.filename = this.resourcePath;
    }
    try {
        const yamlFile = js_yaml_1.default.safeLoad(input, loaderOptions);
        const exportStr = loaderOptions.module === 'es' ? ES_EXPORT : CJS_EXPORT;
        return exportStr + JSON.stringify(yamlFile, null, '  ') + ';';
    }
    catch (error) {
        this.emitError(error);
    }
    return null;
}
