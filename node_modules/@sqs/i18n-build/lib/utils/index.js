"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatePath = validatePath;
exports.isValidPath = isValidPath;
exports.shallowObjectEquals = shallowObjectEquals;
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
function validatePath(p, type) {
    try {
        // lstatSync will throw if p is not a path
        const stats = fs_1.default.lstatSync(p);
        const isDir = stats.isDirectory();
        const isFile = stats.isFile();
        if (!isDir && !isFile) {
            throw new Error(`ENOENT: '${p}' is not a file or directory`);
        }
        if (type === 'dir' && !isDir) {
            throw new Error(`ENOENT: '${p}' is not a directory`);
        }
        if (type === 'file' && !isFile) {
            throw new Error(`ENOENT: '${p}' is not a file`);
        }
    }
    catch (e) {
        throw e;
    }
}
function isValidPath(p, type) {
    try {
        // lstatSync will throw if p is not a path
        const stats = fs_1.default.lstatSync(p);
        const isDir = stats.isDirectory();
        const isFile = stats.isFile();
        if (!isDir && !isFile) {
            return false;
        }
        if (type === 'dir' && !isDir) {
            return false;
        }
        if (type === 'file' && !isFile) {
            return false;
        }
    }
    catch (e) {
        return false;
    }
    return true;
}
function shallowObjectEquals(a, b) {
    if (typeof a !== 'object' || typeof b !== 'object') {
        return false;
    }
    const aKeys = Object.keys(a);
    return (aKeys.length === Object.keys(b).length &&
        aKeys.every((value) => b.hasOwnProperty(value) && a[value] === b[value]));
}
