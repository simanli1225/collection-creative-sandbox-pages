"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fastest_levenshtein_1 = require("fastest-levenshtein");
// The maximum Levenshtein distance used for measuring the string similarity between project keys.
// The Levenshtein distance is measured by the amount of single-character edits required to change
// one word to another.
// For a project typo to exist, the distance must be less than or equal to this value.
const MAX_DISTANCE = 2;
/**
 * Given a project key and a list of keys, return the project key that contains a typo,
 * else undefined.
 *
 * Example (assuming a max distance of 2):
 *
 * findProjectKeyTypo("apps.App", ["app.Apps", "regional-panel"]) -> "app.Apps"
 * findProjectKeyTypo("apps.App", ["App.Apps", "regional-panel"]) -> "App.Apps"
 * findProjectKeyTypo("apps.App", ["apps.App", "regional-panel"]) -> undefined
 * findProjectKeyTypo("apps.App", ["app.Application", "regional-panel"]) -> undefined
 *
 * @param {string} projectKey the project key used to check
 * @param {string []} projectKeys the list of project keys to check against
 * @returns {string | undefined} returns the found project key that contains a typo, else undefined
 */
const findProjectKeyTypo = (projectKeyToCheck, projectKeys) => {
    for (const projectKey of projectKeys) {
        if (projectKeyToCheck === projectKey) {
            // No need to calculate distance if project keys are identical
            continue;
        }
        const dist = (0, fastest_levenshtein_1.distance)(projectKeyToCheck, projectKey);
        if (dist <= MAX_DISTANCE) {
            return projectKey;
        }
    }
    return undefined;
};
exports.default = findProjectKeyTypo;
