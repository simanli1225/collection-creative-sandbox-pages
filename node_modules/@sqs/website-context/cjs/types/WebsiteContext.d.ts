import type Flag from '@sqs/enums/Flag';
import type PageFeatures from '@sqs/enums/PageFeatures';
import type PagePermissionType from '@sqs/enums/PagePermissionType';
import type PageTypes from '@sqs/enums/PageTypes';
import type WebsiteRole from '@sqs/enums/WebsiteRole';
import type { CookieSettings, Website, WebsiteSettings, ContentCollectionPointer, RecaptchaEnterpriseContext, RollupsMap } from './';
export interface WebsiteContext {
    readonly appDomain: string;
    readonly betaFeatureFlags: Flag[];
    readonly cookieSettings: CookieSettings;
    readonly facebookApiVersion: string;
    readonly facebookAppId: string;
    readonly gmRenderKey: string;
    readonly impersonatedSession: string;
    readonly pageFeatures: PageFeatures[];
    readonly pageType: PageTypes;
    readonly showAnnouncementBar: boolean;
    readonly subscribed: boolean;
    readonly templateId: string;
    readonly templateTweakable: boolean;
    readonly templateVersion: string;
    readonly tweakJson: Record<string, string>;
    readonly websiteCloneable: boolean;
    readonly website: Website;
    readonly websiteSettings: WebsiteSettings;
    readonly recaptchaEnterpriseContext: RecaptchaEnterpriseContext;
    readonly item?: {
        title: string;
        recordType: string;
    };
    readonly itemId?: string;
    readonly product?: unknown;
    readonly collection?: {
        title: string;
        permissionType?: PagePermissionType;
    };
    readonly collectionId?: string;
    readonly templateScriptsRootUrl?: string;
    readonly tzData?: unknown;
    readonly marketplaceExperimentList?: unknown;
    readonly demoCollections?: ContentCollectionPointer[];
    readonly authenticatedAccount?: unknown;
    readonly authenticatedAccountWebsiteSettings?: unknown;
    readonly permissions?: unknown;
    readonly websiteRoles?: Set<WebsiteRole>;
    readonly accessPermissions?: unknown;
    readonly memberAccountNames?: Record<string, Record<string, string>>;
    readonly connectedAccounts?: unknown[];
    readonly rollups: RollupsMap;
    readonly i18nContext: {
        timeZoneData: {
            id: string;
            name: string;
        };
    };
}
//# sourceMappingURL=WebsiteContext.d.ts.map