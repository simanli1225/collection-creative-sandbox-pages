import type SocialServices from '@sqs/enums/SocialServices';
import type SslSetting from '@sqs/enums/SslSetting';
import type StatusConstants from '@sqs/enums/StatusConstants';
import type WebsiteProtectionType from '@sqs/enums/WebsiteProtectionType';
import type WebsiteType from '@sqs/enums/WebsiteType';
import type { Locale } from '@sqs/i18n-locale-list';
export interface Website {
    readonly id: string;
    readonly authenticUrl: string;
    readonly baseUrl: string;
    readonly identifier: string;
    readonly internalUrl: string;
    readonly primaryDomain: string;
    readonly websiteType: WebsiteType;
    readonly generatorId: string;
    readonly cloneable: boolean;
    readonly hasBeenCloneable: boolean;
    readonly developerMode: boolean;
    readonly siteStatus: {
        readonly value?: StatusConstants;
        readonly expiration?: number;
    };
    readonly language: Locale;
    readonly timeZone: string;
    readonly timeZoneOffset: number;
    readonly state: string;
    readonly siteTitle: string;
    readonly logoImageId?: string;
    readonly mobileLogoImageId?: string;
    readonly siteTagLine: string;
    readonly shareButtonOptions: Set<SocialServices>;
    readonly sslSetting: SslSetting;
    readonly isHstsEnabled: boolean;
    readonly createdOn: number;
    readonly typekitId: string;
    readonly screenshotId: string;
    readonly showOwnerLogin: boolean;
    readonly footerInjectCode: string;
    readonly headerInjectCode: string;
    readonly lockPageInjectCode: string;
    readonly extensionCounter: number;
    readonly protectionType?: WebsiteProtectionType;
}
//# sourceMappingURL=Website.d.ts.map