"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const i18n_locale_list_1 = require("@sqs/i18n-locale-list");
const utils_1 = require("../../utils");
const { defaultLocale, translationFiles: supportedLocales } = i18n_locale_list_1.locales;
const availableCPUs = utils_1.getAvailableCPUs();
const options = {
    locale: {
        choices: [...supportedLocales, 'all'],
        coerce: (specifiedLocale) => specifiedLocale.includes('all') ? supportedLocales : specifiedLocale,
        default: [defaultLocale],
        describe: 'The locales to build',
        type: 'array',
    },
    parallelBuild: {
        default: true,
        describe: 'Run multiple webpack configs in parallel.' +
            'If more than one webpack config is supplied and this options is set to' +
            '"true", each webpack build will run in a separate worker.' +
            'Otherwise, each config will be processed on the main thread one by one',
        type: 'boolean',
    },
    parallel: {
        coerce: (specifiedCPUs) => Math.min(availableCPUs, specifiedCPUs),
        default: utils_1.getDefaultCPUUtilization(),
        describe: `cpu's to use in a parallel build (${availableCPUs} available)`,
        type: 'number',
    },
    watch: {
        alias: 'w',
        default: false,
        describe: 'Run in watch mode',
        type: 'boolean',
    },
    webpackConfig: {
        coerce: (path) => path && utils_1.resolveAppPath(path),
        describe: 'Path to Webpack configuration file',
        type: 'string',
    },
    library: {
        default: false,
        describe: 'package is a library and should not be webpacked but babelified',
        type: 'boolean',
    },
    react: {
        default: true,
        describe: 'Enable JSX support',
        type: 'boolean',
    },
    typescript: {
        default: false,
        describe: 'Enable TypeScript support',
        type: 'boolean',
    },
    tslint: {
        default: false,
        describe: 'Enable TSLint during the build',
        type: 'boolean',
    },
    i18n: {
        default: true,
        describe: 'Enable i18n translation bundling during the build',
        type: 'boolean',
    },
    production: {
        default: process.env.NODE_ENV === 'production',
        describe: 'Build for a production environment',
        type: 'boolean',
    },
    graphiteGroup: {
        describe: 'Configure graphite by providing a group name for this app',
        type: 'string',
    },
    buildIgnorePatterns: {
        default: [],
        describe: 'glob patterns for files and/or directories to ignore from the build.',
        type: 'array',
    },
};
exports.default = options;
//# sourceMappingURL=build.js.map