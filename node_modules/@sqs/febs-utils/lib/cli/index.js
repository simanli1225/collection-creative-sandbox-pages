"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const febs_logger_1 = __importDefault(require("@sqs/febs-logger"));
const utils_1 = require("../utils");
const findUp = __importStar(require("find-up"));
const yargs_1 = __importDefault(require("yargs"));
yargs_1.default.option('logLevel', {
    choices: febs_logger_1.default.getLevels(),
    default: febs_logger_1.default.getDefaultLevel(),
    describe: 'Log level',
    type: 'string',
});
const pathDefaults = {
    cjsOutDir: './cjs',
    config: './config',
    dist: './dist',
    esmOutDir: './lib',
    frontendBuildCache: './node_modules/.cache/fbs',
    public: './public',
    root: '.',
    scripts: './scripts',
    src: './src',
    translations: './translations',
};
for (const [pathKey, pathDefault] of Object.entries(pathDefaults)) {
    const name = `paths.${pathKey}`;
    yargs_1.default.option(name, {
        default: pathDefault,
        describe: 'path for ' + pathKey,
        normalize: false,
        type: 'string',
    });
}
yargs_1.default.coerce('paths', paths => {
    return Object.entries(paths).reduce((newPaths, [key, value]) => {
        newPaths[key] = utils_1.resolveAppPath(value);
        return newPaths;
    }, {});
});
const configPath = findUp.sync(['febs.config.js']);
const config = configPath ? require(configPath) : {};
exports.default = yargs_1.default
    .usage('$0 <cmd> [args]')
    .scriptName('febs')
    .config(config)
    .env('FEBS')
    .commandDir('commands')
    .demandCommand(1, 1, 'you must specify a command', 'Only one command at a time');
//# sourceMappingURL=index.js.map