{"version":3,"file":"create-links.js","sourceRoot":"","sources":["../../src/scripts/create-links.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n// THIS SCRIPT IS GENERATED BY THE \"rush deploy\" COMMAND.\n\nimport os from 'node:os';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport { Async, FileSystem, Path } from '@rushstack/node-core-library';\nimport { Terminal, ConsoleTerminalProvider } from '@rushstack/terminal';\nimport type {\n  TARGET_ROOT_SCRIPT_RELATIVE_PATH_TEMPLATE_STRING as TargetRootScriptRelativePathTemplateString,\n  IExtractorMetadataJson\n} from '../PackageExtractor';\n\nconst MAX_CONCURRENCY: number = os.cpus().length * 2;\nconst CREATE_ACTION_NAME: 'create' = 'create';\nconst REMOVE_ACTION_NAME: 'remove' = 'remove';\nconst REALIZE_FILES_OPTION_NAME: '--realize-files' = '--realize-files';\n\nconst TARGET_ROOT_SCRIPT_RELATIVE_PATH: typeof TargetRootScriptRelativePathTemplateString =\n  '{TARGET_ROOT_SCRIPT_RELATIVE_PATH}';\nconst TARGET_ROOT_FOLDER: string = path.resolve(__dirname, TARGET_ROOT_SCRIPT_RELATIVE_PATH);\n\nasync function removeLinksAsync(\n  terminal: Terminal,\n  targetRootFolder: string,\n  extractorMetadataObject: IExtractorMetadataJson\n): Promise<void> {\n  await Async.forEachAsync(\n    extractorMetadataObject.links,\n    async ({ linkPath }) => {\n      const newLinkPath: string = `${targetRootFolder}/${linkPath}`;\n      terminal.writeVerboseLine(`Removing link at path \"${newLinkPath}\"`);\n      await FileSystem.deleteFileAsync(newLinkPath, { throwIfNotExists: false });\n    },\n    { concurrency: MAX_CONCURRENCY }\n  );\n}\n\nasync function createLinksAsync(\n  terminal: Terminal,\n  targetRootFolder: string,\n  extractorMetadataObject: IExtractorMetadataJson\n): Promise<void> {\n  await Async.forEachAsync(\n    extractorMetadataObject.links,\n    async (linkInfo) => {\n      // Link to the relative path for symlinks\n      const newLinkPath: string = `${targetRootFolder}/${linkInfo.linkPath}`;\n      const linkTargetPath: string = `${targetRootFolder}/${linkInfo.targetPath}`;\n\n      // Make sure the containing folder exists\n      await FileSystem.ensureFolderAsync(path.dirname(newLinkPath));\n\n      // NOTE: This logic is based on NpmLinkManager._createSymlink()\n      if (linkInfo.kind === 'folderLink') {\n        terminal.writeVerboseLine(`Creating linked folder at path \"${newLinkPath}\"`);\n        await FileSystem.createSymbolicLinkJunctionAsync({ newLinkPath, linkTargetPath });\n      } else if (linkInfo.kind === 'fileLink') {\n        // Use hardlinks for Windows and symlinks for other platforms since creating a symbolic link\n        // requires administrator permission on Windows. This may cause unexpected behaviour for consumers\n        // of the hardlinked files. If this becomes an issue, we may need to revisit this.\n        terminal.writeVerboseLine(`Creating linked file at path \"${newLinkPath}\"`);\n        if (process.platform === 'win32') {\n          await FileSystem.createHardLinkAsync({ newLinkPath, linkTargetPath });\n        } else {\n          await FileSystem.createSymbolicLinkFileAsync({ newLinkPath, linkTargetPath });\n        }\n      }\n    },\n    { concurrency: MAX_CONCURRENCY }\n  );\n}\n\nasync function realizeFilesAsync(\n  terminal: Terminal,\n  targetRootFolder: string,\n  extractorMetadataObject: IExtractorMetadataJson\n): Promise<void> {\n  await Async.forEachAsync(\n    extractorMetadataObject.files,\n    async (relativeFilePath) => {\n      const filePath: string = `${targetRootFolder}/${relativeFilePath}`;\n      const realFilePath: string = await FileSystem.getRealPathAsync(filePath);\n      if (!Path.isEqual(realFilePath, filePath)) {\n        await FileSystem.deleteFileAsync(filePath);\n\n        // Hard links seem to cause build failures on Mac, so for all other operating\n        // systems we copy files.\n        terminal.writeVerboseLine(`Realizing file at path \"${filePath}\"`);\n        if (process.platform === 'win32') {\n          await FileSystem.createHardLinkAsync({ newLinkPath: filePath, linkTargetPath: realFilePath });\n        } else {\n          await FileSystem.copyFileAsync({ sourcePath: realFilePath, destinationPath: filePath });\n        }\n      }\n    },\n    { concurrency: MAX_CONCURRENCY }\n  );\n}\n\nfunction showUsage(terminal: Terminal): void {\n  terminal.writeLine('Usage:');\n  terminal.writeLine(`  node create-links.js ${CREATE_ACTION_NAME} [${REALIZE_FILES_OPTION_NAME}]`);\n  terminal.writeLine(`  node create-links.js ${REMOVE_ACTION_NAME}`);\n  terminal.writeLine('');\n  terminal.writeLine('Creates or removes the symlinks for the output folder created by \"rush deploy\".');\n  terminal.writeLine('The link information is read from \"extractor-metadata.json\" in the same folder.');\n}\n\nasync function runAsync(terminal: Terminal): Promise<boolean> {\n  // Example: [ \"node.exe\", \"create-links.js\", \"\"create\" ]\n  const args: string[] = process.argv.slice(2);\n  if (\n    (args[0] !== CREATE_ACTION_NAME && args[0] !== REMOVE_ACTION_NAME) ||\n    (args[0] === CREATE_ACTION_NAME && args[1] && args[1] !== REALIZE_FILES_OPTION_NAME) ||\n    (args[0] === REMOVE_ACTION_NAME && args[1])\n  ) {\n    showUsage(terminal);\n    return false;\n  }\n\n  const extractorMetadataPath: string = `${__dirname}/extractor-metadata.json`;\n  if (!fs.existsSync(extractorMetadataPath)) {\n    throw new Error('Input file not found: ' + extractorMetadataPath);\n  }\n\n  const extractorMetadataJson: string = fs.readFileSync(extractorMetadataPath).toString();\n  const extractorMetadataObject: IExtractorMetadataJson = JSON.parse(extractorMetadataJson);\n\n  if (args[0] === 'create') {\n    const realizeFiles: boolean = args[1] === '--realize-files';\n    terminal.writeLine(`Creating links for extraction at path \"${TARGET_ROOT_FOLDER}\"`);\n    await removeLinksAsync(terminal, TARGET_ROOT_FOLDER, extractorMetadataObject);\n    await createLinksAsync(terminal, TARGET_ROOT_FOLDER, extractorMetadataObject);\n    if (realizeFiles) {\n      await realizeFilesAsync(terminal, TARGET_ROOT_FOLDER, extractorMetadataObject);\n    }\n  } else if (args[0] === 'remove') {\n    terminal.writeLine(`Removing links for extraction at path \"${TARGET_ROOT_FOLDER}\"`);\n    await removeLinksAsync(terminal, TARGET_ROOT_FOLDER, extractorMetadataObject);\n  }\n\n  terminal.writeLine('The operation completed successfully.');\n  return true;\n}\n\nprocess.exitCode = 1;\nconst terminal: Terminal = new Terminal(new ConsoleTerminalProvider());\nrunAsync(terminal)\n  .then((result) => {\n    process.exitCode = result ? 0 : 1;\n  })\n  .catch((error) => {\n    terminal.writeErrorLine('ERROR: ' + error);\n  });\n"]}