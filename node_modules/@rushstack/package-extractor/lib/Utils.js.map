{"version":3,"file":"Utils.js","sourceRoot":"","sources":["../src/Utils.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;AAE3D,0DAA6B;AAC7B,oEAA0D;AAE1D,SAAgB,eAAe,CAAC,eAAuB,EAAE,KAAa;IACpE,qCAAqC;IACrC,MAAM,OAAO,GACX,GAAG;QACH,eAAe;aACZ,KAAK,CAAC,GAAG,CAAC;aACV,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,wBAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;aAChC,IAAI,CAAC,IAAI,CAAC;QACb,GAAG,CAAC;IACN,gEAAgE;IAChE,MAAM,MAAM,GAAW,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;IAC3C,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC5B,CAAC;AAZD,0CAYC;AAQD;;;;;;GAMG;AACH,SAAgB,8BAA8B,CAAC,OAAkC;IAC/E,MAAM,EAAE,UAAU,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,GAAG,OAAO,CAAC;IACnE,MAAM,YAAY,GAAW,mBAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;IACzE,IAAI,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;QAClC,MAAM,IAAI,KAAK,CAAC,gBAAgB,UAAU,mBAAmB,gBAAgB,GAAG,CAAC,CAAC;IACpF,CAAC;IACD,MAAM,0BAA0B,GAAW,mBAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;IACrF,OAAO,0BAA0B,CAAC;AACpC,CAAC;AARD,wEAQC;AAED;;;;;GAKG;AACH,SAAgB,6BAA6B,CAAC,UAAkB,EAAE,QAAgB;IAChF,MAAM,YAAY,GAAW,mBAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IACjE,IAAI,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;QAClC,MAAM,IAAI,KAAK,CAAC,SAAS,QAAQ,mBAAmB,UAAU,GAAG,CAAC,CAAC;IACrE,CAAC;IACD,OAAO,wBAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;AAC7C,CAAC;AAND,sEAMC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport path from 'node:path';\nimport { Path, Text } from '@rushstack/node-core-library';\n\nexport function matchesWithStar(patternWithStar: string, input: string): boolean {\n  // Map \"@types/*\" --> \"^\\@types\\/.*$\"\n  const pattern: string =\n    '^' +\n    patternWithStar\n      .split('*')\n      .map((x) => Text.escapeRegExp(x))\n      .join('.*') +\n    '$';\n  // eslint-disable-next-line @rushstack/security/no-unsafe-regexp\n  const regExp: RegExp = new RegExp(pattern);\n  return regExp.test(input);\n}\n\nexport interface IRemapPathForTargetFolder {\n  sourcePath: string;\n  sourceRootFolder: string;\n  targetRootFolder: string;\n}\n\n/**\n * Maps a file path under the provided {@link IRemapPathForTargetFolder.sourceRootFolder} to the provided\n * {@link IExtractorOptions.targetRootFolder}.\n *\n * Example input: \"C:\\\\MyRepo\\\\libraries\\\\my-lib\"\n * Example output: \"C:\\\\MyRepo\\\\common\\\\deploy\\\\libraries\\\\my-lib\"\n */\nexport function remapSourcePathForTargetFolder(options: IRemapPathForTargetFolder): string {\n  const { sourcePath, sourceRootFolder, targetRootFolder } = options;\n  const relativePath: string = path.relative(sourceRootFolder, sourcePath);\n  if (relativePath.startsWith('..')) {\n    throw new Error(`Source path \"${sourcePath}\" is not under \"${sourceRootFolder}\"`);\n  }\n  const absolutePathInTargetFolder: string = path.join(targetRootFolder, relativePath);\n  return absolutePathInTargetFolder;\n}\n\n/**\n * Maps a file path under the provided folder path to the expected path format for the extractor metadata.\n *\n * Example input: \"C:\\\\MyRepo\\\\libraries\\\\my-lib\"\n * Example output: \"common/deploy/libraries/my-lib\"\n */\nexport function remapPathForExtractorMetadata(folderPath: string, filePath: string): string {\n  const relativePath: string = path.relative(folderPath, filePath);\n  if (relativePath.startsWith('..')) {\n    throw new Error(`Path \"${filePath}\" is not under \"${folderPath}\"`);\n  }\n  return Path.convertToSlashes(relativePath);\n}\n"]}