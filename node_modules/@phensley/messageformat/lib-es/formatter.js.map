{"version":3,"file":"formatter.js","sourceRoot":"","sources":["../src/formatter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,sBAAsB,CAAC;AAC7C,OAAO,EAAE,WAAW,EAAe,MAAM,mBAAmB,CAAC;AAC7D,OAAO,EAAE,mBAAmB,EAAE,mBAAmB,EAA+B,MAAM,UAAU,CAAC;AACjG,OAAO,EAAc,aAAa,EAA0C,MAAM,cAAc,CAAC;AACjG,OAAO,EAAE,0BAA0B,EAAuB,MAAM,wBAAwB,CAAC;AAEzF,IAAM,kBAAkB,GAAG,GAAG,CAAC;AA8C/B;;;;GAIG;AACH;IAOE,0BAAY,OAAqC;QAArC,wBAAA,EAAA,YAAqC;QAAjD,iBAOC;QANC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;QAC3C,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,IAAI,0BAA0B,EAAE,CAAC;QACvE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,IAAI,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QAC9F,IAAM,IAAI,GAAG,OAAO,CAAC,SAAS,IAAI,kBAAkB,CAAC;QACrD,IAAI,CAAC,OAAO,GAAG,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;QACjE,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAc,UAAC,CAAC,IAAK,OAAA,mBAAmB,CAAC,CAAC,EAAE,KAAI,CAAC,OAAO,EAAE,OAAO,CAAC,cAAc,CAAC,EAA5D,CAA4D,EAAE,IAAI,CAAC,CAAC;IACjH,CAAC;IAED;;;OAGG;IACH,iCAAM,GAAN,UAAO,OAAe,EAAE,UAAwB,EAAE,KAAuB;QACvE,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrC,OAAO,IAAI,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IAC5G,CAAC;IAED;;OAEG;IACH,mCAAQ,GAAR;QACE,OAAO,sCAA+B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,qBAAW,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,MAAG,CAAC;IACpH,CAAC;IACH,uBAAC;AAAD,CAAC,AA/BD,IA+BC","sourcesContent":["import { Cache } from '@phensley/cldr-utils';\nimport { pluralRules, PluralRules } from '@phensley/plurals';\nimport { buildMessageMatcher, parseMessagePattern, MessageCode, MessageMatcher } from './parser';\nimport { MessageArg, MessageEngine, MessageFormatFuncMap, MessageNamedArgs } from './evaluation';\nimport { DefaultMessageArgConverter, MessageArgConverter } from './evaluation/converter';\n\nconst DEFAULT_CACHE_SIZE = 100;\n\n/**\n * Configures a MessageFormatter instance.\n *\n * @public\n */\nexport interface MessageFormatterOptions {\n  /**\n   * Language code, e.g. \"en\"\n   */\n  language?: string;\n\n  /**\n   * Region code. e.g. \"US\"\n   */\n  region?: string;\n\n  /**\n   * The plural rules you want to use. Otherwise it will be selected\n   * using the language + region.\n   */\n  plurals?: PluralRules;\n\n  /**\n   * Functions to map raw arguments to the types required by the internal tags,\n   * 'plural', 'select', 'selectordinal'.\n   */\n  converter?: MessageArgConverter;\n\n  /**\n   * Custom formatting functions.\n   */\n  formatters?: MessageFormatFuncMap;\n\n  /**\n   * Number of parsed messages to cache internally.\n   */\n  cacheSize?: number;\n\n  /**\n   * Disables the escaping of text between matching apostrophes.\n   */\n  disableEscapes?: boolean;\n}\n\n/**\n * Convenience class that caches parsed messages.\n *\n * @public\n */\nexport class MessageFormatter {\n  private plurals: PluralRules;\n  private converter: MessageArgConverter;\n  private formatters: MessageFormatFuncMap;\n  private matcher: MessageMatcher;\n  private cache: Cache<MessageCode>;\n\n  constructor(options: MessageFormatterOptions = {}) {\n    this.formatters = options.formatters || {};\n    this.converter = options.converter || new DefaultMessageArgConverter();\n    this.plurals = options.plurals || pluralRules.get(options.language || 'root', options.region);\n    const size = options.cacheSize || DEFAULT_CACHE_SIZE;\n    this.matcher = buildMessageMatcher(Object.keys(this.formatters));\n    this.cache = new Cache<MessageCode>((s) => parseMessagePattern(s, this.matcher, options.disableEscapes), size);\n  }\n\n  /**\n   * Parse and evaluate the message against the given argument. Internally caches parsed\n   * messages for reuse.\n   */\n  format(message: string, positional: MessageArg[], named: MessageNamedArgs): string {\n    const code = this.cache.get(message);\n    return new MessageEngine(this.plurals, this.converter, this.formatters, code).evaluate(positional, named);\n  }\n\n  /**\n   * String representation of this formatter.\n   */\n  toString(): string {\n    return `MessageFormatter(formatters=${JSON.stringify(Object.keys(this.formatters))} cached=${this.cache.size()})`;\n  }\n}\n"]}