import { PluralRules } from '@phensley/plurals';
import { MessageArg, MessageFormatFuncMap, MessageNamedArgs } from './evaluation';
import { MessageArgConverter } from './evaluation/converter';
/**
 * Configures a MessageFormatter instance.
 *
 * @public
 */
export interface MessageFormatterOptions {
    /**
     * Language code, e.g. "en"
     */
    language?: string;
    /**
     * Region code. e.g. "US"
     */
    region?: string;
    /**
     * The plural rules you want to use. Otherwise it will be selected
     * using the language + region.
     */
    plurals?: PluralRules;
    /**
     * Functions to map raw arguments to the types required by the internal tags,
     * 'plural', 'select', 'selectordinal'.
     */
    converter?: MessageArgConverter;
    /**
     * Custom formatting functions.
     */
    formatters?: MessageFormatFuncMap;
    /**
     * Number of parsed messages to cache internally.
     */
    cacheSize?: number;
    /**
     * Disables the escaping of text between matching apostrophes.
     */
    disableEscapes?: boolean;
}
/**
 * Convenience class that caches parsed messages.
 *
 * @public
 */
export declare class MessageFormatter {
    private plurals;
    private converter;
    private formatters;
    private matcher;
    private cache;
    constructor(options?: MessageFormatterOptions);
    /**
     * Parse and evaluate the message against the given argument. Internally caches parsed
     * messages for reuse.
     */
    format(message: string, positional: MessageArg[], named: MessageNamedArgs): string;
    /**
     * String representation of this formatter.
     */
    toString(): string;
}
