{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/parser/types.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * Argument reference inside a message instruction.\n *\n * @public\n */\nexport type Argument = string | number;\n\n/**\n * Type of a message instruction.\n *\n * @public\n */\nexport const enum MessageOpType {\n  TEXT = 0,\n  ARG = 1,\n  PLURAL = 2,\n  SELECT = 3,\n  BLOCK = 4,\n  NOOP = 5,\n  SIMPLE = 6,\n  ARGSUB = 7,\n}\n\n/**\n * Instruction representing \"no operation\".\n *\n * @public\n */\nexport interface MessageNoopCode {\n  [0]: MessageOpType.NOOP;\n}\n\n/**\n * Instruction representing an argument.\n *\n * @public\n */\nexport interface MessageArgCode {\n  [0]: MessageOpType.ARG;\n  [1]: Argument;\n}\n\n/**\n * Instruction representing an argument substitution.\n *\n * @public\n */\nexport interface MessageArgSubCode {\n  [0]: MessageOpType.ARGSUB;\n}\n\n/**\n * Instruction representing static text.\n *\n * @public\n */\nexport interface MessageTextCode {\n  [0]: MessageOpType.TEXT;\n  [1]: string;\n}\n\n/**\n * Instruction representing a block of instructions.\n *\n * @public\n */\nexport interface MessageBlockCode {\n  [0]: MessageOpType.BLOCK;\n  [1]: MessageCode[];\n}\n\n// PLURALS\n\n/**\n * Type of a plural instruction.\n *\n * @public\n */\nexport const enum PluralNumberType {\n  CARDINAL = 0,\n  ORDINAL = 1,\n}\n\n/**\n * Instruction representing a plural formatter.\n *\n * @public\n */\nexport interface MessagePluralCode {\n  [0]: MessageOpType.PLURAL;\n  [1]: Argument[];\n  [2]: number; // offset\n  [3]: PluralNumberType; // cardinal | ordinal\n  [4]: PluralChoice[];\n}\n\n/**\n * Type of plural choice match.\n *\n * @public\n */\nexport const enum PluralChoiceType {\n  EXACT = 0,\n  CATEGORY = 1,\n}\n\n/**\n * Instruction representing a plural exact choice.\n *\n * @public\n */\nexport interface PluralExactChoice {\n  [0]: PluralChoiceType.EXACT;\n  [1]: string;\n  [2]: MessageCode;\n}\n\n/**\n * Instruction representing a plural category choice.\n *\n * @public\n */\nexport interface PluralCategoryChoice {\n  [0]: PluralChoiceType.CATEGORY;\n  [1]: string;\n  [2]: MessageCode;\n}\n\n/**\n * Type of plural choice instruction.\n *\n * @public\n */\nexport type PluralChoice = PluralExactChoice | PluralCategoryChoice;\n\n// SELECT\n\n/**\n * Instruction representing a select formatter.\n *\n * @public\n */\nexport interface MessageSelectCode {\n  [0]: MessageOpType.SELECT;\n  [1]: Argument[]; // argument to compare\n  [2]: SelectChoice[];\n}\n\n/**\n * Choice in a select formatter.\n *\n * @public\n */\nexport interface SelectChoice {\n  [0]: string; // match value\n  [1]: MessageCode; // body\n}\n\n// SIMPLE\n\n/**\n * Instruction representing a custom user-defined formatter.\n *\n * User can plugin formatters that accept 1 or more arguments\n * and zero or more options.\n *\n * @public\n */\nexport interface MessageSimpleCode {\n  [0]: MessageOpType.SIMPLE;\n  [1]: string; // name\n  [2]: Argument[];\n  [3]: string[]; // style / options\n}\n\n/**\n * Type of a message instruction.\n *\n * @public\n */\nexport type MessageCode =\n  | MessageArgCode\n  | MessageTextCode\n  | MessagePluralCode\n  | MessageBlockCode\n  | MessageSelectCode\n  | MessageSimpleCode\n  | MessageArgSubCode\n  | MessageNoopCode;\n"]}