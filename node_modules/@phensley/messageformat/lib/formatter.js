"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageFormatter = void 0;
var cldr_utils_1 = require("@phensley/cldr-utils");
var plurals_1 = require("@phensley/plurals");
var parser_1 = require("./parser");
var evaluation_1 = require("./evaluation");
var converter_1 = require("./evaluation/converter");
var DEFAULT_CACHE_SIZE = 100;
/**
 * Convenience class that caches parsed messages.
 *
 * @public
 */
var MessageFormatter = /** @class */ (function () {
    function MessageFormatter(options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this.formatters = options.formatters || {};
        this.converter = options.converter || new converter_1.DefaultMessageArgConverter();
        this.plurals = options.plurals || plurals_1.pluralRules.get(options.language || 'root', options.region);
        var size = options.cacheSize || DEFAULT_CACHE_SIZE;
        this.matcher = (0, parser_1.buildMessageMatcher)(Object.keys(this.formatters));
        this.cache = new cldr_utils_1.Cache(function (s) { return (0, parser_1.parseMessagePattern)(s, _this.matcher, options.disableEscapes); }, size);
    }
    /**
     * Parse and evaluate the message against the given argument. Internally caches parsed
     * messages for reuse.
     */
    MessageFormatter.prototype.format = function (message, positional, named) {
        var code = this.cache.get(message);
        return new evaluation_1.MessageEngine(this.plurals, this.converter, this.formatters, code).evaluate(positional, named);
    };
    /**
     * String representation of this formatter.
     */
    MessageFormatter.prototype.toString = function () {
        return "MessageFormatter(formatters=".concat(JSON.stringify(Object.keys(this.formatters)), " cached=").concat(this.cache.size(), ")");
    };
    return MessageFormatter;
}());
exports.MessageFormatter = MessageFormatter;
//# sourceMappingURL=formatter.js.map