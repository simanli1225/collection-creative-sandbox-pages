{"version":3,"file":"converter.js","sourceRoot":"","sources":["../../src/evaluation/converter.ts"],"names":[],"mappings":";;;AAAA,6CAA8D;AAa9D;;;;GAIG;AACH;IAAA;IA2CA,CAAC;IA1CC;;OAEG;IACH,6CAAQ,GAAR,UAAS,GAA2B;QAClC,QAAQ,OAAO,GAAG,EAAE,CAAC;YACnB,KAAK,QAAQ;gBACX,OAAO,GAAG,CAAC;YACb,KAAK,QAAQ,CAAC;YACd,KAAK,SAAS;gBACZ,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC;YACxB,KAAK,QAAQ;gBACX,IAAI,GAAG,YAAY,iBAAO,EAAE,CAAC;oBAC3B,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC;gBACxB,CAAC;gBACD,MAAM;QACV,CAAC;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;OAEG;IACH,8CAAS,GAAT,UAAU,GAA2B;QACnC,QAAQ,OAAO,GAAG,EAAE,CAAC;YACnB,KAAK,QAAQ;gBACX,IAAI,CAAC;oBACH,OAAO,IAAI,iBAAO,CAAC,GAAG,CAAC,CAAC;gBAC1B,CAAC;gBAAC,OAAO,CAAC,EAAE,CAAC;oBACX,OAAO,0BAAgB,CAAC,GAAG,CAAC;gBAC9B,CAAC;YACH,KAAK,QAAQ;gBACX,OAAO,IAAI,iBAAO,CAAC,GAAG,CAAC,CAAC;YAC1B,KAAK,SAAS;gBACZ,OAAO,GAAG,CAAC,CAAC,CAAC,0BAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,0BAAgB,CAAC,IAAI,CAAC;YAC5D,KAAK,QAAQ;gBACX,IAAI,GAAG,YAAY,iBAAO,EAAE,CAAC;oBAC3B,OAAO,GAAG,CAAC;gBACb,CAAC;gBACD,MAAM;QACV,CAAC;QACD,OAAO,0BAAgB,CAAC,GAAG,CAAC;IAC9B,CAAC;IACH,iCAAC;AAAD,CAAC,AA3CD,IA2CC;AA3CY,gEAA0B","sourcesContent":["import { Decimal, DecimalConstants } from '@phensley/decimal';\nimport { MessageArg } from './args';\n\n/**\n * Interface for argument converters.\n *\n * @public\n */\nexport interface MessageArgConverter {\n  asString(arg: MessageArg | undefined): string;\n  asDecimal(arg: MessageArg | undefined): Decimal;\n}\n\n/**\n * Converts arguments to string or Decimal.\n *\n * @public\n */\nexport class DefaultMessageArgConverter implements MessageArgConverter {\n  /**\n   * Convert to a string if possible.\n   */\n  asString(arg: MessageArg | undefined): string {\n    switch (typeof arg) {\n      case 'string':\n        return arg;\n      case 'number':\n      case 'boolean':\n        return arg.toString();\n      case 'object':\n        if (arg instanceof Decimal) {\n          return arg.toString();\n        }\n        break;\n    }\n    return '';\n  }\n\n  /**\n   * Convert to a Decimal if possible, or zero.\n   */\n  asDecimal(arg: MessageArg | undefined): Decimal {\n    switch (typeof arg) {\n      case 'string':\n        try {\n          return new Decimal(arg);\n        } catch (e) {\n          return DecimalConstants.NAN;\n        }\n      case 'number':\n        return new Decimal(arg);\n      case 'boolean':\n        return arg ? DecimalConstants.ONE : DecimalConstants.ZERO;\n      case 'object':\n        if (arg instanceof Decimal) {\n          return arg;\n        }\n        break;\n    }\n    return DecimalConstants.NAN;\n  }\n}\n"]}