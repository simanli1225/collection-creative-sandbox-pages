{"version":3,"file":"evaluation.js","sourceRoot":"","sources":["../../src/evaluation/evaluation.ts"],"names":[],"mappings":"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","sourcesContent":["import { Decimal, DecimalConstants } from '@phensley/decimal';\nimport { PluralRules } from '@phensley/plurals';\nimport { MessageArg, MessageArgs, MessageNamedArgs } from './args';\nimport { MessageArgConverter } from './converter';\nimport { MessageCode, MessageOpType, PluralChoiceType, PluralNumberType } from '../parser';\n\n/**\n * User-defined message formatter function.\n *\n * @public\n */\nexport type MessageFormatFunc = (args: MessageArg[], options: string[]) => string;\n\n/**\n * A map of user-defined formatter names to their implementations.\n *\n * @public\n */\nexport type MessageFormatFuncMap = { [name: string]: MessageFormatFunc };\n\nconst get = (key: number | string, args: MessageArgs): MessageArg => {\n  const res: MessageArg = args.named[key];\n  return res !== undefined ? res : typeof key === 'number' ? args.positional[key] : undefined;\n};\n\n// Save a bit of processing of common exact matches\nconst DECIMAL_EXACT: { [n: string]: Decimal } = {\n  0: DecimalConstants.ZERO,\n  1: DecimalConstants.ONE,\n  2: DecimalConstants.TWO,\n};\n\n/**\n * Evaluates a message format against a set of arguments, producing a string.\n *\n * @public\n */\nexport class MessageEngine {\n  private buf: string = '';\n\n  constructor(\n    private plurals: PluralRules,\n    private converter: MessageArgConverter,\n    private formatters: MessageFormatFuncMap,\n    private code: MessageCode,\n  ) {}\n\n  /**\n   * Evaluate the message code against the given arguments.\n   */\n  evaluate(positional: MessageArg[], named: MessageNamedArgs = {}): string {\n    return this._evaluate(this.code, { positional, named });\n  }\n\n  private _evaluate(code: MessageCode, args: MessageArgs, argsub?: MessageArg): string {\n    switch (code[0]) {\n      case MessageOpType.TEXT:\n        this.buf += code[1];\n        break;\n\n      case MessageOpType.BLOCK:\n        for (const n of code[1]) {\n          this._evaluate(n, args, argsub);\n        }\n        break;\n\n      case MessageOpType.ARG: {\n        const arg = get(code[1], args);\n        this.buf += this.converter.asString(arg);\n        break;\n      }\n\n      case MessageOpType.ARGSUB: {\n        this.buf += this.converter.asString(argsub);\n        break;\n      }\n\n      case MessageOpType.PLURAL: {\n        const arg = get(code[1][0], args);\n        const offset = code[2];\n        const num = this.converter.asDecimal(arg);\n        argsub = offset ? num.subtract(offset) : num;\n        const category =\n          code[3] === PluralNumberType.CARDINAL ? this.plurals.cardinal(argsub) : this.plurals.ordinal(argsub);\n\n        let other: MessageCode | undefined;\n        let found = 0;\n\n        loop: for (const c of code[4]) {\n          switch (c[0]) {\n            case PluralChoiceType.EXACT:\n              let v = DECIMAL_EXACT[c[1]];\n              if (v === undefined) {\n                v = this.converter.asDecimal(c[1]);\n              }\n              if (num.compare(v) === 0) {\n                this._evaluate(c[2], args, num);\n                found = 1;\n                break loop;\n              }\n              break;\n\n            case PluralChoiceType.CATEGORY:\n              if (c[1] === category) {\n                this._evaluate(c[2], args, argsub);\n                found = 1;\n                break loop;\n              } else if (c[1] === 'other') {\n                // Capture the 'other' as a fallback\n                other = c[2];\n              }\n              break;\n          }\n        }\n\n        // If no match and 'other' exists, emit that value.\n        if (!found && other) {\n          this._evaluate(other, args, argsub);\n        }\n        break;\n      }\n\n      case MessageOpType.SELECT: {\n        const arg = get(code[1][0], args);\n        const str = this.converter.asString(arg);\n\n        let other: MessageCode | undefined;\n        let found = 0;\n\n        loop: for (const c of code[2]) {\n          if (c[0] === str) {\n            this._evaluate(c[1], args, arg);\n            found = 1;\n            break loop;\n          }\n\n          if (c[0] === 'other') {\n            // Capture the 'other' as a fallback\n            other = c[1];\n          }\n        }\n\n        // If no match and 'other' exists, emit that value.\n        if (!found && other) {\n          this._evaluate(other, args, arg);\n        }\n        break;\n      }\n\n      case MessageOpType.SIMPLE: {\n        // One or more arguments and zero or more options\n        const name = code[1];\n        const f = this.formatters[name];\n        if (f !== undefined) {\n          const _args = code[2].map((k) => get(k, args));\n          this.buf += f(_args, code[3]);\n        }\n        break;\n      }\n    }\n    return this.buf;\n  }\n}\n"]}