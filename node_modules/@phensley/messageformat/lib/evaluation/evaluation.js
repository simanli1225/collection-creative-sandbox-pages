"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageEngine = void 0;
var decimal_1 = require("@phensley/decimal");
var get = function (key, args) {
    var res = args.named[key];
    return res !== undefined ? res : typeof key === 'number' ? args.positional[key] : undefined;
};
// Save a bit of processing of common exact matches
var DECIMAL_EXACT = {
    0: decimal_1.DecimalConstants.ZERO,
    1: decimal_1.DecimalConstants.ONE,
    2: decimal_1.DecimalConstants.TWO,
};
/**
 * Evaluates a message format against a set of arguments, producing a string.
 *
 * @public
 */
var MessageEngine = /** @class */ (function () {
    function MessageEngine(plurals, converter, formatters, code) {
        this.plurals = plurals;
        this.converter = converter;
        this.formatters = formatters;
        this.code = code;
        this.buf = '';
    }
    /**
     * Evaluate the message code against the given arguments.
     */
    MessageEngine.prototype.evaluate = function (positional, named) {
        if (named === void 0) { named = {}; }
        return this._evaluate(this.code, { positional: positional, named: named });
    };
    MessageEngine.prototype._evaluate = function (code, args, argsub) {
        switch (code[0]) {
            case 0 /* MessageOpType.TEXT */:
                this.buf += code[1];
                break;
            case 4 /* MessageOpType.BLOCK */:
                for (var _i = 0, _a = code[1]; _i < _a.length; _i++) {
                    var n = _a[_i];
                    this._evaluate(n, args, argsub);
                }
                break;
            case 1 /* MessageOpType.ARG */: {
                var arg = get(code[1], args);
                this.buf += this.converter.asString(arg);
                break;
            }
            case 7 /* MessageOpType.ARGSUB */: {
                this.buf += this.converter.asString(argsub);
                break;
            }
            case 2 /* MessageOpType.PLURAL */: {
                var arg = get(code[1][0], args);
                var offset = code[2];
                var num = this.converter.asDecimal(arg);
                argsub = offset ? num.subtract(offset) : num;
                var category = code[3] === 0 /* PluralNumberType.CARDINAL */ ? this.plurals.cardinal(argsub) : this.plurals.ordinal(argsub);
                var other = void 0;
                var found = 0;
                loop: for (var _b = 0, _c = code[4]; _b < _c.length; _b++) {
                    var c = _c[_b];
                    switch (c[0]) {
                        case 0 /* PluralChoiceType.EXACT */:
                            var v = DECIMAL_EXACT[c[1]];
                            if (v === undefined) {
                                v = this.converter.asDecimal(c[1]);
                            }
                            if (num.compare(v) === 0) {
                                this._evaluate(c[2], args, num);
                                found = 1;
                                break loop;
                            }
                            break;
                        case 1 /* PluralChoiceType.CATEGORY */:
                            if (c[1] === category) {
                                this._evaluate(c[2], args, argsub);
                                found = 1;
                                break loop;
                            }
                            else if (c[1] === 'other') {
                                // Capture the 'other' as a fallback
                                other = c[2];
                            }
                            break;
                    }
                }
                // If no match and 'other' exists, emit that value.
                if (!found && other) {
                    this._evaluate(other, args, argsub);
                }
                break;
            }
            case 3 /* MessageOpType.SELECT */: {
                var arg = get(code[1][0], args);
                var str = this.converter.asString(arg);
                var other = void 0;
                var found = 0;
                loop: for (var _d = 0, _e = code[2]; _d < _e.length; _d++) {
                    var c = _e[_d];
                    if (c[0] === str) {
                        this._evaluate(c[1], args, arg);
                        found = 1;
                        break loop;
                    }
                    if (c[0] === 'other') {
                        // Capture the 'other' as a fallback
                        other = c[1];
                    }
                }
                // If no match and 'other' exists, emit that value.
                if (!found && other) {
                    this._evaluate(other, args, arg);
                }
                break;
            }
            case 6 /* MessageOpType.SIMPLE */: {
                // One or more arguments and zero or more options
                var name_1 = code[1];
                var f = this.formatters[name_1];
                if (f !== undefined) {
                    var _args = code[2].map(function (k) { return get(k, args); });
                    this.buf += f(_args, code[3]);
                }
                break;
            }
        }
        return this.buf;
    };
    return MessageEngine;
}());
exports.MessageEngine = MessageEngine;
//# sourceMappingURL=evaluation.js.map