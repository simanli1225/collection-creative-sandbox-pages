{"version":3,"file":"iso8601.js","sourceRoot":"","sources":["../../../src/systems/calendars/iso8601.ts"],"names":[],"mappings":";;;;AAEA,yCAA4C;AAI5C;;;;;;GAMG;AACH;IAAiC,uCAAa;IAC5C;QACE,qDAAqD;QACrD,OAAA,MAAK,YAAC,SAAS,uEAAuD,SAAC;IACzE,CAAC;IAED,yBAAG,GAAH,UAAI,MAA2B;QACvB,IAAA,KAAW,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAA3B,EAAE,QAAA,EAAE,EAAE,QAAqB,CAAC;QACnC,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAgB,CAAC;IAC1E,CAAC;IAED,8BAAQ,GAAR;QACE,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;IAED,8BAAQ,GAAR,UAAS,MAAc;QACrB,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,CAAC,CAAC;IACjE,CAAC;IAEM,sBAAU,GAAjB,UAAkB,MAAmC,EAAE,SAAiB,EAAE,QAAgB;QACxF,OAAO,IAAI,WAAW,EAAE,CAAC,IAAI,CAAC,MAAM,CAAgB,CAAC;IACvD,CAAC;IAEM,yBAAa,GAApB,UAAqB,KAAa,EAAE,MAAc,EAAE,SAAiB,EAAE,QAAgB;QACrF,OAAO,IAAI,WAAW,EAAE,CAAC,iBAAiB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAC5D,CAAC;IAES,0BAAI,GAAd;QACE,OAAO,IAAI,WAAW,EAAE,CAAC;IAC3B,CAAC;IAES,uCAAiB,GAA3B,UAA4B,KAAa,EAAE,MAAc;QACvD,OAAO,gBAAK,CAAC,iBAAiB,YAAC,KAAK,EAAE,MAAM,CAAgB,CAAC;IAC/D,CAAC;IACH,kBAAC;AAAD,CAAC,AAlCD,CAAiC,yBAAa,GAkC7C;AAlCY,kCAAW","sourcesContent":["import { DayOfWeek } from './fields';\nimport { CalendarConstants } from './constants';\nimport { GregorianDate } from './gregorian';\nimport { TimePeriod } from './interval';\nimport { CalendarDateFields } from './types';\n\n/**\n * Gregorian calendar with ISO-8601 first day of week and minimum days in week.\n *\n * type: iso8601\n *\n * @public\n */\nexport class ISO8601Date extends GregorianDate {\n  protected constructor() {\n    // ISO-8601 dates use hard-coded firstDay and minDays\n    super('iso8601', DayOfWeek.MONDAY, CalendarConstants.ISO8601_MIN_DAYS);\n  }\n\n  add(fields: Partial<TimePeriod>): ISO8601Date {\n    const [jd, ms] = this._add(fields);\n    return this._new().initFromJD(jd, ms, this.timeZoneId()) as ISO8601Date;\n  }\n\n  toString(): string {\n    return this._toString('ISO8601');\n  }\n\n  withZone(zoneId: string): ISO8601Date {\n    return this._new().initFromUnixEpoch(this.unixEpoch(), zoneId);\n  }\n\n  static fromFields(fields: Partial<CalendarDateFields>, _firstDay: number, _minDays: number): ISO8601Date {\n    return new ISO8601Date()._set(fields) as ISO8601Date;\n  }\n\n  static fromUnixEpoch(epoch: number, zoneId: string, _firstDay: number, _minDays: number): ISO8601Date {\n    return new ISO8601Date().initFromUnixEpoch(epoch, zoneId);\n  }\n\n  protected _new(): ISO8601Date {\n    return new ISO8601Date();\n  }\n\n  protected initFromUnixEpoch(epoch: number, zoneId: string): ISO8601Date {\n    return super.initFromUnixEpoch(epoch, zoneId) as ISO8601Date;\n  }\n}\n"]}