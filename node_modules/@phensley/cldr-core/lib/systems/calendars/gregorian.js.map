{"version":3,"file":"gregorian.js","sourceRoot":"","sources":["../../../src/systems/calendars/gregorian.ts"],"names":[],"mappings":"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","sourcesContent":["import { TZ } from '@phensley/timezone';\nimport { CalendarConstants } from './constants';\nimport { CalendarDate } from './calendar';\nimport { CalendarDateFields, CalendarType } from './types';\nimport { DateField } from './fields';\nimport { floorDiv } from './utils';\nimport { TimePeriod } from './interval';\n\nconst ZEROS: Partial<CalendarDateFields> = {\n  year: 1970,\n  month: 1,\n  day: 1,\n  hour: 0,\n  minute: 0,\n  second: 0,\n  millis: 0,\n};\n\n/**\n * Construct a date using the rules of the Gregorian calendar.\n *\n * type: gregory\n *\n * @public\n */\nexport class GregorianDate extends CalendarDate {\n  static _init: void = ((): void => {\n    CalendarDate._gregorian = (d, utc, fd, md): GregorianDate =>\n      GregorianDate.fromUnixEpoch(d.unixEpoch(), utc ? 'Etc/UTC' : d.timeZoneId(), fd, md);\n  })();\n\n  protected constructor(type: CalendarType, firstDay: number, minDays: number) {\n    super(type, firstDay, minDays);\n  }\n\n  set(fields: Partial<CalendarDateFields>): GregorianDate {\n    return this._set({ ...this.fields(), ...fields });\n  }\n\n  add(fields: Partial<TimePeriod>): GregorianDate {\n    const [jd, ms] = this._add(fields);\n    return this._new().initFromJD(jd, ms, this.timeZoneId());\n  }\n\n  subtract(fields: Partial<TimePeriod>): GregorianDate {\n    return this.add(this._invertPeriod(fields));\n  }\n\n  withZone(zoneId: string): GregorianDate {\n    return this._new().initFromUnixEpoch(this.unixEpoch(), zoneId);\n  }\n\n  toString(): string {\n    return this._toString('Gregorian');\n  }\n\n  static fromFields(fields: Partial<CalendarDateFields>, firstDay: number, minDays: number): GregorianDate {\n    return new GregorianDate('gregory', firstDay, minDays)._set({ ...ZEROS, ...fields });\n  }\n\n  static fromUnixEpoch(epoch: number, zoneId: string, firstDay: number = 1, minDays: number = 1): GregorianDate {\n    return new GregorianDate('gregory', firstDay, minDays).initFromUnixEpoch(epoch, zoneId);\n  }\n\n  protected _new(): GregorianDate {\n    return new GregorianDate('gregory', this._firstDay, this._minDays);\n  }\n\n  protected initFromUnixEpoch(epoch: number, zoneId: string): GregorianDate {\n    super.initFromUnixEpoch(epoch, zoneId);\n    this.initFields(this._fields);\n    return this;\n  }\n\n  protected initFromJD(jd: number, msDay: number, zoneId: string): GregorianDate {\n    super.initFromJD(jd, msDay, zoneId);\n    this.initFields(this._fields);\n    return this;\n  }\n\n  protected initFields(f: number[]): void {\n    if (f[DateField.JULIAN_DAY] >= CalendarConstants.JD_GREGORIAN_CUTOVER) {\n      computeGregorianFields(f);\n    } else {\n      // We use Julian calendar for dates before the Gregorian cutover\n      computeJulianFields(f);\n    }\n\n    // Set era and year based on extended year\n    let year = f[DateField.EXTENDED_YEAR];\n    let era = 1; // AD\n    if (year < 1) {\n      era = 0;\n      year = 1 - year;\n    }\n    f[DateField.ERA] = era;\n    f[DateField.YEAR] = year;\n  }\n\n  protected daysInMonth(y: number, m: number): number {\n    return MONTH_COUNT[m][leapGregorian(y) ? 1 : 0];\n  }\n\n  protected daysInYear(y: number): number {\n    return leapGregorian(y) ? 366 : 365;\n  }\n\n  protected monthCount(): number {\n    return 12;\n  }\n\n  protected monthStart(eyear: number, month: number, _useMonth: boolean): number {\n    let isLeap = (eyear | 0) % 4 === 0;\n    const y = eyear - 1;\n    let jd = 365 * y + floor(y / 4) + (CalendarConstants.JD_GREGORIAN_EPOCH - 3);\n    if (eyear >= CalendarConstants.JD_GREGORIAN_CUTOVER_YEAR) {\n      isLeap = isLeap && (eyear % 100 !== 0 || eyear % 400 === 0);\n      jd += floor(y / 400) - floor(y / 100) + 2;\n    }\n    if (month !== 0) {\n      const mc = MONTH_COUNT;\n      const m = floor(month);\n      const d = month - m;\n      jd += mc[m][isLeap ? 3 : 2];\n\n      // TODO: we never reach the block below since all internal uses of monthStart\n      // pass in an integer\n\n      // Check if there is a fractional month part, and if so add the number\n      // of the days in the next month multiplied by the fraction\n      /* istanbul ignore if */\n      if (d !== 0) {\n        // note: the 'month' parameter must always be <= # months in the calendar\n        // year, so <= 12 in this case.\n        jd += d * mc[m + 1][isLeap ? 1 : 0];\n      }\n    }\n    return jd;\n  }\n\n  /**\n   * Convert integer (year, month, day) to Julian day.\n   */\n  protected _ymdToJD(y: number, m: number, d: number): number {\n    y |= 0;\n    const leap = leapGregorian(y);\n    const mc = this.monthCount();\n    m = m < 1 ? 1 : m > mc ? mc : m;\n    const dc = MONTH_COUNT[m - 1][leap ? 1 : 0];\n    d = d < 1 ? 1 : d > dc ? dc : d;\n\n    // Adjustment due to Gregorian calendar switch on Oct 4, 1582 -> Oct 15, 1582\n    if (\n      y < CalendarConstants.JD_GREGORIAN_CUTOVER_YEAR ||\n      (y === CalendarConstants.JD_GREGORIAN_CUTOVER_YEAR &&\n        (m < CalendarConstants.JD_GREGORIAN_CUTOVER_MONTH ||\n          (m === CalendarConstants.JD_GREGORIAN_CUTOVER_MONTH && d < CalendarConstants.JD_GREGORIAN_CUTOVER_DAY)))\n    ) {\n      if (m < 3) {\n        m += 12;\n        y -= 1;\n      }\n      return 1721117 + floor((1461 * y) / 4) + floor((153 * m - 457) / 5) + d;\n    }\n\n    const a = ((14 - m) / 12) | 0;\n    y = y + 4800 - a;\n    m = m + 12 * a - 3;\n    return d + (((153 * m + 2) / 5) | 0) + 365 * y + ((y / 4) | 0) - ((y / 100) | 0) + ((y / 400) | 0) - 32045;\n  }\n\n  protected _set(f: Partial<CalendarDateFields>): GregorianDate {\n    const jd = this._ymdToJD(f.year!, f.month!, f.day!);\n    const ms = this._timeToMs(f);\n    const epoch = unixEpochFromJD(jd, ms);\n    const zoneId = f.zoneId || this.timeZoneId();\n    // Find UTC epoch for wall clock time in the requested timezone\n    const r = TZ.fromWall(zoneId, epoch);\n    return this._new().initFromUnixEpoch(r ? r[0] : epoch, zoneId);\n  }\n}\n\nconst floor = Math.floor;\n\nconst MONTH_COUNT = [\n  [31, 31, 0, 0], // Jan\n  [28, 29, 31, 31], // Feb\n  [31, 31, 59, 60], // Mar\n  [30, 30, 90, 91], // Apr\n  [31, 31, 120, 121], // May\n  [30, 30, 151, 152], // Jun\n  [31, 31, 181, 182], // Jul\n  [31, 31, 212, 213], // Aug\n  [30, 30, 243, 244], // Sep\n  [31, 31, 273, 274], // Oct\n  [30, 30, 304, 305], // Nov\n  [31, 31, 334, 335], // Dec\n];\n\n/**\n * Compute fields for dates on or after the Gregorian cutover.\n */\nconst computeGregorianFields = (f: number[]): void => {\n  const ged = f[DateField.JULIAN_DAY] - CalendarConstants.JD_GREGORIAN_EPOCH;\n  const rem: [number] = [0];\n  const n400 = floorDiv(ged, 146097, rem);\n  const n100 = floorDiv(rem[0], 36524, rem);\n  const n4 = floorDiv(rem[0], 1461, rem);\n  const n1 = floorDiv(rem[0], 365, rem);\n\n  let year = 400 * n400 + 100 * n100 + 4 * n4 + n1;\n  let doy = rem[0]; // 0-based day of year\n  if (n100 === 4 || n1 === 4) {\n    doy = 365;\n  } else {\n    ++year;\n  }\n  const isLeap = leapGregorian(year);\n  let corr = 0;\n  const mar1 = isLeap ? 60 : 59;\n  if (doy >= mar1) {\n    corr = isLeap ? 1 : 2;\n  }\n  const month = floor((12 * (doy + corr) + 6) / 367);\n  const dom = doy - MONTH_COUNT[month][isLeap ? 3 : 2] + 1;\n\n  f[DateField.EXTENDED_YEAR] = year;\n  f[DateField.MONTH] = month + 1;\n  f[DateField.DAY_OF_MONTH] = dom;\n  f[DateField.DAY_OF_YEAR] = doy + 1;\n  f[DateField.IS_LEAP] = isLeap ? 1 : 0;\n};\n\n/**\n * Compute fields for dates before the Gregorian cutover using the proleptic\n * Julian calendar. Any Gregorian date before October 15, 1582 is really a\n * date on the proleptic Julian calendar, with leap years every 4 years.\n */\nconst computeJulianFields = (f: number[]): void => {\n  const jed = f[DateField.JULIAN_DAY] - (CalendarConstants.JD_GREGORIAN_EPOCH - 2);\n  const eyear = floor((4 * jed + 1464) / 1461);\n  const jan1 = 365 * (eyear - 1) + floor((eyear - 1) / 4);\n  const doy = jed - jan1;\n  const isLeap = eyear % 4 === 0;\n  let corr = 0;\n  const mar1 = isLeap ? 60 : 59;\n  if (doy >= mar1) {\n    corr = isLeap ? 1 : 2;\n  }\n\n  const month = floor((12 * (doy + corr) + 6) / 367);\n  const dom = doy - MONTH_COUNT[month][isLeap ? 3 : 2] + 1;\n\n  f[DateField.EXTENDED_YEAR] = eyear;\n  f[DateField.MONTH] = month + 1;\n  f[DateField.DAY_OF_MONTH] = dom;\n  f[DateField.DAY_OF_YEAR] = doy + 1;\n  f[DateField.IS_LEAP] = isLeap ? 1 : 0;\n};\n\n/**\n * Return true if the given year is a leap year in the Gregorian calendar; false otherwise.\n * Note that we switch to the Julian calendar at the Gregorian cutover year.\n */\nconst leapGregorian = (y: number): boolean => {\n  let r = y % 4 === 0;\n  if (y >= CalendarConstants.JD_GREGORIAN_CUTOVER_YEAR) {\n    r = r && (y % 100 !== 0 || y % 400 === 0);\n  }\n  return r;\n};\n\n/**\n * Given a Julian day and local milliseconds (in UTC), return the Unix\n * epoch milliseconds UTC.\n */\nconst unixEpochFromJD = (jd: number, msDay: number): number => {\n  const days = jd - CalendarConstants.JD_UNIX_EPOCH;\n  return days * CalendarConstants.ONE_DAY_MS + Math.round(msDay);\n};\n"]}