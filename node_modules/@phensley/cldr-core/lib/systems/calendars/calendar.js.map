{"version":3,"file":"calendar.js","sourceRoot":"","sources":["../../../src/systems/calendars/calendar.ts"],"names":[],"mappings":"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","sourcesContent":["import { DateTimePatternField, DateTimePatternFieldType, MetaZoneType } from '@phensley/cldr-types';\n\nimport { dateFields, DateField, DayOfWeek } from './fields';\nimport { CalendarConstants } from './constants';\nimport { substituteZoneAlias, zoneInfoFromUTC, ZoneInfo } from './timezone';\nimport { INTERNAL_NUMBERING } from '../numbering';\nimport { timePeriodFieldFlags, TimePeriod, TimePeriodField, TimePeriodFieldFlag, TIME_PERIOD_FIELDS } from './interval';\nimport { CalendarDateFields, CalendarType } from './types';\n\nconst zeropad = (n: number, w: number): string => INTERNAL_NUMBERING.formatString(n, false, w);\n\n/**\n * Implementation order, based on calendar preference data and ease of implementation.\n * https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/calendarPreferenceData.json\n *\n * Complete:\n *  gregorian           - widely used worldwide\n *  persian             - primary in AF, IR\n *  japanese            - secondary in JP, based on gregorian\n *  iso8601             - based on gregorian\n *  buddhist            - primary in TH\n *\n * Next:\n *  islamic-umalqura    - primary in SA\n *  chinese             - secondary in CN, CX, HK, MO, SG, TW\n *  islamic             - secondary in many locales\n *  dangi               - secondary in KO, based on chinese\n *\n * Rest TBD\n *\n * Calendar calculations are compatible with those in the Unicode ICU project.\n */\n\n// Indicates a null field to support computing on demand\nconst NULL = Number.MAX_SAFE_INTEGER;\n\nconst { abs, floor } = Math;\n\nconst splitfrac = (n: number | undefined): [number, number] => {\n  n = n || 0;\n  const t = abs(n);\n  const sign = n < 0 ? -1 : 1;\n  const r = t | 0;\n  return [sign * r, sign * (t - r)];\n};\n\nconst relativeField = (p: TimePeriod): TimePeriodField => {\n  for (const f of TIME_PERIOD_FIELDS) {\n    if (p[f]) {\n      return f;\n    }\n  }\n  return 'millis';\n};\n\n/**\n * @internal\n */\nexport type CalendarFromUnixEpoch<T> = (epoch: number, zoneId: string, firstDay: number, minDays: number) => T;\n\nconst differenceFields: [number, DateTimePatternFieldType][] = [\n  [DateField.YEAR, DateTimePatternField.YEAR],\n  [DateField.MONTH, DateTimePatternField.MONTH],\n  [DateField.DAY_OF_MONTH, DateTimePatternField.DAY],\n  [DateField.AM_PM, DateTimePatternField.DAYPERIOD],\n  [DateField.HOUR, DateTimePatternField.HOUR],\n  [DateField.MINUTE, DateTimePatternField.MINUTE],\n];\n\n/**\n * Base class for dates in supported calendars.\n *\n * @public\n */\nexport abstract class CalendarDate {\n  // Forward reference for casting to Gregorian date\n  protected static _gregorian: (d: CalendarDate, utc: boolean, firstDate: number, minDays: number) => CalendarDate;\n  protected _fields: number[] = dateFields();\n  protected _zoneInfo!: ZoneInfo;\n\n  /**\n   * Minimal fields required to construct any calendar date.\n   */\n  protected constructor(\n    protected readonly _type: CalendarType,\n    protected readonly _firstDay: number,\n    protected readonly _minDays: number,\n  ) {\n    // Compute week fields on demand.\n    this._fields[DateField.WEEK_OF_YEAR] = NULL;\n    this._fields[DateField.YEAR_WOY] = NULL;\n    this._zoneInfo = zoneInfoFromUTC('UTC', 0);\n  }\n\n  /**\n   * Calendar type for this date, e.g. 'gregory' for Gregorian.\n   */\n  type(): CalendarType {\n    return this._type;\n  }\n\n  /**\n   * Returns a formatted ISO-8601 string of the date in UTC. Note that this\n   * always returns a date in the Gregorian calendar.\n   */\n  toISOString(): string {\n    return this._toISOString(this, true);\n  }\n\n  /**\n   * Returns a formatted ISO 8601 string of the date with local timezone offset.\n   * Note that this always returns a date in the Gregorian calendar.\n   */\n  toLocalISOString(): string {\n    return this._toISOString(this, false);\n  }\n\n  /**\n   * Unix epoch with no timezone offset.\n   */\n  unixEpoch(): number {\n    return this._fields[DateField.LOCAL_MILLIS] - this._zoneInfo.offset;\n  }\n\n  firstDayOfWeek(): number {\n    return this._firstDay;\n  }\n\n  minDaysInFirstWeek(): number {\n    return this._minDays;\n  }\n\n  /**\n   * Returns a floating point number representing the real Julian Day, UTC.\n   */\n  julianDay(): number {\n    const ms = (this._fields[DateField.MILLIS_IN_DAY] - this._zoneInfo.offset) / CalendarConstants.ONE_DAY_MS;\n    return this._fields[DateField.JULIAN_DAY] - 0.5 + ms;\n  }\n\n  /**\n   * CLDR's modified Julian day used as the basis for all date calculations.\n   */\n  modifiedJulianDay(): number {\n    return this._fields[DateField.JULIAN_DAY];\n  }\n\n  era(): number {\n    return this._fields[DateField.ERA];\n  }\n\n  extendedYear(): number {\n    return this._fields[DateField.EXTENDED_YEAR];\n  }\n\n  year(): number {\n    return this._fields[DateField.YEAR];\n  }\n\n  relatedYear(): number {\n    return this._fields[DateField.EXTENDED_YEAR];\n  }\n\n  yearOfWeekOfYear(): number {\n    this.computeWeekFields();\n    return this._fields[DateField.YEAR_WOY];\n  }\n\n  weekOfYear(): number {\n    this.computeWeekFields();\n    return this._fields[DateField.WEEK_OF_YEAR];\n  }\n\n  yearOfWeekOfYearISO(): number {\n    this.computeWeekFields();\n    return this._fields[DateField.ISO_YEAR_WOY];\n  }\n\n  weekOfYearISO(): number {\n    this.computeWeekFields();\n    return this._fields[DateField.ISO_WEEK_OF_YEAR];\n  }\n\n  /**\n   * Ordinal month, one-based, e.g. Gregorian JANUARY = 1.\n   */\n  month(): number {\n    return this._fields[DateField.MONTH];\n  }\n\n  /**\n   * Returns the week of the month computed using the locale's 'first day\n   * of week' and 'minimal days in first week' where applicable.\n   *\n   * For example, for the United States, weeks start on Sunday.\n   * Saturday 9/1/2018 would be in week 1, and Sunday 9/2/2018 would\n   * begin week 2.\n   *\n   *         September\n   *   Su Mo Tu We Th Fr Sa\n   *                      1\n   *    2  3  4  5  6  7  8\n   *    9 10 11 12 13 14 15\n   *   16 17 18 19 20 21 22\n   *   23 24 25 26 27 28 29\n   *   30\n   */\n  weekOfMonth(): number {\n    this.computeWeekFields();\n    return this._fields[DateField.WEEK_OF_MONTH];\n  }\n\n  dayOfYear(): number {\n    return this._fields[DateField.DAY_OF_YEAR];\n  }\n\n  /**\n   * Day of the week. 1 = SUNDAY, 2 = MONDAY, ..., 7 = SATURDAY\n   */\n  dayOfWeek(): number {\n    return this._fields[DateField.DAY_OF_WEEK];\n  }\n\n  /**\n   * Ordinal day of the week. 1 if this is the 1st day of the week,\n   * 2 if the 2nd, etc. Depends on the local starting day of the week.\n   */\n  ordinalDayOfWeek(): number {\n    const weekday = this.dayOfWeek();\n    const firstDay = this.firstDayOfWeek();\n    return ((7 - firstDay + weekday) % 7) + 1;\n  }\n\n  /**\n   * Ordinal number indicating the day of the week in the current month.\n   * The result of this method can be used to format messages like\n   * \"2nd Sunday in August\".\n   */\n  dayOfWeekInMonth(): number {\n    this.computeWeekFields();\n    return this._fields[DateField.DAY_OF_WEEK_IN_MONTH];\n  }\n\n  dayOfMonth(): number {\n    return this._fields[DateField.DAY_OF_MONTH];\n  }\n\n  isAM(): boolean {\n    return this._fields[DateField.AM_PM] === 0;\n  }\n\n  /**\n   * Indicates the hour of the morning or afternoon, used for the 12-hour\n   * clock (0 - 11). Noon and midnight are 0, not 12.\n   */\n  hour(): number {\n    return this._fields[DateField.HOUR];\n  }\n\n  /**\n   * Indicates the hour of the day, used for the 24-hour clock (0 - 23).\n   * Noon is 12 and midnight is 0.\n   */\n  hourOfDay(): number {\n    return this._fields[DateField.HOUR_OF_DAY];\n  }\n\n  /**\n   * Indicates the minute of the hour (0 - 59).\n   */\n  minute(): number {\n    return this._fields[DateField.MINUTE];\n  }\n\n  /**\n   * Indicates the second of the minute (0 - 59).\n   */\n  second(): number {\n    return this._fields[DateField.SECOND];\n  }\n\n  milliseconds(): number {\n    return this._fields[DateField.MILLIS];\n  }\n\n  millisecondsInDay(): number {\n    return this._fields[DateField.MILLIS_IN_DAY];\n  }\n\n  metaZoneId(): MetaZoneType {\n    return this._zoneInfo.metazoneid as MetaZoneType;\n  }\n\n  timeZoneId(): string {\n    return this._zoneInfo.zoneid;\n  }\n\n  timeZoneStableId(): string {\n    return this._zoneInfo.stableid;\n  }\n\n  timeZoneOffset(): number {\n    return this._zoneInfo.offset;\n  }\n\n  isLeapYear(): boolean {\n    return this._fields[DateField.IS_LEAP] === 1;\n  }\n\n  isDaylightSavings(): boolean {\n    return this._zoneInfo.dst === 1;\n  }\n\n  /**\n   * Computes the field of visual difference between the two dates.\n   * Note: This assumes the dates are of the same type and have the same\n   * timezone offset.\n   */\n  fieldOfVisualDifference(other: CalendarDate): DateTimePatternFieldType {\n    const a = this._fields;\n    const b = other._fields;\n    for (const pair of differenceFields) {\n      const [key, field] = pair;\n      if (a[key] !== b[key]) {\n        return field;\n      }\n    }\n    return DateTimePatternField.SECOND;\n  }\n\n  /**\n   * Compare two dates a and b, returning:\n   *\n   * ```\n   *   a < b  ->  -1\n   *   a = b  ->  0\n   *   a > b  ->  1\n   * ```\n   */\n  compare(other: CalendarDate): number {\n    const a = this.unixEpoch();\n    const b = other.unixEpoch();\n    return a < b ? -1 : a > b ? 1 : 0;\n  }\n\n  /**\n   * Calculate the relative time between two dates. If a field is specified\n   * the time will be calculated in terms of that single field. Otherwise\n   * the field of greatest difference will be used.\n   */\n  relativeTime(other: CalendarDate, field?: TimePeriodField): [TimePeriodField, number] {\n    const [s, sf, , ef] = this.swap(other);\n    const d = this._diff(s, sf, ef);\n    const _field = field || relativeField(d);\n    const r = this._rollup(d, sf, ef, [_field]);\n    return [_field, r[_field] || 0];\n  }\n\n  /**\n   * Calculate the time period between two dates. Note this returns the\n   * absolute value of the difference.\n   */\n  difference(other: CalendarDate, fields?: TimePeriodField[]): TimePeriod {\n    const [s, sf, , ef] = this.swap(other);\n    const d = this._diff(s, sf, ef);\n    return fields ? this._rollup(d, sf, ef, fields) : d;\n  }\n\n  /**\n   * Calculate the time period between two dates. If 'other' is before this date,\n   * the time period fields will be negative.\n   */\n  differenceSigned(other: CalendarDate, fields?: TimePeriodField[]): TimePeriod {\n    const r = this.difference(other, fields);\n    return other.compare(this) < 0 ? (this._invertPeriod(r) as TimePeriod) : r;\n  }\n\n  /**\n   * Return all of the date and time field values.\n   */\n  fields(): CalendarDateFields {\n    return {\n      year: this.extendedYear(),\n      month: this.month(),\n      day: this.dayOfMonth(),\n      hour: this.hourOfDay(),\n      minute: this.minute(),\n      second: this.second(),\n      millis: this.milliseconds(),\n      zoneId: this.timeZoneId(),\n    };\n  }\n\n  /**\n   * Return a JavaScript Date object with the same date and time.\n   */\n  asJSDate(): Date {\n    return new Date(this.toLocalISOString());\n  }\n\n  /**\n   * Set one or more fields on this date explicitly, and return a new date.\n   *\n   * Note: when setting the 'year' field you must use the \"extended year\".\n   * For example, the extended year 0 is 1 B.C in the Gregorian calendar.\n   */\n  abstract set(fields: Partial<CalendarDateFields>): CalendarDate;\n\n  /**\n   * Add the fields to this date, returning a new date.\n   */\n  abstract add(fields: Partial<TimePeriod>): CalendarDate;\n\n  /**\n   * Subtract the fields from this date, returning a new date.\n   */\n  abstract subtract(fields: Partial<TimePeriod>): CalendarDate;\n\n  /**\n   * Change the timezone for this date, returning a new date.\n   */\n  abstract withZone(zoneId: string): CalendarDate;\n\n  protected abstract _new(): CalendarDate;\n  protected abstract initFields(f: number[]): void;\n  protected abstract monthCount(): number;\n  protected abstract daysInMonth(y: number, m: number): number;\n  protected abstract daysInYear(y: number): number;\n  protected abstract monthStart(eyear: number, month: number, useMonth: boolean): number;\n\n  protected _toISOString(d: CalendarDate, utc: boolean): string {\n    d = CalendarDate._gregorian(this, utc, this._firstDay, this._minDays);\n    let z = 'Z';\n    if (!utc) {\n      const o = (this.timeZoneOffset() / CalendarConstants.ONE_MINUTE_MS) | 0;\n      z = `${o < 0 ? '-' : '+'}${zeropad((o / 60) | 0, 2)}:${zeropad(o % 60 | 0, 2)}`;\n    }\n    const y = d.extendedYear();\n    const neg = y < 0;\n    return (\n      `${neg ? '-' : ''}${zeropad(Math.abs(y), 4)}-${zeropad(d.month(), 2)}-${zeropad(d.dayOfMonth(), 2)}` +\n      `T${zeropad(d.hourOfDay(), 2)}:${zeropad(d.minute(), 2)}:${zeropad(d.second(), 2)}` +\n      `.${zeropad(d.milliseconds(), 3)}${z}`\n    );\n  }\n\n  /**\n   * Rollup just the time fields into number of milliseconds. This is internal\n   * and assumes all time fields are defined.\n   */\n  protected _timeToMs(f: Partial<CalendarDateFields>): number {\n    return (\n      clamp(f.hour || 0, 0, 23) * CalendarConstants.ONE_HOUR_MS +\n      clamp(f.minute || 0, 0, 59) * CalendarConstants.ONE_MINUTE_MS +\n      clamp(f.second || 0, 0, 59) * CalendarConstants.ONE_SECOND_MS +\n      clamp(f.millis || 0, 0, 999)\n    );\n  }\n\n  protected _invertPeriod(fields: Partial<TimePeriod>): Partial<TimePeriod> {\n    const r: Partial<TimePeriod> = {};\n    for (const f of TIME_PERIOD_FIELDS) {\n      const v = fields[f];\n      r[f] = v ? -v : 0;\n    }\n    return r;\n  }\n\n  /**\n   * Roll up time period fields into a subset of fields.\n   */\n  protected _rollup(span: Partial<TimePeriod>, sf: number[], ef: number[], fields: TimePeriodField[]): TimePeriod {\n    const f = timePeriodFieldFlags(fields);\n    if (!f) {\n      return { year: 0, month: 0, week: 0, day: 0, hour: 0, minute: 0, second: 0, millis: 0, ...span };\n    }\n\n    const mc = this.monthCount();\n\n    let year = span.year || 0;\n    let month = span.month || 0;\n    let day = (span.week || 0) * 7 + (span.day || 0);\n    let ms =\n      (span.hour || 0) * CalendarConstants.ONE_HOUR_MS +\n      (span.minute || 0) * CalendarConstants.ONE_MINUTE_MS +\n      (span.second || 0) * CalendarConstants.ONE_SECOND_MS +\n      (span.millis || 0);\n\n    if (f & TimePeriodFieldFlag.YEAR && f & TimePeriodFieldFlag.MONTH) {\n      // Both year and month were requested, so use their integer values.\n    } else if (f & TimePeriodFieldFlag.MONTH) {\n      // Month was requested so convert years into months\n      month += year * mc;\n      year = 0;\n    } else if (f & TimePeriodFieldFlag.YEAR && month) {\n      // Year was requested so convert months into days\n\n      // This is a little verbose but necessary to accurately convert\n      // months into days.  Example:\n      //\n      //  2001-03-11  and 2001-09-09   5 months and 29 days apart\n      //  == (last month days) + (full month days) + (first month days)\n      //  == 9 + 31 + 31 + 30 + 31 + 30 + (31 - 11)\n      //  == 182 days\n\n      let endy = ef[DateField.EXTENDED_YEAR];\n      let endm = ef[DateField.MONTH] - 1;\n\n      // TODO: create a cursor for year/month calculations to reduce\n      // the verbosity of this block\n\n      // Subtract the number of days to find the \"day of month\"\n      // relative to each of the months to be converted.\n      let dom = ef[DateField.DAY_OF_MONTH] - day;\n      if (dom < 0) {\n        endm--;\n        if (endm < 0) {\n          endm += mc;\n          endy--;\n        }\n        // const dim = this.daysInMonth(endy, endm);\n        dom += this.daysInMonth(endy, endm);\n      }\n\n      // Convert each month except the last into days\n      let tmpd = dom;\n      while (month > 1) {\n        endm--;\n        if (endm < 0) {\n          endm += mc;\n          endy--;\n        }\n        tmpd += this.daysInMonth(endy, endm);\n        month--;\n      }\n\n      // Convert the last month into days\n      endm--;\n      if (endm < 0) {\n        endm += mc;\n        endy--;\n      }\n\n      tmpd += this.daysInMonth(endy, endm) - dom;\n      day += tmpd;\n      month = 0;\n    } else {\n      // Neither year nor month were requested, so we ignore those parts\n      // of the time period, and re-calculate the days directly from the\n      // original date fields.\n      day = ef[DateField.JULIAN_DAY] - sf[DateField.JULIAN_DAY];\n      ms = ef[DateField.MILLIS_IN_DAY] - sf[DateField.MILLIS_IN_DAY];\n      if (ms < 0) {\n        day--;\n        ms += CalendarConstants.ONE_DAY_MS;\n      }\n      year = month = 0;\n    }\n\n    // We have integer year, month, and millis computed at this point.\n\n    ms += CalendarConstants.ONE_DAY_MS * day;\n    day = 0;\n\n    const onedy = CalendarConstants.ONE_DAY_MS;\n    const onewk = onedy * 7;\n    const onehr = CalendarConstants.ONE_HOUR_MS;\n    const onemn = CalendarConstants.ONE_MINUTE_MS;\n\n    let week = 0;\n    let hour = 0;\n    let minute = 0;\n    let second = 0;\n    let millis = 0;\n\n    // Roll down\n\n    if (f & TimePeriodFieldFlag.WEEK) {\n      week = (ms / onewk) | 0;\n      ms -= week * onewk;\n    }\n    if (f & TimePeriodFieldFlag.DAY) {\n      day = (ms / onedy) | 0;\n      ms -= day * onedy;\n    }\n    if (f & TimePeriodFieldFlag.HOUR) {\n      hour = (ms / onehr) | 0;\n      ms -= hour * onehr;\n    }\n    if (f & TimePeriodFieldFlag.MINUTE) {\n      minute = (ms / onemn) | 0;\n      ms -= minute * onemn;\n    }\n    if (f & TimePeriodFieldFlag.SECOND) {\n      second = (ms / 1000) | 0;\n      ms -= second * 1000;\n    }\n    if (f & TimePeriodFieldFlag.MILLIS) {\n      millis = ms;\n    }\n\n    const dayms = ms / CalendarConstants.ONE_DAY_MS;\n\n    // Roll up fractional\n\n    if (f < TimePeriodFieldFlag.MONTH) {\n      // Days in the last year before adding the remaining fields\n      const diy = this.daysInYear(sf[DateField.EXTENDED_YEAR] + year);\n      year += (day + dayms) / diy;\n      day = 0;\n    } else if (f < TimePeriodFieldFlag.WEEK) {\n      let ey = ef[DateField.YEAR];\n      let em = ef[DateField.MONTH] - 2;\n      if (em < 0) {\n        em += mc;\n        ey--;\n      }\n      const dim = this.daysInMonth(ey, em);\n      month += (day + dayms) / dim;\n    } else if (f < TimePeriodFieldFlag.DAY) {\n      week += (day + dayms) / 7;\n    } else if (f < TimePeriodFieldFlag.HOUR) {\n      day += dayms;\n    } else if (f < TimePeriodFieldFlag.MINUTE) {\n      hour += ms / onehr;\n    } else if (f < TimePeriodFieldFlag.SECOND) {\n      minute += ms / onemn;\n    } else if (f < TimePeriodFieldFlag.MILLIS) {\n      second += ms / 1000;\n    }\n\n    return {\n      year,\n      month,\n      week,\n      day,\n      hour,\n      minute,\n      second,\n      millis,\n    };\n  }\n\n  /**\n   * Compute the number of years, months, days, etc, between two dates. The result will\n   * have all fields as integers.\n   */\n  protected _diff(s: CalendarDate, sf: number[], ef: number[]): TimePeriod {\n    // Use a borrow-based method to compute fields. If a field X is negative, we borrow\n    // from the next-higher field until X is positive. Repeat until all fields are\n    // positive.\n\n    let millis = ef[DateField.MILLIS_IN_DAY] - sf[DateField.MILLIS_IN_DAY];\n    let day = ef[DateField.DAY_OF_MONTH] - sf[DateField.DAY_OF_MONTH];\n    let month = ef[DateField.MONTH] - sf[DateField.MONTH];\n    let year = ef[DateField.EXTENDED_YEAR] - sf[DateField.EXTENDED_YEAR];\n\n    // Convert days into milliseconds\n    if (millis < 0) {\n      millis += CalendarConstants.ONE_DAY_MS;\n      day--;\n    }\n\n    // Convert months into days\n    // This is a little more complex since months can have 28, 29 30 or 31 days.\n    // We work backwards from the current month and successively convert months\n    // into days until days are positive.\n    const mc = s.monthCount();\n    let m = ef[DateField.MONTH] - 1; // convert to 0-based month\n    let y = ef[DateField.EXTENDED_YEAR];\n    while (day < 0) {\n      // move to previous month\n      m--;\n      // add back the number of days in the current month, wrapping around to December\n      if (m < 0) {\n        m += mc;\n        y--;\n      }\n      const dim = this.daysInMonth(y, m);\n      day += dim;\n      month--;\n    }\n\n    // Convert years into months\n    if (month < 0) {\n      month += mc;\n      year--;\n    }\n\n    // Convert days to weeks\n    const week = day > 0 ? (day / 7) | 0 : 0;\n    if (week > 0) {\n      day -= week * 7;\n    }\n\n    // Break down milliseconds into components\n    const hour = (millis / CalendarConstants.ONE_HOUR_MS) | 0;\n    millis -= hour * CalendarConstants.ONE_HOUR_MS;\n    const minute = (millis / CalendarConstants.ONE_MINUTE_MS) | 0;\n    millis -= minute * CalendarConstants.ONE_MINUTE_MS;\n    const second = (millis / CalendarConstants.ONE_SECOND_MS) | 0;\n    millis -= second * CalendarConstants.ONE_SECOND_MS;\n\n    return {\n      year,\n      month,\n      week,\n      day,\n      hour,\n      minute,\n      second,\n      millis,\n    };\n  }\n\n  protected swap(other: CalendarDate): [CalendarDate, number[], CalendarDate, number[]] {\n    let s = this as CalendarDate;\n    let e = other;\n\n    // Swap start/end dates\n    if (this.compare(other) === 1) {\n      [s, e] = [e, s];\n    }\n\n    // Convert start and end to UTC and ensure both are of the same calendar type.\n    // We do this using lower-level logic since the CalendarDate base class currently\n    // cannot construct instances of subclasses.\n    return [s, s.utcfields(), e, e.utcfields()];\n  }\n\n  /**\n   * Compute a new Julian day and milliseconds UTC by updating one or more fields.\n   */\n  protected _add(fields: Partial<TimePeriod>): [number, number] {\n    const f = this.utcfields();\n\n    let jd: number;\n    let ms: number;\n    let year: number;\n    let yearf: number;\n\n    let ydays: number;\n    let ydaysf: number;\n\n    let month: number;\n    let monthf: number;\n\n    let day: number;\n    let dayf: number;\n\n    let _days: number;\n    let _ms: number;\n\n    // Capture days and time fields (in milliseconds) for future use.\n    // We do this here since we'll be re-initializing the date fields\n    // below.\n    [_days, _ms] = this._addTime(fields);\n    _days += (fields.day || 0) + (fields.week || 0) * 7;\n\n    // YEARS\n\n    // Split off the fractional part of the years. Add the integer\n    // years to the extended year. Then get the number of days in that\n    // year and multiply that by the fractional part.\n    // Example: In a Gregorian leap year we'll have 366 days. If the fractional\n    // year is 0.25 we'll get 91.5 days.\n    [year, yearf] = splitfrac(fields.year);\n    year += f[DateField.EXTENDED_YEAR];\n    [ydays, ydaysf] = splitfrac(this.daysInYear(year) * yearf);\n\n    // Add day fractions from year calculation to milliseconds\n    ms = ydaysf * CalendarConstants.ONE_DAY_MS;\n\n    // Calculate the julian day for the year, month and day-of-month combination,\n    // adding in the days due to fractional year\n    jd = this.monthStart(year, f[DateField.MONTH] - 1, false) + f[DateField.DAY_OF_MONTH] + ydays;\n\n    // Initialize fields from the julian day\n    f[DateField.JULIAN_DAY] = jd;\n    f[DateField.MILLIS_IN_DAY] = 0;\n    this.initFields(f);\n\n    year = f[DateField.EXTENDED_YEAR];\n\n    // MONTHS\n\n    // Get integer and fractional months\n    month = fields.month || 0;\n    [month, monthf] = splitfrac(f[DateField.MONTH] - 1 + month);\n\n    // Add back years by dividing by month count\n    const mc = this.monthCount();\n    const [myears] = splitfrac(month / 12); // ignore fraction here\n    month -= myears * mc;\n    year += myears;\n\n    // Take away a year if the month pointer went negative\n    if (month < 0) {\n      month += mc;\n      year--;\n    }\n\n    // Compute updated julian day from year and fractional month\n    const dim = this.daysInMonth(year, month) * monthf;\n    [day, dayf] = splitfrac(_days + dim);\n    jd = this.monthStart(year, month, false) + f[DateField.DAY_OF_MONTH];\n\n    // DAY AND TIME FIELDS\n\n    // Adjust julian day by fractional day and time fields\n    ms += Math.round(_ms + dayf * CalendarConstants.ONE_DAY_MS);\n    if (ms >= CalendarConstants.ONE_DAY_MS) {\n      const d = floor(ms / CalendarConstants.ONE_DAY_MS);\n      ms -= d * CalendarConstants.ONE_DAY_MS;\n      day += d;\n    }\n\n    return [jd + day, ms];\n  }\n\n  /**\n   * Converts all time fields into [days, milliseconds].\n   */\n  protected _addTime(fields: Partial<TimePeriod>): [number, number] {\n    // Calculate the time difference in days and milliseconds\n    let msDay = this._fields[DateField.MILLIS_IN_DAY] - this.timeZoneOffset();\n    msDay +=\n      (fields.hour || 0) * CalendarConstants.ONE_HOUR_MS +\n      (fields.minute || 0) * CalendarConstants.ONE_MINUTE_MS +\n      (fields.second || 0) * CalendarConstants.ONE_SECOND_MS +\n      (fields.millis || 0);\n    const oneDay = CalendarConstants.ONE_DAY_MS;\n    const days = floor(msDay / oneDay);\n    const ms = msDay - days * oneDay;\n    return [days, ms];\n  }\n\n  protected initFromUnixEpoch(ms: number, zoneId: string): void {\n    zoneId = substituteZoneAlias(zoneId);\n    this._zoneInfo = zoneInfoFromUTC(zoneId, ms);\n    jdFromUnixEpoch(ms + this._zoneInfo.offset, this._fields);\n    computeBaseFields(this._fields);\n  }\n\n  protected initFromJD(jd: number, msDay: number, zoneId: string): void {\n    const unixEpoch = unixEpochFromJD(jd, msDay);\n    this.initFromUnixEpoch(unixEpoch, zoneId);\n  }\n\n  protected _toString(type: string): string {\n    const y = this.extendedYear();\n    const neg = y < 0;\n    return (\n      `${type} ${neg ? '-' : ''}${zeropad(Math.abs(y), 4)}` +\n      `-${zeropad(this.month(), 2)}-${zeropad(this.dayOfMonth(), 2)} ` +\n      `${zeropad(this.hourOfDay(), 2)}:${zeropad(this.minute(), 2)}:${zeropad(this.second(), 2)}` +\n      `.${zeropad(this.milliseconds(), 3)} ${this._zoneInfo.zoneid}`\n    );\n  }\n\n  /**\n   * Compute WEEK_OF_YEAR and YEAR_WOY on demand.\n   */\n  protected computeWeekFields(): void {\n    const f = this._fields;\n    if (f[DateField.YEAR_WOY] !== NULL) {\n      return;\n    }\n\n    const dow = f[DateField.DAY_OF_WEEK];\n    const dom = f[DateField.DAY_OF_MONTH];\n    const doy = f[DateField.DAY_OF_YEAR];\n    f[DateField.WEEK_OF_MONTH] = this.weekNumber(this._firstDay, this._minDays, dom, dom, dow);\n    f[DateField.DAY_OF_WEEK_IN_MONTH] = (((dom - 1) / 7) | 0) + 1;\n\n    // compute locale\n    this._computeWeekFields(DateField.WEEK_OF_YEAR, DateField.YEAR_WOY, this._firstDay, this._minDays, dow, dom, doy);\n\n    // compute ISO\n    this._computeWeekFields(DateField.ISO_WEEK_OF_YEAR, DateField.ISO_YEAR_WOY, 2, 4, dow, dom, doy);\n  }\n\n  protected _computeWeekFields(\n    woyfield: number,\n    ywoyfield: number,\n    firstDay: number,\n    minDays: number,\n    dow: number,\n    _dom: number,\n    doy: number,\n  ): void {\n    const f = this._fields;\n    const eyear = f[DateField.EXTENDED_YEAR];\n\n    let ywoy = eyear;\n    const rdow = (dow + 7 - firstDay) % 7;\n    const rdowJan1 = (dow - doy + 7001 - firstDay) % 7;\n    let woy = floor((doy - 1 + rdowJan1) / 7);\n    if (7 - rdowJan1 >= minDays) {\n      woy++;\n    }\n\n    if (woy === 0) {\n      const prevDay = doy + this.yearLength(eyear - 1);\n      woy = this.weekNumber(firstDay, minDays, prevDay, prevDay, dow);\n      ywoy--;\n    } else {\n      const lastDoy = this.yearLength(eyear);\n      if (doy >= lastDoy - 5) {\n        let lastRdow = (rdow + lastDoy - doy) % 7;\n        if (lastRdow < 0) {\n          lastRdow += 7;\n        }\n        if (6 - lastRdow >= minDays && doy + 7 - rdow > lastDoy) {\n          woy = 1;\n          ywoy++;\n        }\n      }\n    }\n\n    f[woyfield] = woy;\n    f[ywoyfield] = ywoy;\n  }\n\n  protected yearLength(y: number): number {\n    return this.monthStart(y + 1, 0, false) - this.monthStart(y, 0, false);\n  }\n\n  protected weekNumber(\n    firstDay: number,\n    minDays: number,\n    desiredDay: number,\n    dayOfPeriod: number,\n    dayOfWeek: number,\n  ): number {\n    let psow = (dayOfWeek - firstDay - dayOfPeriod + 1) % 7;\n    if (psow < 0) {\n      psow += 7;\n    }\n    const weekNo = floor((desiredDay + psow - 1) / 7);\n    return 7 - psow >= minDays ? weekNo + 1 : weekNo;\n  }\n\n  protected utcfields(): number[] {\n    const u = this.unixEpoch();\n    const f = this._fields.slice(0);\n    jdFromUnixEpoch(u, f);\n    computeBaseFields(f);\n    this.initFields(f);\n    return f;\n  }\n}\n\nconst clamp = (n: number, min: number, max: number): number => Math.max(Math.min(n, max), min) | 0;\n\n/**\n * Compute Julian day from timezone-adjusted Unix epoch milliseconds.\n */\nconst jdFromUnixEpoch = (ms: number, f: number[]): void => {\n  const oneDayMS = CalendarConstants.ONE_DAY_MS;\n  const days = floor(ms / oneDayMS);\n  const jd = days + CalendarConstants.JD_UNIX_EPOCH;\n  const msDay = floor(ms - days * oneDayMS);\n\n  f[DateField.JULIAN_DAY] = jd;\n  f[DateField.MILLIS_IN_DAY] = msDay;\n};\n\n/**\n * Compute fields common to all calendars. Before calling this, we must\n * have the JULIAN_DAY and MILLIS_IN_DAY fields set. Every calculation\n * is relative to these.\n */\nconst computeBaseFields = (f: number[]): void => {\n  const jd = clamp(f[DateField.JULIAN_DAY], CalendarConstants.JD_MIN, CalendarConstants.JD_MAX);\n  // checkJDRange(jd);\n\n  let msDay = f[DateField.MILLIS_IN_DAY];\n  const ms = msDay + (jd - CalendarConstants.JD_UNIX_EPOCH) * CalendarConstants.ONE_DAY_MS;\n\n  f[DateField.LOCAL_MILLIS] = ms;\n  f[DateField.JULIAN_DAY] = jd;\n  f[DateField.MILLIS_IN_DAY] = msDay;\n  f[DateField.MILLIS] = msDay % 1000;\n\n  msDay = (msDay / 1000) | 0;\n  f[DateField.SECOND] = msDay % 60;\n\n  msDay = (msDay / 60) | 0;\n  f[DateField.MINUTE] = msDay % 60;\n\n  msDay = (msDay / 60) | 0;\n  f[DateField.HOUR_OF_DAY] = msDay;\n  f[DateField.AM_PM] = (msDay / 12) | 0;\n  f[DateField.HOUR] = msDay % 12;\n\n  let dow = (jd + DayOfWeek.MONDAY) % 7;\n  if (dow < DayOfWeek.SUNDAY) {\n    dow += 7;\n  }\n  f[DateField.DAY_OF_WEEK] = dow;\n};\n\n// TODO: clamp range instead of throwing error.\n// const checkJDRange = (jd: number): void => {\n//   if (jd < CalendarConstants.JD_MIN || jd > CalendarConstants.JD_MAX) {\n//     throw new Error(\n//       `Julian day ${jd} is outside the supported range of this library: ` +\n//         `${ConstantsDesc.JD_MIN} to ${ConstantsDesc.JD_MAX}`,\n//     );\n//   }\n// };\n\n/**\n * Given a Julian day and local milliseconds (in UTC), return the Unix\n * epoch milliseconds UTC.\n */\nconst unixEpochFromJD = (jd: number, msDay: number): number => {\n  const days = jd - CalendarConstants.JD_UNIX_EPOCH;\n  return days * CalendarConstants.ONE_DAY_MS + Math.round(msDay);\n};\n"]}