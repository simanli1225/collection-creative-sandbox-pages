"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuddhistDate = void 0;
var tslib_1 = require("tslib");
var gregorian_1 = require("./gregorian");
var ZEROS = { year: 1, month: 1, day: 1, hour: 0, minute: 0, second: 0, millis: 0 };
/**
 * A date in the Buddhist calendar.
 *
 * type: buddhist
 *
 * @public
 */
var BuddhistDate = /** @class */ (function (_super) {
    tslib_1.__extends(BuddhistDate, _super);
    function BuddhistDate(firstDay, minDays) {
        return _super.call(this, 'buddhist', firstDay, minDays) || this;
    }
    BuddhistDate.prototype.set = function (fields) {
        return this._set(tslib_1.__assign(tslib_1.__assign({}, this.fields()), fields));
    };
    BuddhistDate.prototype.add = function (fields) {
        var _a = this._add(fields), jd = _a[0], ms = _a[1];
        return this._new().initFromJD(jd, ms, this.timeZoneId());
    };
    BuddhistDate.prototype.withZone = function (zoneId) {
        return this._new().initFromUnixEpoch(this.unixEpoch(), zoneId);
    };
    BuddhistDate.prototype.toString = function () {
        return this._toString('Buddhist');
    };
    BuddhistDate.fromFields = function (fields, firstDay, minDays) {
        return new BuddhistDate(firstDay, minDays)._set(tslib_1.__assign(tslib_1.__assign({}, ZEROS), fields));
    };
    BuddhistDate.fromUnixEpoch = function (epoch, zoneId, firstDay, minDays) {
        return new BuddhistDate(firstDay, minDays).initFromUnixEpoch(epoch, zoneId);
    };
    BuddhistDate.prototype._new = function () {
        return new BuddhistDate(this._firstDay, this._minDays);
    };
    BuddhistDate.prototype.initFromUnixEpoch = function (epoch, zoneId) {
        _super.prototype.initFromUnixEpoch.call(this, epoch, zoneId);
        this.initFields(this._fields);
        return this;
    };
    BuddhistDate.prototype.initFromJD = function (jd, msDay, zoneId) {
        _super.prototype.initFromJD.call(this, jd, msDay, zoneId);
        this.initFields(this._fields);
        return this;
    };
    BuddhistDate.prototype.initFields = function (f) {
        _super.prototype.initFields.call(this, f);
        computeBuddhistFields(f);
    };
    return BuddhistDate;
}(gregorian_1.GregorianDate));
exports.BuddhistDate = BuddhistDate;
var computeBuddhistFields = function (f) {
    f[2 /* DateField.ERA */] = 0;
    f[4 /* DateField.YEAR */] = f[3 /* DateField.EXTENDED_YEAR */] - -543 /* CalendarConstants.BUDDHIST_ERA_START */;
};
//# sourceMappingURL=buddhist.js.map