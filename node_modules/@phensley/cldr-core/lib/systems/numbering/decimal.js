"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.INTERNAL_NUMBERING = exports.fastFormatDecimal = exports.DecimalNumberingSystem = void 0;
var tslib_1 = require("tslib");
var decimal_1 = require("@phensley/decimal");
var private_1 = require("../../common/private");
var isInteger = function (n) { return typeof n === 'number' && isFinite(n) && Math.floor(n) === n; };
/**
 * @internal
 */
var DecimalNumberingSystem = /** @class */ (function (_super) {
    tslib_1.__extends(DecimalNumberingSystem, _super);
    function DecimalNumberingSystem(name, digits, symbols, minimumGroupingDigits, primaryGroupingSize, secondaryGroupingSize) {
        var _this = _super.call(this, name, symbols, minimumGroupingDigits, primaryGroupingSize, secondaryGroupingSize) || this;
        _this.digits = digits;
        return _this;
    }
    DecimalNumberingSystem.prototype.formatString = function (n, groupDigits, minInt) {
        if (!groupDigits && isInteger(n)) {
            return (0, exports.fastFormatDecimal)(String(n), this.digits, minInt);
        }
        return this._formatDecimal(new decimal_1.StringDecimalFormatter(), n, groupDigits, minInt);
    };
    // TODO: future merging of internal number formatting code into this module
    DecimalNumberingSystem.prototype._formatDecimal = function (f, n, groupDigits, minInt) {
        var d = (0, decimal_1.coerceDecimal)(n);
        var group = groupDigits ? this.symbols.group : '';
        d.format(f, this.symbols.decimal || '.', group, minInt, this.minimumGroupingDigits, this.primaryGroupingSize, this.secondaryGroupingSize, true, // zeroScale
        this.digits);
        return f.render();
    };
    return DecimalNumberingSystem;
}(private_1.NumberingSystem));
exports.DecimalNumberingSystem = DecimalNumberingSystem;
/**
 * Fast formatter for integers, no grouping, etc.
 *
 * @internal
 */
var fastFormatDecimal = function (n, digits, minInt) {
    var r = '';
    var len = n.length;
    for (var i = 0; i < len; i++) {
        var c = n.charCodeAt(i);
        switch (c) {
            case 48 /* Chars.DIGIT0 */:
            case 49 /* Chars.DIGIT1 */:
            case 50 /* Chars.DIGIT2 */:
            case 51 /* Chars.DIGIT3 */:
            case 52 /* Chars.DIGIT4 */:
            case 53 /* Chars.DIGIT5 */:
            case 54 /* Chars.DIGIT6 */:
            case 55 /* Chars.DIGIT7 */:
            case 56 /* Chars.DIGIT8 */:
            case 57 /* Chars.DIGIT9 */:
                r += digits[c - 48 /* Chars.DIGIT0 */];
                break;
        }
    }
    // Left pad zeros if minimum integer digits > formatted length
    var diff = minInt - r.length;
    if (diff > 0) {
        var p = '';
        while (diff-- > 0) {
            p += digits[0];
        }
        return p + r;
    }
    return r;
};
exports.fastFormatDecimal = fastFormatDecimal;
var INTERNAL_SYMBOLS = {
    approximatelySign: '~',
    currencyDecimal: '.',
    currencyGroup: ',',
    decimal: '.',
    exponential: 'E',
    group: ',',
    infinity: '∞',
    list: ';',
    minusSign: '-',
    nan: 'NaN',
    perMille: '‰',
    percentSign: '%',
    plusSign: '+',
    superscriptingExponent: '×',
    timeSeparator: ':',
};
/**
 * @internal
 */
exports.INTERNAL_NUMBERING = new DecimalNumberingSystem('internal', '0123456789'.split(''), INTERNAL_SYMBOLS, 1, 3, 3);
//# sourceMappingURL=decimal.js.map