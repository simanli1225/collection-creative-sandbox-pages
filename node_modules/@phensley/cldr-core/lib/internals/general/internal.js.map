{"version":3,"file":"internal.js","sourceRoot":"","sources":["../../../src/internals/general/internal.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ContextTransformFieldType,\n  ContextType,\n  LayoutSchema,\n  ListPatternsSchema,\n  ListPatternPositionType,\n  Vector1Arrow,\n} from '@phensley/cldr-types';\n\nimport { Part } from '@phensley/decimal';\nimport { Cache } from '@phensley/cldr-utils';\n\nimport { GeneralInternals, Internals } from '../../internals/internals';\nimport { Bundle } from '../../resource';\nimport { ListPatternType } from '../../common';\nimport { ContextTransformInfo } from '../../common/private';\nimport { AbstractValue, PartsValue, StringValue } from '../../utils/render';\nimport { parseWrapperPattern, WrapperNode } from '../../parsing/wrapper';\n\n/**\n * @internal\n */\nexport class GeneralInternalsImpl implements GeneralInternals {\n  private layout: LayoutSchema;\n  private listPatterns: ListPatternsSchema;\n\n  private wrapperPatternCache: Cache<WrapperNode[]>;\n\n  constructor(\n    private internals: Internals,\n    cacheSize: number,\n  ) {\n    const schema = internals.schema;\n    this.layout = schema.Layout;\n    this.listPatterns = schema.ListPatterns;\n    this.wrapperPatternCache = new Cache(parseWrapperPattern, cacheSize);\n  }\n\n  characterOrder(bundle: Bundle): string {\n    return this.layout.characterOrder.get(bundle);\n  }\n\n  lineOrder(bundle: Bundle): string {\n    return this.layout.lineOrder.get(bundle);\n  }\n\n  /**\n   * Contextually transform a string,\n   */\n  contextTransform(\n    value: string,\n    info: ContextTransformInfo,\n    context?: ContextType,\n    field?: ContextTransformFieldType,\n  ): string {\n    if (!value) {\n      return value;\n    }\n\n    const flag = field ? info[field] : '';\n    let title = false;\n    switch (context) {\n      case 'begin-sentence':\n        title = true;\n        break;\n      case 'standalone':\n        title = flag !== undefined && flag[0] === 'T';\n        break;\n      case 'ui-list-or-menu':\n        title = flag !== undefined && flag[1] === 'T';\n        break;\n    }\n\n    // TODO: in Unicode \"title case\" is slightly different than \"upper case\"\n    // but for now we use `toUpperCase` the first character.\n    return title ? value[0].toUpperCase() + value.slice(1) : value;\n  }\n\n  formatList(bundle: Bundle, items: string[], type: ListPatternType): string {\n    return this.formatListImpl(bundle, new StringValue(), items, type);\n  }\n\n  formatListToParts(bundle: Bundle, items: string[], type: ListPatternType): Part[] {\n    const parts: Part[][] = items.map((i) => [{ type: 'item', value: i }]);\n    return this.formatListImpl(bundle, new PartsValue(), parts, type);\n  }\n\n  formatListImpl<R>(bundle: Bundle, value: AbstractValue<R>, items: R[], type: ListPatternType): R {\n    const pattern = this.selectListPattern(type).mapping(bundle);\n    let len = items.length;\n    if (len < 2) {\n      return len === 1 ? items[0] : value.empty();\n    }\n\n    if (len === 2) {\n      return this._wrap(pattern.two, value, [items[0], items[1]]);\n    }\n\n    let res = this._wrap(pattern.end, value, [items[len - 2], items[len - 1]]);\n    len -= 2;\n    while (len-- > 1) {\n      res = this._wrap(pattern.middle, value, [items[len], res]);\n    }\n    return this._wrap(pattern.start, value, [items[0], res]);\n  }\n\n  formatWrapper(format: string, args: string[]): string {\n    const pattern = this.wrapperPatternCache.get(format);\n    let res = '';\n    for (const node of pattern) {\n      if (typeof node === 'string') {\n        res += node;\n      } else {\n        const s = args[node];\n        if (s) {\n          res += s;\n        }\n      }\n    }\n    return res;\n  }\n\n  parseWrapper(raw: string): WrapperNode[] {\n    return this.wrapperPatternCache.get(raw);\n  }\n\n  private _wrap<R>(pattern: string, value: AbstractValue<R>, args: R[]): R {\n    const wrapper = this.internals.general.parseWrapper(pattern);\n    value.wrap(wrapper, args);\n    return value.render();\n  }\n\n  private selectListPattern(type: ListPatternType): Vector1Arrow<ListPatternPositionType> {\n    const p = this.listPatterns;\n    switch (type) {\n      case 'unit-long':\n        return p.unitLong;\n      case 'unit-narrow':\n        return p.unitNarrow;\n      case 'unit-short':\n        return p.unitShort;\n      case 'or':\n        return p.or;\n      case 'and-short':\n        return p.andShort;\n      case 'and':\n      default:\n        return p.and;\n    }\n  }\n}\n"]}