import { ContextTransformFieldType, ContextType } from '@phensley/cldr-types';
import { Part } from '@phensley/decimal';
import { GeneralInternals, Internals } from '../../internals/internals';
import { Bundle } from '../../resource';
import { ListPatternType } from '../../common';
import { ContextTransformInfo } from '../../common/private';
import { AbstractValue } from '../../utils/render';
import { WrapperNode } from '../../parsing/wrapper';
/**
 * @internal
 */
export declare class GeneralInternalsImpl implements GeneralInternals {
    private internals;
    private layout;
    private listPatterns;
    private wrapperPatternCache;
    constructor(internals: Internals, cacheSize: number);
    characterOrder(bundle: Bundle): string;
    lineOrder(bundle: Bundle): string;
    /**
     * Contextually transform a string,
     */
    contextTransform(value: string, info: ContextTransformInfo, context?: ContextType, field?: ContextTransformFieldType): string;
    formatList(bundle: Bundle, items: string[], type: ListPatternType): string;
    formatListToParts(bundle: Bundle, items: string[], type: ListPatternType): Part[];
    formatListImpl<R>(bundle: Bundle, value: AbstractValue<R>, items: R[], type: ListPatternType): R;
    formatWrapper(format: string, args: string[]): string;
    parseWrapper(raw: string): WrapperNode[];
    private _wrap;
    private selectListPattern;
}
