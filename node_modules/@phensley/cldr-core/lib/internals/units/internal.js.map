{"version":3,"file":"internal.js","sourceRoot":"","sources":["../../../src/internals/units/internal.ts"],"names":[],"mappings":"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","sourcesContent":["import { PluralType, UnitsSchema, UnitInfo, UnitType } from '@phensley/cldr-types';\n\nimport { coerceDecimal, DecimalConstants } from '@phensley/decimal';\n\nimport { Internals, NumberRenderer, UnitInternals } from '../internals';\nimport { Quantity, UnitFormatOptions } from '../../common';\nimport { NumberParams } from '../../common/private';\nimport { Bundle } from '../../resource';\n\n/**\n * @internal\n */\nexport class UnitsInternalImpl implements UnitInternals {\n  private unitsSchema: UnitsSchema;\n\n  constructor(private internals: Internals) {\n    const schema = internals.schema;\n    this.unitsSchema = schema.Units;\n  }\n\n  getDisplayName(bundle: Bundle, name: UnitType, length: string): string {\n    return this.getUnitInfo(length).displayName.get(bundle, name);\n  }\n\n  format<T>(\n    bundle: Bundle,\n    renderer: NumberRenderer<T>,\n    q: Quantity,\n    options: UnitFormatOptions,\n    params: NumberParams,\n  ): T {\n    const n = coerceDecimal(q.value);\n    const [num, plural] = this.internals.numbers.formatDecimal(bundle, renderer, n, options, params);\n    if (q.unit === undefined) {\n      return num;\n    }\n\n    // Compute plural category for the value '1'\n    const singular = bundle.plurals().cardinal(DecimalConstants.ONE);\n\n    // For default and \"per\" compound pattern, the {0} will use\n    // the plural category and {1} will be singular. Examples:\n    //   1 meter per second\n    //  10 meters per second\n    //\n    // For the 'times' compound pattern, the {0} will be singular,\n    // and the {1} will use the plural category. Examples:\n    //   1 newton-meter\n    //  10 newton-meters\n\n    const plural0 = q.times ? singular : plural;\n    const plural1 = q.times ? plural : singular;\n\n    const { general } = this.internals;\n    const info = this.getUnitInfo(options.length || '');\n    let pattern = info.unitPattern.get(bundle, plural0 as PluralType, q.unit);\n    if (!pattern) {\n      // Fallback to other. Some locales don't break out a pattern per category\n      // when the patterns are identical\n      pattern = info.unitPattern.get(bundle, 'other', q.unit);\n    }\n\n    // Format argument '{0}' here. If no 'per' unit is defined, we\n    // return it. Otherwise we join it with the denominator unit below.\n    const zero = renderer.wrap(general, pattern, num);\n    if (q.per) {\n      // Check if the 'per' unit has a perUnitPattern defined and use it.\n      const perPattern = info.perUnitPattern.get(bundle, q.per);\n      if (perPattern) {\n        return renderer.wrap(general, perPattern, zero);\n      }\n    }\n\n    // If per or times are specified, use use the corresponding compound pattern.\n    // See notes here:\n    // https://www.unicode.org/reports/tr35/tr35-general.html#perUnitPatterns\n    const compound = q.per ? info.perPattern.get(bundle) : q.times ? info.timesPattern.get(bundle) : '';\n\n    const perunit = q.per || q.times;\n    if (perunit) {\n      // Fetch the denominator's unit pattern, strip off the '{0}'\n      // and any surrounding whitespace.\n      let denom = info.unitPattern.get(bundle, plural1 as PluralType, perunit);\n      denom = denom.replace(/\\s*\\{0\\}\\s*/, '');\n      const one = renderer.make('per', denom);\n\n      // Wrap the numerator and denominator together\n      return renderer.wrap(general, compound, zero, one);\n    }\n\n    return zero;\n  }\n\n  getUnitInfo(length: string): UnitInfo {\n    switch (length) {\n      case 'narrow':\n        return this.unitsSchema.narrow;\n      case 'short':\n        return this.unitsSchema.short;\n      default:\n        return this.unitsSchema.long;\n    }\n  }\n}\n"]}