"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnitsInternalImpl = void 0;
var decimal_1 = require("@phensley/decimal");
/**
 * @internal
 */
var UnitsInternalImpl = /** @class */ (function () {
    function UnitsInternalImpl(internals) {
        this.internals = internals;
        var schema = internals.schema;
        this.unitsSchema = schema.Units;
    }
    UnitsInternalImpl.prototype.getDisplayName = function (bundle, name, length) {
        return this.getUnitInfo(length).displayName.get(bundle, name);
    };
    UnitsInternalImpl.prototype.format = function (bundle, renderer, q, options, params) {
        var n = (0, decimal_1.coerceDecimal)(q.value);
        var _a = this.internals.numbers.formatDecimal(bundle, renderer, n, options, params), num = _a[0], plural = _a[1];
        if (q.unit === undefined) {
            return num;
        }
        // Compute plural category for the value '1'
        var singular = bundle.plurals().cardinal(decimal_1.DecimalConstants.ONE);
        // For default and "per" compound pattern, the {0} will use
        // the plural category and {1} will be singular. Examples:
        //   1 meter per second
        //  10 meters per second
        //
        // For the 'times' compound pattern, the {0} will be singular,
        // and the {1} will use the plural category. Examples:
        //   1 newton-meter
        //  10 newton-meters
        var plural0 = q.times ? singular : plural;
        var plural1 = q.times ? plural : singular;
        var general = this.internals.general;
        var info = this.getUnitInfo(options.length || '');
        var pattern = info.unitPattern.get(bundle, plural0, q.unit);
        if (!pattern) {
            // Fallback to other. Some locales don't break out a pattern per category
            // when the patterns are identical
            pattern = info.unitPattern.get(bundle, 'other', q.unit);
        }
        // Format argument '{0}' here. If no 'per' unit is defined, we
        // return it. Otherwise we join it with the denominator unit below.
        var zero = renderer.wrap(general, pattern, num);
        if (q.per) {
            // Check if the 'per' unit has a perUnitPattern defined and use it.
            var perPattern = info.perUnitPattern.get(bundle, q.per);
            if (perPattern) {
                return renderer.wrap(general, perPattern, zero);
            }
        }
        // If per or times are specified, use use the corresponding compound pattern.
        // See notes here:
        // https://www.unicode.org/reports/tr35/tr35-general.html#perUnitPatterns
        var compound = q.per ? info.perPattern.get(bundle) : q.times ? info.timesPattern.get(bundle) : '';
        var perunit = q.per || q.times;
        if (perunit) {
            // Fetch the denominator's unit pattern, strip off the '{0}'
            // and any surrounding whitespace.
            var denom = info.unitPattern.get(bundle, plural1, perunit);
            denom = denom.replace(/\s*\{0\}\s*/, '');
            var one = renderer.make('per', denom);
            // Wrap the numerator and denominator together
            return renderer.wrap(general, compound, zero, one);
        }
        return zero;
    };
    UnitsInternalImpl.prototype.getUnitInfo = function (length) {
        switch (length) {
            case 'narrow':
                return this.unitsSchema.narrow;
            case 'short':
                return this.unitsSchema.short;
            default:
                return this.unitsSchema.long;
        }
    };
    return UnitsInternalImpl;
}());
exports.UnitsInternalImpl = UnitsInternalImpl;
//# sourceMappingURL=internal.js.map