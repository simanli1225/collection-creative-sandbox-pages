{"version":3,"file":"context.js","sourceRoot":"","sources":["../../../src/internals/numbers/context.ts"],"names":[],"mappings":"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","sourcesContent":["import { Decimal, RoundingModeType } from '@phensley/decimal';\nimport { NumberFormatOptions } from '../../common';\nimport { NumberPattern } from '../../parsing/number';\n\n/**\n * Provides a context to set number formatting parameters, combining user-supplied\n * options with defaults based on modes and the number pattern.\n */\nexport class NumberContext {\n  readonly options: NumberFormatOptions;\n  useSignificant: boolean;\n\n  minInt: number = -1;\n  maxFrac: number = -1;\n  minFrac: number = -1;\n  maxSig: number = -1;\n  minSig: number = -1;\n  currencyDigits: number = -1;\n\n  constructor(\n    options: NumberFormatOptions,\n    readonly roundingMode: RoundingModeType,\n    compact: boolean,\n    scientific: boolean,\n    currencyDigits: number = -1,\n  ) {\n    const o = options;\n    this.options = o;\n    this.currencyDigits = currencyDigits;\n    this.minInt = options.minimumIntegerDigits || -1;\n\n    // Determine if we should use default or significant digit modes. If we're in compact mode\n    // we will use significant digits unless any fraction option is set. Otherwise we use\n    // significant digits if any significant digit option is set.\n    const optFrac = o.minimumFractionDigits !== undefined || o.maximumFractionDigits !== undefined;\n    const optSig = o.minimumSignificantDigits !== undefined || o.maximumSignificantDigits !== undefined;\n    this.useSignificant = (scientific && !optFrac) || (compact && !optFrac) || optSig;\n  }\n\n  /**\n   * Set a pattern. The 'scientific' flag indicates the pattern uses significant\n   * digits, which we will copy from the pattern's min/max fractions.\n   */\n  setPattern(pattern: NumberPattern, scientific: boolean = false): void {\n    this._setPattern(pattern, scientific, -1, -1, -1);\n  }\n\n  /**\n   * Set a compact pattern.\n   */\n  setCompact(pattern: NumberPattern, integerDigits: number, _divisor: number, maxFracDigits: number = -1): void {\n    let maxSigDigits = Math.max(pattern.minInt, integerDigits);\n    if (integerDigits === 1) {\n      maxSigDigits++;\n    }\n    this._setPattern(pattern, false, maxSigDigits, 1, maxFracDigits);\n  }\n\n  /**\n   * Adjust the scale of the number using the resolved parameters.\n   */\n  adjust(n: Decimal, scientific: boolean = false): Decimal {\n    // TODO: consider moving this logic into Decimal since it could be useful\n    // to adjust a number using several options in a single pass. Could be\n    // more efficient, making fewer copies.\n\n    if (this.useSignificant && scientific) {\n      if (this.minSig <= 0) {\n        this.minSig = 1;\n      }\n      if (this.maxSig <= 0) {\n        this.maxSig = 1;\n      }\n    }\n\n    if (this.useSignificant && this.minSig >= 0) {\n      // By default we assume maximum significant digits will equal the\n      // number's default precision. So if the option's maxSig == -1\n      // we ignore reducing the precision.\n      if (this.maxSig !== -1 && n.precision() > this.maxSig) {\n        // Scale the number to have at most the maximum significant digits.\n        const scale = this.maxSig - n.precision() + n.scale();\n        n = n.setScale(scale, this.roundingMode);\n      }\n      n = n.stripTrailingZeros();\n\n      // scale the number to have at least the minimum significant digits\n      const precision = n.precision();\n      if (precision < this.minSig) {\n        const scale = this.minSig - precision + n.scale();\n        n = n.setScale(scale, this.roundingMode);\n      }\n    } else {\n      // Precise control over number of integer and decimal digits to include, e.g. when\n      // formatting exact currency values.\n      const scale = Math.max(this.minFrac, Math.min(n.scale(), this.maxFrac));\n\n      n = n.setScale(scale, this.roundingMode);\n      n = n.stripTrailingZeros();\n\n      // If user hasn't requested minimum fraction digits, and requested to trim zero fractions,\n      // and the number is an integer, force it to render as a whole number.\n      if (this.options.trimZeroFractions && !this.options.minimumFractionDigits && n.isInteger()) {\n        // Trim zeros when whole number display is possible\n        n = n.setScale(0, this.roundingMode);\n      } else if (n.scale() < this.minFrac) {\n        // Ensure minimum fraction digits is met.\n        n = n.setScale(this.minFrac, this.roundingMode);\n      }\n    }\n\n    return n;\n  }\n\n  /**\n   * Set context parameters from options, pattern and significant digit arguments.\n   */\n  private _setPattern(\n    pattern: NumberPattern,\n    scientific: boolean,\n    maxSigDigits: number,\n    minSigDigits: number,\n    maxFracDigits: number,\n  ): void {\n    const o = this.options;\n\n    // If minInt is not specified in options, always copy from pattern\n    if (this.options.minimumIntegerDigits === undefined) {\n      this.minInt = pattern.minInt;\n    }\n    this.minFrac = this.currencyDigits === -1 ? pattern.minFrac : this.currencyDigits;\n    this.maxFrac = this.currencyDigits === -1 ? pattern.maxFrac : this.currencyDigits;\n\n    const minFrac = o.minimumFractionDigits;\n    let maxFrac = o.maximumFractionDigits;\n    if (minFrac === undefined && maxFrac === undefined && maxFracDigits > -1) {\n      maxFrac = maxFracDigits;\n    }\n\n    if (maxFrac !== undefined && maxFrac > -1) {\n      this.maxFrac = maxFrac;\n    }\n\n    if (minFrac !== undefined && minFrac > -1) {\n      this.minFrac = maxFrac !== undefined && maxFrac > -1 ? (maxFrac < minFrac ? maxFrac : minFrac) : minFrac;\n      if (this.minFrac > this.maxFrac) {\n        this.maxFrac = this.minFrac;\n      }\n    }\n\n    if (maxFrac !== undefined && maxFrac > -1) {\n      if (this.maxFrac < this.minFrac || this.minFrac === -1) {\n        this.minFrac = this.maxFrac;\n      }\n    }\n\n    if (this.useSignificant || scientific) {\n      const optMinSig = o.minimumSignificantDigits;\n      const optMaxSig = o.maximumSignificantDigits;\n\n      let minSig = scientific ? orDefault(optMinSig, pattern.minFrac) : orDefault(optMinSig, minSigDigits);\n      let maxSig = scientific ? orDefault(optMaxSig, pattern.maxFrac) : orDefault(optMaxSig, maxSigDigits);\n\n      if (minSig !== -1 && maxSig !== -1 && minSig > maxSig) {\n        maxSig = minSig;\n      }\n      if (minSig === -1) {\n        minSig = maxSig;\n      }\n      this.minSig = minSig;\n      this.maxSig = maxSig;\n    } else {\n      this.maxSig = -1;\n      this.minSig = -1;\n    }\n  }\n}\n\nconst orDefault = (n: number | undefined, alt: number): number => (n === undefined ? alt : n);\n"]}