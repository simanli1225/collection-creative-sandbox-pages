{"version":3,"file":"render.js","sourceRoot":"","sources":["../../../src/internals/numbers/render.ts"],"names":[],"mappings":";;;;AAAA,6CAAmH;AAKnH,qDAA4D;AAC5D,6CAA4E;AAE5E;;GAEG;AACH;IACE,yBAAoB,MAAoB;QAApB,WAAM,GAAN,MAAM,CAAc;IAAG,CAAC;IAE5C,gCAAM,GAAN,UACE,CAAU,EACV,OAAsB,EACtB,cAAsB,EACtB,aAAqB,EACrB,aAAqB,EACrB,MAAc,EACd,QAAwB,EACxB,QAAiB;QADjB,yBAAA,EAAA,eAAwB;QAGhB,IAAA,OAAO,GAAK,IAAI,CAAC,MAAM,QAAhB,CAAiB;QAChC,IAAM,QAAQ,GAAY,cAAc,KAAK,EAAE,CAAC;QAEhD,IAAM,OAAO,GAAG,aAAa;YAC3B,CAAC,CAAC,aAAa;YACf,CAAC,CAAC,QAAQ;gBACR,CAAC,CAAC,OAAO,CAAC,eAAe,IAAI,OAAO,CAAC,OAAO;gBAC5C,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;QACtB,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,IAAI,QAAQ,EAAE,CAAC;YACb,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;YACtB,IAAI,QAAQ,EAAE,CAAC;gBACb,KAAK,GAAG,OAAO,CAAC,aAAa,IAAI,KAAK,CAAC;YACzC,CAAC;QACH,CAAC;QAEK,IAAA,QAAQ,GAAe,OAAO,SAAtB,EAAE,QAAQ,GAAK,OAAO,SAAZ,CAAa;QACrC,IAAI,QAAQ,IAAI,CAAC,EAAE,CAAC;YAClB,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC;QAC7C,CAAC;QACD,IAAI,QAAQ,IAAI,CAAC,EAAE,CAAC;YAClB,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC;QAC/C,CAAC;QAED,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACjD,CAAC,CAAC,MAAM,CACN,SAAS,EACT,OAAO,EACP,KAAK,EACL,MAAM,EACN,IAAI,CAAC,MAAM,CAAC,qBAAqB,EACjC,QAAQ,EACR,QAAQ,EACR,IAAI,EAAE,YAAY;QAClB,IAAI,CAAC,MAAM,CAAC,MAAM,CACnB,CAAC;QACF,IAAM,SAAS,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC;QAErC,IAAM,GAAG,GAAqB,IAAI,CAAC,KAAK,EAAE,CAAC;QAE3C,IAAI,UAAU,GAAG,KAAK,CAAC;QACvB,IAAI,cAAc,GAAG,KAAK,CAAC;QAC3B,IAAI,WAAW,GAAG,CAAC,CAAC,CAAC;QACrB,KAAmB,UAAa,EAAb,KAAA,OAAO,CAAC,KAAK,EAAb,cAAa,EAAb,IAAa,EAAE,CAAC;YAA9B,IAAM,IAAI,SAAA;YACb,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;gBAC7B,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAC3B,CAAC;iBAAM,CAAC;gBACN,QAAQ,IAAI,EAAE,CAAC;oBACb,iCAAyB,CAAC,CAAC,CAAC;wBAC1B,sEAAsE;wBACtE,cAAc,GAAG,CAAC,UAAU,CAAC;wBAC7B,IAAM,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC;wBACvB,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;wBACpC,IAAM,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC;wBACvB,WAAW,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;wBACzC,MAAM;oBACR,CAAC;oBAED;wBACE,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;wBACpC,MAAM;oBAER;wBACE,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;wBAClC,MAAM;oBAER;wBACE,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;wBACtB,UAAU,GAAG,IAAI,CAAC;wBAClB,MAAM;oBAER;wBACE,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;wBAClC,MAAM;oBAER;wBACE,+CAA+C;wBAC/C,IAAI,QAAQ,EAAE,CAAC;4BACb,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC;4BACzC,IAAI,QAAQ,GAAG,CAAC,EAAE,CAAC;gCACjB,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;4BACtC,CAAC;iCAAM,CAAC;gCACN,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;4BACpC,CAAC;4BACD,IAAM,GAAG,GAAG,IAAA,6BAAiB,EAAC,UAAG,QAAQ,CAAE,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;4BACpE,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;4BACxB,MAAM;wBACR,CAAC;gBACL,CAAC;YACH,CAAC;QACH,CAAC;QAED,0EAA0E;QAC1E,IAAI,WAAW,KAAK,CAAC,CAAC,EAAE,CAAC;YACvB,IAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YAC5C,IAAM,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAClC,IAAI,cAAc,EAAE,CAAC;gBACnB,IAAI,aAAa,CAAC,OAAO,CAAC,KAAK,EAAE,cAAc,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;oBACrF,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,EAAE,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;gBACjE,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,IAAI,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;oBAC5E,GAAG,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,EAAE,QAAQ,EAAE,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;gBACtE,CAAC;YACH,CAAC;QACH,CAAC;QAED,OAAO,GAAG,CAAC,MAAM,EAAE,CAAC;IACtB,CAAC;IAED,+BAAK,GAAL;QACE,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC;IAC/B,CAAC;IAED,8BAAI,GAAJ,UAAK,IAAY,EAAE,KAAa;QAC9B,IAAM,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QACvB,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACnB,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC;IACpB,CAAC;IAED,8BAAI,GAAJ,UAAK,QAA0B,EAAE,GAAW;QAAE,cAAY;aAAZ,UAAY,EAAZ,qBAAY,EAAZ,IAAY;YAAZ,6BAAY;;QACxD,IAAM,GAAG,GAAqB,IAAI,CAAC,KAAK,EAAE,CAAC;QAC3C,IAAM,OAAO,GAAG,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAC3C,KAAgB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO,EAAE,CAAC;YAArB,IAAM,CAAC,gBAAA;YACV,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE,CAAC;gBAC1B,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;YACxB,CAAC;iBAAM,CAAC;gBACN,IAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBAClB,0DAA0D;gBAC1D,yDAAyD;gBACzD,yDAAyD;gBACzD,oBAAoB;gBACpB,0BAA0B;gBAC1B,IAAI,CAAC,KAAK,SAAS,EAAE,CAAC;oBACpB,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAChB,CAAC;YACH,CAAC;QACH,CAAC;QACD,OAAO,GAAG,CAAC,MAAM,EAAE,CAAC;IACtB,CAAC;IAIH,sBAAC;AAAD,CAAC,AA5JD,IA4JC;AA5JqB,0CAAe;AA8JrC;;GAEG;AACH;IAA2C,iDAAuB;IAAlE;;IAOA,CAAC;IANC,qCAAK,GAAL;QACE,OAAO,IAAI,oBAAW,EAAE,CAAC;IAC3B,CAAC;IACD,yCAAS,GAAT,UAAU,QAAgB,EAAE,MAAc;QACxC,OAAO,IAAI,gCAAsB,EAAE,CAAC;IACtC,CAAC;IACH,4BAAC;AAAD,CAAC,AAPD,CAA2C,eAAe,GAOzD;AAPY,sDAAqB;AASlC;;GAEG;AACH;IAA0C,gDAAuB;IAAjE;;IAOA,CAAC;IANC,oCAAK,GAAL;QACE,OAAO,IAAI,mBAAU,EAAE,CAAC;IAC1B,CAAC;IACD,wCAAS,GAAT,UAAU,OAAe,EAAE,KAAa;QACtC,OAAO,IAAI,+BAAqB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACnD,CAAC;IACH,2BAAC;AAAD,CAAC,AAPD,CAA0C,eAAe,GAOxD;AAPY,oDAAoB;AASjC,gFAAgF;AAChF,8BAA8B;AAC9B,kEAAkE;AAClE,gEAAgE;AAChE,8CAA8C;AAC9C,gEAAgE;AAEhE,gCAAgC;AAChC,iFAAiF;AAEjF,4BAA4B;AAC5B,IAAM,oBAAoB,GACxB,meAAme,CAAC;AAEte,IAAM,WAAW,GACf,+eAA+e,CAAC;AAElf,IAAM,eAAe,GACnB,wJAAwJ,CAAC;AAE3J,IAAM,eAAe,GACnB,gSAAgS,CAAC;AAEnS,IAAM,YAAY,GAChB,6rCAA6rC,CAAC;AAEhsC,IAAM,eAAe,GAAG,mDAAmD,CAAC;AAE5E,IAAM,cAAc,GAAG,QAAQ,CAAC;AAEhC,IAAM,mBAAmB,GAAG,QAAQ,CAAC;AAErC;;GAEG;AACU,QAAA,SAAS,GAAG,IAAI,MAAM,CACjC,YAAK,WAAW,CAAC,MAAM,SAAG,eAAe,CAAC,MAAM,SAAG,eAAe,CAAC,MAAM,SAAG,YAAY,CAAC,MAAM,SAAG,eAAe,SAAG,cAAc,SAAG,mBAAmB,MAAG,CAC5J,CAAC;AAEF,2BAA2B;AAE3B;;GAEG;AACU,QAAA,QAAQ,GAAG,IAAI,MAAM,CAAC,YAAK,oBAAoB,CAAC,MAAM,MAAG,CAAC,CAAC;AAExE;;GAEG;AACU,QAAA,yBAAyB,GAA4C;IAChF,8DAA8D;IAC9D,0GAA0G;IAE1G,WAAW,EAAE,UAAC,CAAS,IAAK,OAAA,gBAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAhB,CAAgB;IAC5C,iBAAiB,EAAE,UAAC,CAAS,IAAK,OAAA,CAAC,iBAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAlB,CAAkB;CACrD,CAAC;AAEF,IAAM,aAAa,GAAG,UAAC,OAAgC,EAAE,QAAgB,EAAE,WAAmB;IAC5F,OAAO,CACL,iCAAyB,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC;QAC1D,iCAAyB,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,WAAW,CAAC,CACjE,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { Decimal, DecimalFormatter, Part, PartsDecimalFormatter, StringDecimalFormatter } from '@phensley/decimal';\n\nimport { CurrencySpacingPatterns, NumberParams } from '../../common/private';\nimport { NumberField, NumberPattern } from '../../parsing/number';\nimport { GeneralInternals, NumberRenderer } from '../internals';\nimport { fastFormatDecimal } from '../../systems/numbering';\nimport { AbstractValue, PartsValue, StringValue } from '../../utils/render';\n\n/**\n * @internal\n */\nexport abstract class NumberFormatter<R> implements NumberRenderer<R> {\n  constructor(private params: NumberParams) {}\n\n  render(\n    n: Decimal,\n    pattern: NumberPattern,\n    currencySymbol: string,\n    percentSymbol: string,\n    decimalSymbol: string,\n    minInt: number,\n    grouping: boolean = true,\n    exponent?: number,\n  ): R {\n    const { symbols } = this.params;\n    const currency: boolean = currencySymbol !== '';\n\n    const decimal = decimalSymbol\n      ? decimalSymbol\n      : currency\n        ? symbols.currencyDecimal || symbols.decimal\n        : symbols.decimal;\n    let group = '';\n    if (grouping) {\n      group = symbols.group;\n      if (currency) {\n        group = symbols.currencyGroup || group;\n      }\n    }\n\n    let { priGroup, secGroup } = pattern;\n    if (priGroup <= 0) {\n      priGroup = this.params.primaryGroupingSize;\n    }\n    if (secGroup <= 0) {\n      secGroup = this.params.secondaryGroupingSize;\n    }\n\n    const formatter = this.formatter(decimal, group);\n    n.format(\n      formatter,\n      decimal,\n      group,\n      minInt,\n      this.params.minimumGroupingDigits,\n      priGroup,\n      secGroup,\n      true, // zeroScale\n      this.params.digits,\n    );\n    const formatted = formatter.render();\n\n    const res: AbstractValue<R> = this.value();\n\n    let haveNumber = false;\n    let currencyBefore = false;\n    let currencyIdx = -1;\n    for (const node of pattern.nodes) {\n      if (typeof node === 'string') {\n        res.add('literal', node);\n      } else {\n        switch (node) {\n          case NumberField.CURRENCY: {\n            // Save the offset to the segment before or after the currency symbol.\n            currencyBefore = !haveNumber;\n            const i = res.length();\n            res.add('currency', currencySymbol);\n            const j = res.length();\n            currencyIdx = currencyBefore ? j : i - 1;\n            break;\n          }\n\n          case NumberField.MINUS:\n            res.add('minus', symbols.minusSign);\n            break;\n\n          case NumberField.PLUS:\n            res.add('plus', symbols.plusSign);\n            break;\n\n          case NumberField.NUMBER:\n            res.append(formatted);\n            haveNumber = true;\n            break;\n\n          case NumberField.PERCENT:\n            res.add('percent', percentSymbol);\n            break;\n\n          case NumberField.EXPONENT:\n            // Don't emit the exponent if undefined or zero\n            if (exponent) {\n              res.add('exponent', symbols.exponential);\n              if (exponent < 0) {\n                res.add('minus', symbols.minusSign);\n              } else {\n                res.add('plus', symbols.plusSign);\n              }\n              const exp = fastFormatDecimal(`${exponent}`, this.params.digits, 1);\n              res.add('integer', exp);\n              break;\n            }\n        }\n      }\n    }\n\n    // Adjust spacing between currency symbol based on surrounding characters.\n    if (currencyIdx !== -1) {\n      const spacing = this.params.currencySpacing;\n      const curr = res.get(currencyIdx);\n      if (currencyBefore) {\n        if (insertBetween(spacing.after, currencySymbol[currencySymbol.length - 1], curr[0])) {\n          res.insert(currencyIdx, 'spacer', spacing.after.insertBetween);\n        }\n      } else {\n        if (insertBetween(spacing.before, currencySymbol[0], curr[curr.length - 1])) {\n          res.insert(currencyIdx + 1, 'spacer', spacing.before.insertBetween);\n        }\n      }\n    }\n\n    return res.render();\n  }\n\n  empty(): R {\n    return this.value().render();\n  }\n\n  make(type: string, value: string): R {\n    const v = this.value();\n    v.add(type, value);\n    return v.render();\n  }\n\n  wrap(internal: GeneralInternals, raw: string, ...args: R[]): R {\n    const res: AbstractValue<R> = this.value();\n    const pattern = internal.parseWrapper(raw);\n    for (const n of pattern) {\n      if (typeof n === 'string') {\n        res.add('literal', n);\n      } else {\n        const v = args[n];\n        // The only way the else branch could be taken is if there\n        // is a mismatch between the CLDR wrapper pattern and the\n        // number of arguments passed in, e.g. \"{0} {1} {2}\" with\n        // only 2 arguments.\n        /* istanbul ignore else */\n        if (v !== undefined) {\n          res.append(v);\n        }\n      }\n    }\n    return res.render();\n  }\n\n  abstract value(): AbstractValue<R>;\n  abstract formatter(decimal: string, group: string): DecimalFormatter<R>;\n}\n\n/**\n * @internal\n */\nexport class StringNumberFormatter extends NumberFormatter<string> {\n  value(): AbstractValue<string> {\n    return new StringValue();\n  }\n  formatter(_decimal: string, _group: string): DecimalFormatter<string> {\n    return new StringDecimalFormatter();\n  }\n}\n\n/**\n * @internal\n */\nexport class PartsNumberFormatter extends NumberFormatter<Part[]> {\n  value(): AbstractValue<Part[]> {\n    return new PartsValue();\n  }\n  formatter(decimal: string, group: string): DecimalFormatter<Part[]> {\n    return new PartsDecimalFormatter(decimal, group);\n  }\n}\n\n// Unicode ranges generated in Java from general categories, and translating the\n// corresponding Unicode sets.\n// https://www.unicode.org/reports/tr18/#General_Category_Property\n// https://www.unicode.org/reports/tr44/#General_Category_Values\n// https://www.unicode.org/reports/tr18/#digit\n// https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt\n\n// See Nd general category here:\n// https://www.unicode.org/Public/UCD/latest/ucd/extracted/DerivedNumericType.txt\n\n/* eslint-disable max-len */\nconst DECIMAL_DIGIT_NUMBER =\n  /\\u0030-\\u0039\\u0660-\\u0669\\u06f0-\\u06f9\\u07c0-\\u07c9\\u0966-\\u096f\\u09e6-\\u09ef\\u0a66-\\u0a6f\\u0ae6-\\u0aef\\u0b66-\\u0b6f\\u0be6-\\u0bef\\u0c66-\\u0c6f\\u0ce6-\\u0cef\\u0d66-\\u0d6f\\u0de6-\\u0def\\u0e50-\\u0e59\\u0ed0-\\u0ed9\\u0f20-\\u0f29\\u1040-\\u1049\\u1090-\\u1099\\u17e0-\\u17e9\\u1810-\\u1819\\u1946-\\u194f\\u19d0-\\u19d9\\u1a80-\\u1a89\\u1a90-\\u1a99\\u1b50-\\u1b59\\u1bb0-\\u1bb9\\u1c40-\\u1c49\\u1c50-\\u1c59\\ua620-\\ua629\\ua8d0-\\ua8d9\\ua900-\\ua909\\ua9d0-\\ua9d9\\ua9f0-\\ua9f9\\uaa50-\\uaa59\\uabf0-\\uabf9\\uff10-\\uff19/;\n\nconst MATH_SYMBOL =\n  /\\u002b\\u003c-\\u003e\\u007c\\u007e\\u00ac\\u00b1\\u00d7\\u00f7\\u03f6\\u0606-\\u0608\\u2044\\u2052\\u207a-\\u207c\\u208a-\\u208c\\u2118\\u2140-\\u2144\\u214b\\u2190-\\u2194\\u219a-\\u219b\\u21a0\\u21a3\\u21a6\\u21ae\\u21ce-\\u21cf\\u21d2\\u21d4\\u21f4-\\u22ff\\u2320-\\u2321\\u237c\\u239b-\\u23b3\\u23dc-\\u23e1\\u25b7\\u25c1\\u25f8-\\u25ff\\u266f\\u27c0-\\u27c4\\u27c7-\\u27e5\\u27f0-\\u27ff\\u2900-\\u2982\\u2999-\\u29d7\\u29dc-\\u29fb\\u29fe-\\u2aff\\u2b30-\\u2b44\\u2b47-\\u2b4c\\ufb29\\ufe62\\ufe64-\\ufe66\\uff0b\\uff1c-\\uff1e\\uff5c\\uff5e\\uffe2\\uffe9-\\uffec/;\n\nconst CURRENCY_SYMBOL =\n  /\\u0024\\u00a2-\\u00a5\\u058f\\u060b\\u07fe-\\u07ff\\u09f2-\\u09f3\\u09fb\\u0af1\\u0bf9\\u0e3f\\u17db\\u20a0-\\u20bf\\ua838\\ufdfc\\ufe69\\uff04\\uffe0-\\uffe1\\uffe5-\\uffe6/;\n\nconst MODIFIER_SYMBOL =\n  /\\u005e\\u0060\\u00a8\\u00af\\u00b4\\u00b8\\u02c2-\\u02c5\\u02d2-\\u02df\\u02e5-\\u02eb\\u02ed\\u02ef-\\u02ff\\u0375\\u0384-\\u0385\\u1fbd\\u1fbf-\\u1fc1\\u1fcd-\\u1fcf\\u1fdd-\\u1fdf\\u1fed-\\u1fef\\u1ffd-\\u1ffe\\u309b-\\u309c\\ua700-\\ua716\\ua720-\\ua721\\ua789-\\ua78a\\uab5b\\uab6a-\\uab6b\\ufbb2-\\ufbc1\\uff3e\\uff40\\uffe3/;\n\nconst OTHER_SYMBOL =\n  /\\u00a6\\u00a9\\u00ae\\u00b0\\u0482\\u058d-\\u058e\\u060e-\\u060f\\u06de\\u06e9\\u06fd-\\u06fe\\u07f6\\u09fa\\u0b70\\u0bf3-\\u0bf8\\u0bfa\\u0c7f\\u0d4f\\u0d79\\u0f01-\\u0f03\\u0f13\\u0f15-\\u0f17\\u0f1a-\\u0f1f\\u0f34\\u0f36\\u0f38\\u0fbe-\\u0fc5\\u0fc7-\\u0fcc\\u0fce-\\u0fcf\\u0fd5-\\u0fd8\\u109e-\\u109f\\u1390-\\u1399\\u166d\\u1940\\u19de-\\u19ff\\u1b61-\\u1b6a\\u1b74-\\u1b7c\\u2100-\\u2101\\u2103-\\u2106\\u2108-\\u2109\\u2114\\u2116-\\u2117\\u211e-\\u2123\\u2125\\u2127\\u2129\\u212e\\u213a-\\u213b\\u214a\\u214c-\\u214d\\u214f\\u218a-\\u218b\\u2195-\\u2199\\u219c-\\u219f\\u21a1-\\u21a2\\u21a4-\\u21a5\\u21a7-\\u21ad\\u21af-\\u21cd\\u21d0-\\u21d1\\u21d3\\u21d5-\\u21f3\\u2300-\\u2307\\u230c-\\u231f\\u2322-\\u2328\\u232b-\\u237b\\u237d-\\u239a\\u23b4-\\u23db\\u23e2-\\u2426\\u2440-\\u244a\\u249c-\\u24e9\\u2500-\\u25b6\\u25b8-\\u25c0\\u25c2-\\u25f7\\u2600-\\u266e\\u2670-\\u2767\\u2794-\\u27bf\\u2800-\\u28ff\\u2b00-\\u2b2f\\u2b45-\\u2b46\\u2b4d-\\u2b73\\u2b76-\\u2b95\\u2b97-\\u2bff\\u2ce5-\\u2cea\\u2e50-\\u2e51\\u2e80-\\u2e99\\u2e9b-\\u2ef3\\u2f00-\\u2fd5\\u2ff0-\\u2ffb\\u3004\\u3012-\\u3013\\u3020\\u3036-\\u3037\\u303e-\\u303f\\u3190-\\u3191\\u3196-\\u319f\\u31c0-\\u31e3\\u3200-\\u321e\\u322a-\\u3247\\u3250\\u3260-\\u327f\\u328a-\\u32b0\\u32c0-\\u33ff\\u4dc0-\\u4dff\\ua490-\\ua4c6\\ua828-\\ua82b\\ua836-\\ua837\\ua839\\uaa77-\\uaa79\\ufdfd\\uffe4\\uffe8\\uffed-\\uffee\\ufffc-\\ufffd/;\n\nconst SPACE_SEPARATOR = /\\u0020\\u00a0\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000/;\n\nconst LINE_SEPARATOR = /\\u2028/;\n\nconst PARAGRAPH_SEPARATOR = /\\u2029/;\n\n/**\n * @internal\n */\nexport const RE_SYMBOL = new RegExp(\n  `^[${MATH_SYMBOL.source}${CURRENCY_SYMBOL.source}${MODIFIER_SYMBOL.source}${OTHER_SYMBOL.source}${SPACE_SEPARATOR}${LINE_SEPARATOR}${PARAGRAPH_SEPARATOR}]`,\n);\n\n/* eslint-enable max-len */\n\n/**\n * @internal\n */\nexport const RE_DIGIT = new RegExp(`^[${DECIMAL_DIGIT_NUMBER.source}]`);\n\n/**\n * @internal\n */\nexport const CURRENCY_SPACING_MATCHERS: { [x: string]: (s: string) => boolean } = {\n  // Exhaustive list of currency spacing matchers from scanning.\n  // find cldr-data -name numbers.json -exec egrep -e '(currencyMatch|surroundingMatch)' {} \\;|sort |uniq -c\n\n  '[:digit:]': (s: string) => RE_DIGIT.test(s),\n  '[[:^S:]&[:^Z:]]': (s: string) => !RE_SYMBOL.test(s),\n};\n\nconst insertBetween = (spacing: CurrencySpacingPatterns, currency: string, surrounding: string): boolean => {\n  return (\n    CURRENCY_SPACING_MATCHERS[spacing.currencyMatch](currency) &&\n    CURRENCY_SPACING_MATCHERS[spacing.surroundingMatch](surrounding)\n  );\n};\n"]}