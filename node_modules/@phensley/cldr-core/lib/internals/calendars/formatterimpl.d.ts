import { CalendarSchema } from '@phensley/cldr-types';
import { Internals } from '../internals';
import { CalendarDate } from '../../systems/calendars';
import { DateTimeNode } from '../../parsing/date';
import { AbstractValue } from '../../utils/render';
import { CalendarContext, CalendarFormatter } from './formatter';
export declare class CalendarFormatterImpl<T extends CalendarDate> implements CalendarFormatter<T> {
    private internals;
    private cal;
    private general;
    private tz;
    constructor(internals: Internals, cal: CalendarSchema);
    format<R>(val: AbstractValue<R>, ctx: CalendarContext<T>, nodes: DateTimeNode[], first?: boolean): void;
    private _formatQuarterOrMonth;
    private quarter;
    private month;
    private _weekday;
    private _weekdayLocal;
    private dayPeriodExt;
    private dayPeriodFlex;
    private hour;
    private hourAlt;
    private fractionalSecond;
    /**
     * Timezone: short/long specific non-location format.
     * https://www.unicode.org/reports/tr35/tr35-dates.html#dfst-zone
     */
    private timezone_z;
    /**
     * Timezone: ISO8601 basic/extended format, long localized GMT format.
     * https://www.unicode.org/reports/tr35/tr35-dates.html#dfst-zone
     */
    private timezone_Z;
    /**
     * Timezone: short/long localized GMT format.
     */
    private timezone_O;
    /**
     * Timezone: short/long generic non-location format.
     */
    private timezone_v;
    /**
     * Timezone: short/long zone ID, exemplar city, generic location format.
     * https://www.unicode.org/reports/tr35/tr35-dates.html#dfst-zone
     */
    private timezone_V;
    /**
     * Timezone: ISO8601 basic format
     * https://www.unicode.org/reports/tr35/tr35-dates.html#dfst-zone
     */
    private timezone_x;
    private _wrapGMT;
    private _hourPattern;
}
