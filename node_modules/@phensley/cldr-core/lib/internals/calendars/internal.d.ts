import { DayPeriodType } from '@phensley/cldr-types';
import { CalendarDate, CalendarType } from '../../systems/calendars';
import { Bundle } from '../../resource';
import { CalendarInternals } from '../internals';
import { AbstractValue } from '../../utils/render';
import { CalendarContext, CalendarFormatter } from './formatter';
import { Internals } from '../internals';
import { DateTimeNode } from '../../parsing/date';
/**
 * Framework scoped calendar functions.
 *
 * @internal
 */
export declare class CalendarInternalsImpl implements CalendarInternals {
    private internals;
    private schema;
    private dayPeriodRules;
    private patternCache;
    private hourPatternCache;
    private calendarFormatterCache;
    private availableCalendars;
    constructor(internals: Internals, cacheSize: number);
    flexDayPeriod(bundle: Bundle, minutes: number): DayPeriodType | undefined;
    getCalendarFormatter(type: CalendarType): CalendarFormatter<CalendarDate>;
    parseDatePattern(raw: string): DateTimeNode[];
    getHourPattern(raw: string, negative: boolean): DateTimeNode[];
    weekFirstDay(region: string): number;
    weekMinDays(region: string): number;
    formatDateTime<R>(calendar: CalendarType, ctx: CalendarContext<CalendarDate>, value: AbstractValue<R>, first: boolean, date?: DateTimeNode[], time?: DateTimeNode[], wrapper?: string): R;
    formatInterval<R>(calendar: CalendarType, ctx: CalendarContext<CalendarDate>, value: AbstractValue<R>, first: boolean, end: CalendarDate, pattern: DateTimeNode[]): R;
    selectCalendar(bundle: Bundle, ca?: CalendarType): CalendarType;
    /**
     * Translates a string into a supported calendar type, or undefined if none match.
     */
    private supportedCalendar;
}
