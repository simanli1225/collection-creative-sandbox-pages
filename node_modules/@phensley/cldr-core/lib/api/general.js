"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneralImpl = void 0;
var tslib_1 = require("tslib");
var messageformat_1 = require("@phensley/messageformat");
var language_tag_1 = require("@phensley/language-tag");
var locale_1 = require("@phensley/locale");
var DEFAULT_NAME_OPTIONS = { context: 'begin-sentence' };
var F_LANG_REGION = function (t) { return "".concat(t.language(), "-").concat(t.region()); };
var F_LANG_SCRIPT = function (t) { return "".concat(t.language(), "-").concat(t.script()); };
var LANGUAGE_FUNCS = [F_LANG_REGION, F_LANG_SCRIPT, function (t) { return t.language(); }];
/**
 * @internal
 */
var GeneralImpl = /** @class */ (function () {
    function GeneralImpl(_bundle, _locale, internal, _private) {
        this._bundle = _bundle;
        this._locale = _locale;
        this.general = internal.general;
        this.names = internal.schema.Names;
        this.transform = _private.getContextTransformInfo();
    }
    GeneralImpl.prototype.characterOrder = function () {
        return this.general.characterOrder(this._bundle);
    };
    GeneralImpl.prototype.lineOrder = function () {
        return this.general.lineOrder(this._bundle);
    };
    GeneralImpl.prototype.bundle = function () {
        return this._bundle;
    };
    GeneralImpl.prototype.locale = function () {
        return this._locale;
    };
    GeneralImpl.prototype.resolveLocale = function (id) {
        var _id = typeof id === 'string' ? id : id.compact();
        var tag = locale_1.LanguageResolver.resolve(id);
        return { id: _id, tag: tag };
    };
    GeneralImpl.prototype.parseLanguageTag = function (tag) {
        return (0, language_tag_1.parseLanguageTag)(tag);
    };
    GeneralImpl.prototype.messageFormatter = function (options) {
        var plurals = this._bundle.plurals();
        return new messageformat_1.MessageFormatter(tslib_1.__assign(tslib_1.__assign({}, options), { plurals: plurals }));
    };
    GeneralImpl.prototype.measurementSystem = function (category) {
        var region = this._bundle.region();
        switch (category) {
            case 'temperature':
                switch (region) {
                    case 'BS':
                    case 'BZ':
                    case 'PR':
                    case 'PW':
                        return 'us';
                    default:
                        return 'metric';
                }
            default:
                switch (region) {
                    case 'GB':
                        return 'uk';
                    case 'LR':
                    case 'MM':
                    case 'US':
                        return 'us';
                    default:
                        return 'metric';
                }
        }
    };
    GeneralImpl.prototype.formatList = function (items, type) {
        return this.general.formatList(this._bundle, items, type || 'and');
    };
    GeneralImpl.prototype.formatListToParts = function (items, type) {
        return this.general.formatListToParts(this._bundle, items, type || 'and');
    };
    GeneralImpl.prototype.getLanguageDisplayName = function (code, options) {
        if (options === void 0) { options = DEFAULT_NAME_OPTIONS; }
        var type = options.type || 'none';
        var arrow = this.names.languages.displayName;
        var tag = typeof code === 'string' ? (0, language_tag_1.parseLanguageTag)(code) : code;
        var s = '';
        // First attempt to match the exact string
        if (typeof code === 'string') {
            s = this._getVectorAlt(arrow, code, type);
        }
        // Try language + region
        if (!s && tag.hasLanguage() && tag.hasRegion()) {
            s = this._getVectorAlt(arrow, F_LANG_REGION(tag), type);
        }
        // Try language + script
        if (!s && tag.hasLanguage() && tag.hasScript()) {
            s = this._getVectorAlt(arrow, F_LANG_SCRIPT(tag), type);
        }
        // Try language if script and region are empty
        if (!s && !tag.hasScript() && !tag.hasRegion()) {
            s = this._getVectorAlt(arrow, tag.language(), type);
        }
        // Resolve to fill in unknown subtags, then attempt combinations
        if (!s) {
            var locale = this.resolveLocale(tag);
            tag = locale.tag;
            for (var _i = 0, LANGUAGE_FUNCS_1 = LANGUAGE_FUNCS; _i < LANGUAGE_FUNCS_1.length; _i++) {
                var func = LANGUAGE_FUNCS_1[_i];
                var id = func(tag);
                s = this._getVectorAlt(arrow, id, type);
                if (s) {
                    // Found one
                    break;
                }
            }
        }
        return this.general.contextTransform(s, this.transform, _ctx(options), 'languages');
    };
    GeneralImpl.prototype.getScriptDisplayName = function (code, options) {
        if (options === void 0) { options = DEFAULT_NAME_OPTIONS; }
        var arrow = this.names.scripts.displayName;
        var type = options.type || 'none';
        var s = '';
        if (typeof code === 'string') {
            s = this._getVectorAlt(arrow, code, type);
            // If language is blank or we have an explicit script subtag, use the
            // script subtag as-is. This will resolve "und-Zzzz" to "Unknown" but
            // "en-Zzzz" will fall through to resolve "Latin"
        }
        else if (!code.hasLanguage() || code.hasScript()) {
            s = this._getVectorAlt(arrow, code.script(), type);
        }
        if (!s) {
            // Resolve to populate the script
            var locale = this.resolveLocale(code);
            s = this._getVectorAlt(arrow, locale.tag.script(), type);
        }
        return this.general.contextTransform(s, this.transform, _ctx(options), 'script');
    };
    GeneralImpl.prototype.getRegionDisplayName = function (code, options) {
        if (options === void 0) { options = DEFAULT_NAME_OPTIONS; }
        var arrow = this.names.regions.displayName;
        var type = options.type || 'none';
        var s = '';
        if (typeof code === 'string') {
            s = this._getVectorAlt(arrow, code, type);
            // If language is blank or we have an explicit region subtag, use
            // the region subtag as-is. This will resolve "und-ZZ" to "Unknown" but
            // "en-Zzzz" will fall through to resolve "United States"
        }
        else if (!code.hasLanguage() || code.hasRegion()) {
            s = this._getVectorAlt(arrow, code.region(), type);
        }
        if (!s) {
            // Resolve to populate the region
            var tag = this.resolveLocale(code).tag;
            s = this._getVectorAlt(arrow, tag.region(), type);
        }
        // No context transform for region
        return s;
    };
    // Check if the given alt type field exists, and fall back to alt type 'none'
    GeneralImpl.prototype._getVectorAlt = function (arrow, code, type) {
        return arrow.get(this._bundle, type, code) || arrow.get(this._bundle, 'none', code);
    };
    return GeneralImpl;
}());
exports.GeneralImpl = GeneralImpl;
// Default an options context value
var _ctx = function (o) { return _def(o, 'context', 'begin-sentence'); };
// Default an option value
var _def = function (o, k, t) { return o[k] || t; };
//# sourceMappingURL=general.js.map