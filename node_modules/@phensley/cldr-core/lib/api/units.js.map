{"version":3,"file":"units.js","sourceRoot":"","sources":["../../src/api/units.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnitType } from '@phensley/cldr-types';\nimport { Part } from '@phensley/decimal';\n\nimport { GeneralInternals, Internals, NumberInternals, UnitInternals } from '../internals';\nimport { ListPatternType, Quantity, UnitFormatOptions, UnitLength } from '../common';\nimport { Bundle } from '../resource';\nimport { PartsValue } from '../utils/render';\n\nimport { Units } from './api';\nimport { PrivateApiImpl } from './private';\n\nconst DEFAULT_OPTIONS: UnitFormatOptions = { length: 'long', style: 'decimal' };\n\n/**\n * @internal\n */\nexport class UnitsImpl implements Units {\n  private general: GeneralInternals;\n  private numbers: NumberInternals;\n  private units: UnitInternals;\n\n  constructor(\n    private bundle: Bundle,\n    private internal: Internals,\n    private privateApi: PrivateApiImpl,\n  ) {\n    this.general = internal.general;\n    this.numbers = internal.numbers;\n    this.units = internal.units;\n  }\n\n  availableUnits(): UnitType[] {\n    return this.internal.indices['unit-id'].keys.slice(0) as UnitType[];\n  }\n\n  getUnitDisplayName(name: UnitType, length?: UnitLength): string {\n    return this.units.getDisplayName(this.bundle, name, length || 'long');\n  }\n\n  formatQuantity(q: Quantity, options?: UnitFormatOptions): string {\n    options = options || DEFAULT_OPTIONS;\n    const params = this.privateApi.getNumberParams(options.nu);\n    const renderer = this.numbers.stringRenderer(params);\n    return this.units.format(this.bundle, renderer, q, options, params);\n  }\n\n  formatQuantityToParts(q: Quantity, options?: UnitFormatOptions): Part[] {\n    options = options || DEFAULT_OPTIONS;\n    const params = this.privateApi.getNumberParams(options.nu);\n    const renderer = this.numbers.partsRenderer(params);\n    return this.units.format(this.bundle, renderer, q, options, params);\n  }\n\n  formatQuantitySequence(qs: Quantity[], options?: UnitFormatOptions): string {\n    options = options || DEFAULT_OPTIONS;\n    const items = qs.map((q) => this.formatQuantity(q, options));\n    const type = this.selectListType(options);\n    return this.general.formatList(this.bundle, items, type);\n  }\n\n  formatQuantitySequenceToParts(qs: Quantity[], options?: UnitFormatOptions): Part[] {\n    options = options || DEFAULT_OPTIONS;\n    const parts: Part[][] = qs.map((q) => this.formatQuantityToParts(q, options));\n    const type = this.selectListType(options);\n    return this.general.formatListImpl(this.bundle, new PartsValue(), parts, type);\n  }\n\n  protected selectListType(options: UnitFormatOptions): ListPatternType {\n    switch (options.length) {\n      case 'narrow':\n        return 'unit-narrow';\n      case 'short':\n        return 'unit-short';\n      default:\n        return 'unit-long';\n    }\n  }\n}\n"]}