{"version":3,"file":"api.js","sourceRoot":"","sources":["../../src/api/api.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  CharacterOrderType,\n  CurrencyType,\n  DateFieldType,\n  DateTimePatternFieldType,\n  LineOrderType,\n  RelativeTimeFieldType,\n  UnitType,\n} from '@phensley/cldr-types';\n\nimport { MessageFormatter, MessageFormatterOptions } from '@phensley/messageformat';\nimport { Decimal, DecimalArg, Part } from '@phensley/decimal';\nimport { ZoneInfo } from '@phensley/timezone';\n\nimport {\n  CalendarFieldsOptions,\n  CurrencyDisplayNameOptions,\n  CurrencyFormatOptions,\n  CurrencyFractions,\n  CurrencySymbolWidthType,\n  DateFieldFormatOptions,\n  DateFormatOptions,\n  DateIntervalFormatOptions,\n  DateRawFormatOptions,\n  DateWrapperFormatOptions,\n  DecimalAdjustOptions,\n  DecimalFormatOptions,\n  DisplayNameOptions,\n  EraFieldOptions,\n  ListPatternType,\n  MeasurementCategory,\n  MeasurementSystem,\n  Quantity,\n  RelativeTimeFieldFormatOptions,\n  RelativeTimeFormatOptions,\n  TimeData,\n  TimeZoneInfo,\n  UnitFormatOptions,\n  UnitLength,\n  ZonedDateTime,\n} from '../common';\n\nimport { Bundle } from '../resource';\nimport { LanguageTag } from '@phensley/language-tag';\nimport { Locale } from '@phensley/locale';\n\nimport {\n  BuddhistDate,\n  CalendarDate,\n  CalendarDateFields,\n  GregorianDate,\n  ISO8601Date,\n  JapaneseDate,\n  PersianDate,\n  TimePeriod,\n} from '../systems/calendars';\n\n/**\n * Calendar, date and time functions.\n *\n * @public\n */\nexport interface Calendars {\n  /**\n   * First day of the week for this locale, e.g. 1=SUN, 2=MON, etc.\n   */\n  firstDayOfWeek(): number;\n\n  /**\n   * Minimum number of days to count as a new week in a month or year in this locale.\n   */\n  minDaysInFirstWeek(): number;\n\n  /**\n   * Date field's string representation for this locale.\n   */\n  dateField(type: DateFieldType, options?: DateFieldFormatOptions): string;\n\n  /**\n   * Mapping of all day periods for this locale.\n   */\n  dayPeriods(options?: CalendarFieldsOptions): any;\n\n  /**\n   * Mapping of all eras for this locale.\n   */\n  eras(options?: EraFieldOptions): any;\n\n  /**\n   * Mapping of all months for this locale.\n   */\n  months(options?: CalendarFieldsOptions): any;\n\n  /**\n   * Mapping of all quarters for this locale.\n   */\n  quarters(options?: CalendarFieldsOptions): any;\n\n  /**\n   * Mapping of all weekdays for this locale.\n   */\n  weekdays(options?: CalendarFieldsOptions): any;\n\n  /**\n   * Convert a date time into a date in the Buddhist calendar, with locale-specific\n   * week data.\n   */\n  toBuddhistDate(date: CalendarDate | ZonedDateTime | Date): BuddhistDate;\n\n  /**\n   * Construct a new date in the Buddhist calendar with the given fields.\n   */\n  newBuddhistDate(fields: Partial<CalendarDateFields>): BuddhistDate;\n\n  /**\n   * Convert a date time into a date in the Gregorian calendar, with locale-specific\n   * week data.\n   */\n  toGregorianDate(date: CalendarDate | ZonedDateTime | Date): GregorianDate;\n\n  /**\n   * Construct a new date in the Gregorian calendar with the given fields.\n   */\n  newGregorianDate(fields: Partial<CalendarDateFields>): GregorianDate;\n\n  /**\n   * Convert a date time into a date in the ISO-8601 calendar, with ISO week data.\n   */\n  toISO8601Date(date: CalendarDate | ZonedDateTime | Date): ISO8601Date;\n\n  /**\n   * Construct a new date in the ISO-8601 calendar with the given fields.\n   */\n  newISO8601Date(fields: Partial<CalendarDateFields>): ISO8601Date;\n\n  /**\n   * Convert a date time into a date in the Japanese calendar, with locale-specific\n   * week data.\n   */\n  toJapaneseDate(date: CalendarDate | ZonedDateTime | Date): JapaneseDate;\n\n  /**\n   * Construct a new date in the Japanese calendar with the given fields.\n   */\n  newJapaneseDate(fields: Partial<CalendarDateFields>): JapaneseDate;\n\n  /**\n   * Convert a date time into a date in the Persian calendar, with locale-specific\n   * week data.\n   */\n  toPersianDate(date: CalendarDate | ZonedDateTime | Date): PersianDate;\n\n  /**\n   * Construct a new date in the Persian calendar with the given fields.\n   */\n  newPersianDate(fields: Partial<CalendarDateFields>): PersianDate;\n\n  /**\n   * Calculate the field of visual difference between two dates. This can be used\n   * to choose an appropriate date or time skeleton for interval formatting.\n   */\n  fieldOfVisualDifference(\n    a: CalendarDate | ZonedDateTime | Date,\n    b: CalendarDate | ZonedDateTime | Date,\n  ): DateTimePatternFieldType;\n\n  /**\n   * Formats a date-time value to string.\n   */\n  formatDate(date: CalendarDate | ZonedDateTime | Date, options?: DateFormatOptions): string;\n\n  /**\n   * Formats a date-time value to an array of parts.\n   */\n  formatDateToParts(date: CalendarDate | ZonedDateTime | Date, options?: DateFormatOptions): Part[];\n\n  /**\n   * Formats a date-time interval for the given skeleton to string.\n   */\n  formatDateInterval(\n    start: CalendarDate | ZonedDateTime | Date,\n    end: CalendarDate | ZonedDateTime | Date,\n    options?: DateIntervalFormatOptions,\n  ): string;\n\n  /**\n   * Formats a date-time interval for the given skeleton to an array of parts.\n   */\n  formatDateIntervalToParts(\n    start: CalendarDate | ZonedDateTime | Date,\n    end: CalendarDate | ZonedDateTime | Date,\n    options?: DateIntervalFormatOptions,\n  ): Part[];\n\n  /**\n   * Formats a relative time field to string.\n   */\n  formatRelativeTimeField(\n    value: DecimalArg,\n    field: RelativeTimeFieldType,\n    options?: RelativeTimeFieldFormatOptions,\n  ): string;\n\n  /**\n   * Formats the relative time from a start to end date.\n   */\n  formatRelativeTime(\n    start: CalendarDate | ZonedDateTime | Date,\n    end: CalendarDate | ZonedDateTime | Date,\n    options?: RelativeTimeFormatOptions,\n  ): string;\n\n  /**\n   * Formats a date-time value to string using a raw date-time pattern.\n   *\n   * Warning: You should not use this for general formatting.\n   */\n  formatDateRaw(date: CalendarDate | ZonedDateTime | Date, options?: DateRawFormatOptions): string;\n\n  /**\n   * Formats a date-time value to an array of parts using a raw date-time pattern.\n   *\n   * Warning: You should not use this for general formatting.\n   */\n  formatDateRawToParts(date: CalendarDate | ZonedDateTime | Date, options?: DateRawFormatOptions): Part[];\n\n  /**\n   * Formats a date and time string together using a wrapper format of the given width. This can be\n   * used when you need to format a date and time string separately and join them together.\n   */\n  formatDateWrapper(date: string, time: string, options?: DateWrapperFormatOptions): string;\n\n  /**\n   * Formats  date and time `Part[]` together using a wrapper format of the given width. This can be\n   * used when you need to format a date and time string separately and join them together.\n   */\n  formatDateWrapperToParts(date: Part[], time: Part[], options?: DateWrapperFormatOptions): Part[];\n\n  /**\n   * Return information about the locale's preferred and allowed time cycles.\n   */\n  timeData(): TimeData;\n\n  /**\n   * Return an array containing the official TZDB timezone identifiers.\n   */\n  timeZoneIds(): string[];\n\n  /**\n   * Resolve a timezone id / alias to the official TZDB identifier.\n   */\n  resolveTimeZoneId(zoneid: string): string | undefined;\n\n  /**\n   * Return additional information for a timezone id, including the\n   * localized exemplar city, e.g. `{ id: \"America/New_York\", city: { name: \"New York\" } }`\n   */\n  timeZoneInfo(zoneid: string): TimeZoneInfo;\n\n  /**\n   * Convert a time period into a quantiy sequence, for unit formatting, e.g. \"1 year, 2 months\".\n   */\n  timePeriodToQuantity(period: Partial<TimePeriod>): Quantity[];\n\n  /**\n   * Lookup the time zone info for the given UTC timestamp (in milliseconds).\n   * Info includes the abbreviation, offset, daylight savings flag. Returns undefined if the\n   * zoneid doesn't exist.\n   */\n  timeZoneFromUTC(utc: number, zoneid: string): ZoneInfo | undefined;\n\n  /**\n   * Lookup the time zone info for the given local \"wall clock\" timestamp (in milliseconds).\n   * It also returns the corresponding UTC timestamp. Info includes the abbreviation, offset,\n   * daylight savings flag. Returns undefined if the zoneid doesn't exist.\n   */\n  timeZoneFromWall(wall: number, zoneid: string): [number, ZoneInfo] | undefined;\n}\n\n/**\n * General functions.\n *\n * @public\n */\nexport interface General {\n  /**\n   * Returns the character order for the current locale, e.g. \"ltr\" for left-to-right\n   * or \"rtl\" for right-to-left.\n   */\n  characterOrder(): CharacterOrderType;\n\n  /**\n   * Returns the line order for the current locale, e.g. \"ttb\" for top-to-bottom\n   * or \"btt\" for bottom-to-top.\n   */\n  lineOrder(): LineOrderType;\n\n  /**\n   * Returns the resource bundle for the current locale.\n   */\n  bundle(): Bundle;\n\n  /**\n   * Returns the current locale.\n   */\n  locale(): Locale;\n\n  /**\n   * Resolves the given language tag into a locale.\n   */\n  resolveLocale(id: string | LanguageTag): Locale;\n\n  /**\n   * Parses a language tag and canonicalizes its fields.\n   */\n  parseLanguageTag(tag: string): LanguageTag;\n\n  /**\n   * Returns a message formatter instance for the current locale.\n   */\n  messageFormatter(options?: MessageFormatterOptions): MessageFormatter;\n\n  /**\n   * Returns the measurement system in use for the current locale generally,\n   * or for a specific measurement category. For example, to get the correct\n   * measurement system for temperature you must pass in the category 'temperature'.\n   */\n  measurementSystem(category?: MeasurementCategory): MeasurementSystem;\n\n  /**\n   * Format a message with the given arguments.\n   */\n  // formatMessage(message: string, positional: MessageArg[], named: MessageNamedArgs): string;\n\n  /**\n   * Format a list of items to string using the given list type.\n   */\n  formatList(items: string[], type?: ListPatternType): string;\n\n  /**\n   * Format a list of items to an array of parts using the given list type.\n   */\n  formatListToParts(items: string[], type?: ListPatternType): Part[];\n\n  /**\n   * Returns the display name for the given language code.\n   */\n  getLanguageDisplayName(code: string | LanguageTag, options?: DisplayNameOptions): string;\n\n  /**\n   * Returns the display name for the given script code.\n   */\n  getScriptDisplayName(code: string | LanguageTag, options?: DisplayNameOptions): string;\n\n  /**\n   * Returns the display name for the given region code.\n   */\n  getRegionDisplayName(code: string | LanguageTag, options?: DisplayNameOptions): string;\n}\n\n/**\n * Number and currency functions.\n *\n * @public\n */\nexport interface Numbers {\n  /**\n   * Adjusts a decimal number using the given options.\n   */\n  adjustDecimal(num: DecimalArg, options?: DecimalAdjustOptions): Decimal;\n\n  /**\n   * Parses the string or JavaScript number and returns a Decimal instance.\n   */\n  parseDecimal(num: number | string): Decimal;\n\n  /**\n   * Formats a decimal number to string.\n   */\n  formatDecimal(num: DecimalArg, options?: DecimalFormatOptions): string;\n\n  /**\n   * Formats a decimal number to an array of parts.\n   */\n  formatDecimalToParts(num: DecimalArg, options?: DecimalFormatOptions): Part[];\n\n  /**\n   * Formats a currency value to string.\n   */\n  formatCurrency(num: DecimalArg, code: CurrencyType, options?: CurrencyFormatOptions): string;\n\n  /**\n   * Formats a currency value to an array of parts.\n   */\n  formatCurrencyToParts(num: DecimalArg, code: CurrencyType, options?: CurrencyFormatOptions): Part[];\n\n  /**\n   * Formats a decimal number using a rule-based number format.\n   */\n  // formatRuleBased(num: DecimalArg, options?: RuleBasedFormatOptions): string;\n\n  /**\n   * Returns the currency symbol of the given width.\n   */\n  getCurrencySymbol(code: CurrencyType, width?: CurrencySymbolWidthType): string;\n\n  /**\n   * Returns the display name of the currency.\n   */\n  getCurrencyDisplayName(code: CurrencyType, options?: CurrencyDisplayNameOptions): string;\n\n  /**\n   * Returns the pluralized display name of the currency.\n   */\n  getCurrencyPluralName(num: DecimalArg, code: CurrencyType, options?: CurrencyDisplayNameOptions): string;\n\n  /**\n   * Return the currency fraction info for a given currency code.\n   */\n  getCurrencyFractions(code: CurrencyType): CurrencyFractions;\n\n  /**\n   * Return the currency code to use for a given region.\n   */\n  getCurrencyForRegion(region: string): CurrencyType;\n\n  /**\n   * Returns the plural cardinal category of the given decimal number.\n   */\n  getPluralCardinal(n: DecimalArg, options?: DecimalAdjustOptions): string;\n\n  /**\n   * Returns the plural ordinal category of the given decimal number.\n   */\n  getPluralOrdinal(num: DecimalArg, options?: DecimalAdjustOptions): string;\n\n  /**\n   * Returns the list of available rule-based number formats for the current locale.\n   */\n  // ruleBasedFormatNames(): string[];\n}\n\n/**\n * Unit quantity functions.\n *\n * @public\n */\nexport interface Units {\n  /**\n   * Returns an array of available units.\n   */\n  availableUnits(): UnitType[];\n\n  /**\n   * Convert a decimal value between units.\n   */\n  // convertDecimal(n: Decimal, from: UnitType, to: UnitType, options?: UnitConvertOptions): Decimal | undefined;\n\n  /**\n   * Formats the given unit quantity to string.\n   */\n  formatQuantity(qty: Quantity, options?: UnitFormatOptions): string;\n\n  /**\n   * Formats the given unit quantity to an array of parts.\n   */\n  formatQuantityToParts(qty: Quantity, options?: UnitFormatOptions): Part[];\n\n  /**\n   * Formats the given unit quantity sequence to string.\n   */\n  formatQuantitySequence(qty: Quantity[], options?: UnitFormatOptions): string;\n\n  /**\n   * Formats the given unit quantity sequence to an array of parts.\n   */\n  formatQuantitySequenceToParts(qty: Quantity[], options?: UnitFormatOptions): Part[];\n\n  /**\n   * Returns the display name for the given unit.\n   */\n  getUnitDisplayName(name: UnitType, length?: UnitLength): string;\n}\n"]}