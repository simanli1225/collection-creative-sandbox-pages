"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnitsImpl = void 0;
var render_1 = require("../utils/render");
var DEFAULT_OPTIONS = { length: 'long', style: 'decimal' };
/**
 * @internal
 */
var UnitsImpl = /** @class */ (function () {
    function UnitsImpl(bundle, internal, privateApi) {
        this.bundle = bundle;
        this.internal = internal;
        this.privateApi = privateApi;
        this.general = internal.general;
        this.numbers = internal.numbers;
        this.units = internal.units;
    }
    UnitsImpl.prototype.availableUnits = function () {
        return this.internal.indices['unit-id'].keys.slice(0);
    };
    UnitsImpl.prototype.getUnitDisplayName = function (name, length) {
        return this.units.getDisplayName(this.bundle, name, length || 'long');
    };
    UnitsImpl.prototype.formatQuantity = function (q, options) {
        options = options || DEFAULT_OPTIONS;
        var params = this.privateApi.getNumberParams(options.nu);
        var renderer = this.numbers.stringRenderer(params);
        return this.units.format(this.bundle, renderer, q, options, params);
    };
    UnitsImpl.prototype.formatQuantityToParts = function (q, options) {
        options = options || DEFAULT_OPTIONS;
        var params = this.privateApi.getNumberParams(options.nu);
        var renderer = this.numbers.partsRenderer(params);
        return this.units.format(this.bundle, renderer, q, options, params);
    };
    UnitsImpl.prototype.formatQuantitySequence = function (qs, options) {
        var _this = this;
        options = options || DEFAULT_OPTIONS;
        var items = qs.map(function (q) { return _this.formatQuantity(q, options); });
        var type = this.selectListType(options);
        return this.general.formatList(this.bundle, items, type);
    };
    UnitsImpl.prototype.formatQuantitySequenceToParts = function (qs, options) {
        var _this = this;
        options = options || DEFAULT_OPTIONS;
        var parts = qs.map(function (q) { return _this.formatQuantityToParts(q, options); });
        var type = this.selectListType(options);
        return this.general.formatListImpl(this.bundle, new render_1.PartsValue(), parts, type);
    };
    UnitsImpl.prototype.selectListType = function (options) {
        switch (options.length) {
            case 'narrow':
                return 'unit-narrow';
            case 'short':
                return 'unit-short';
            default:
                return 'unit-long';
        }
    };
    return UnitsImpl;
}());
exports.UnitsImpl = UnitsImpl;
//# sourceMappingURL=units.js.map