{"version":3,"file":"calendars.js","sourceRoot":"","sources":["../../src/api/calendars.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ContextTransformFieldType,\n  ContextType,\n  DateFieldType,\n  DateTimePatternFieldType,\n  MetaZoneType,\n  RelativeTimeFieldType,\n} from '@phensley/cldr-types';\n\nimport { DecimalArg, Part } from '@phensley/decimal';\nimport { TZ, ZoneInfo } from '@phensley/timezone';\n\nimport { Bundle } from '../resource';\n\nimport {\n  CalendarFieldsOptions,\n  DateFieldFormatOptions,\n  DateFormatAltOptions,\n  DateFormatOptions,\n  DateIntervalFormatOptions,\n  DateRawFormatOptions,\n  DateWrapperFormatOptions,\n  EraFieldOptions,\n  MetazoneNames,\n  RelativeTimeFieldFormatOptions,\n  RelativeTimeFormatOptions,\n  TimeData,\n  TimeZoneInfo,\n  ZonedDateTime,\n} from '../common';\n\nimport { Internals } from '../internals';\nimport { Quantity } from '../common';\n\nimport {\n  BuddhistDate,\n  CalendarDate,\n  CalendarDateFields,\n  CalendarFromUnixEpoch,\n  CalendarType,\n  GregorianDate,\n  ISO8601Date,\n  JapaneseDate,\n  PersianDate,\n  TimePeriod,\n  TIME_PERIOD_FIELDS,\n} from '../systems/calendars';\n\nimport { CalendarManager } from '../internals/calendars/manager';\nimport { CalendarPatterns } from '../internals/calendars/patterns';\nimport { AbstractValue, PartsValue, StringValue } from '../utils/render';\n\nimport { Calendars } from './api';\nimport { PrivateApiImpl } from './private';\nimport { CalendarContext } from '../internals/calendars/formatter';\nimport { NumberParams } from '../common/private';\nimport { getStableTimeZoneId, substituteZoneAlias, currentMetazone } from '../systems/calendars/timezone';\nimport { TimeZoneTypeIndex } from '../schema';\n\nconst DOW_FIELDS: RelativeTimeFieldType[] = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n\n/**\n * @internal\n */\nexport class CalendarsImpl implements Calendars {\n  private manager: CalendarManager;\n  private _firstDay: number;\n  private _minDays: number;\n  private exemplarCities: { [x: string]: string } | undefined;\n\n  constructor(\n    private readonly bundle: Bundle,\n    private readonly internals: Internals,\n    private readonly privateApi: PrivateApiImpl,\n  ) {\n    this.manager = new CalendarManager(bundle, internals);\n    const region = bundle.region();\n    this._firstDay = internals.calendars.weekFirstDay(region);\n    this._minDays = internals.calendars.weekMinDays(region);\n  }\n\n  firstDayOfWeek(): number {\n    return this._firstDay;\n  }\n\n  minDaysInFirstWeek(): number {\n    return this._minDays;\n  }\n\n  dateField(type: DateFieldType, opt?: DateFieldFormatOptions): string {\n    opt = opt || {};\n    const field = this.internals.schema.DateFields.displayName.get(this.bundle, type, opt.width || 'wide');\n    return this._transformField(field, 'calendar-field', opt.context);\n  }\n\n  dayPeriods(opt?: CalendarFieldsOptions): any {\n    opt = opt || {};\n    const fields = this._getPatterns(opt.ca).dayPeriods()[opt.width || 'wide'];\n    return this._transformFields(fields, undefined, opt.context);\n  }\n\n  eras(opt?: EraFieldOptions): any {\n    opt = opt || {};\n    const w = opt.width || 'names';\n    const fields = this._getPatterns(opt.ca).eras()[w];\n    const tx = w === 'abbr' ? 'era-abbr' : w === 'names' ? 'era-name' : undefined;\n    return this._transformFields(fields, tx, opt.context);\n  }\n\n  months(opt?: CalendarFieldsOptions): any {\n    opt = opt || {};\n    const w = opt.width === 'short' ? 'narrow' : opt.width || 'wide';\n    const fields = this._getPatterns(opt.ca).months()[w];\n    const tx = w !== 'narrow' ? 'month-standalone-except-narrow' : undefined;\n    return this._transformFields(fields, tx, opt.context);\n  }\n\n  quarters(opt?: CalendarFieldsOptions): any {\n    opt = opt || {};\n    const fields = this._getPatterns(opt.ca).quarters()[opt.width || 'wide'];\n    return this._transformFields(fields, undefined, opt.context);\n  }\n\n  weekdays(opt?: CalendarFieldsOptions): any {\n    opt = opt || {};\n    const w = opt.width || 'wide';\n    const fields = this._getPatterns(opt.ca).weekdays()[w];\n    const tx = w !== 'narrow' ? 'day-standalone-except-narrow' : undefined;\n    return this._transformFields(fields, tx, opt.context);\n  }\n\n  /**\n   * Alias for nowGregorian()\n   */\n  now(zoneId?: string): GregorianDate {\n    return this.nowGregorian(zoneId);\n  }\n\n  /**\n   * Convert the given date to the Buddhist calendar.\n   */\n  toBuddhistDate(date: CalendarDate | ZonedDateTime | Date): BuddhistDate {\n    return this.convertDate(BuddhistDate.fromUnixEpoch, date);\n  }\n\n  /**\n   * Construct a new date in the Buddhist calendar with the given fields.\n   */\n  newBuddhistDate(fields: Partial<CalendarDateFields>): BuddhistDate {\n    return BuddhistDate.fromFields(fields, this._firstDay, this._minDays);\n  }\n\n  /**\n   * Construct a new date in the Buddhist calendar representing the current date and time.\n   */\n  nowBuddhist(zoneId?: string): BuddhistDate {\n    return BuddhistDate.fromUnixEpoch(new Date().getTime(), zoneId || '', this._firstDay, this._minDays);\n  }\n\n  /**\n   * Convert the given date to the Gregorian calendar.\n   */\n  toGregorianDate(date: CalendarDate | ZonedDateTime | Date): GregorianDate {\n    return this.convertDate(GregorianDate.fromUnixEpoch, date);\n  }\n\n  /**\n   * Construct a new date in the Gregorian calendar with the given fields.\n   */\n  newGregorianDate(fields: Partial<CalendarDateFields>): GregorianDate {\n    return GregorianDate.fromFields(fields, this._firstDay, this._minDays);\n  }\n\n  /**\n   * Construct a new date in the Gregorian calendar representing the current date and time.\n   */\n  nowGregorian(zoneId?: string): GregorianDate {\n    return GregorianDate.fromUnixEpoch(new Date().getTime(), zoneId || '', this._firstDay, this._minDays);\n  }\n\n  /**\n   * Convert the given date to the ISO-8601 calendar.\n   */\n  toISO8601Date(date: CalendarDate | ZonedDateTime | Date): ISO8601Date {\n    return this.convertDate(ISO8601Date.fromUnixEpoch, date);\n  }\n\n  /**\n   * Construct a new date in the ISO-8601 calendar with the given fields.\n   */\n  newISO8601Date(fields: Partial<CalendarDateFields>): ISO8601Date {\n    return ISO8601Date.fromFields(fields, this._firstDay, this._minDays);\n  }\n\n  /**\n   * Construct a new date in the ISO8601 calendar representing the current date and time.\n   */\n  nowISO8601(zoneId?: string): ISO8601Date {\n    return ISO8601Date.fromUnixEpoch(new Date().getTime(), zoneId || '', this._firstDay, this._minDays);\n  }\n\n  /**\n   * Convert the given date to the Japanese calendar.\n   */\n  toJapaneseDate(date: CalendarDate | ZonedDateTime | Date): JapaneseDate {\n    return this.convertDate(JapaneseDate.fromUnixEpoch, date);\n  }\n\n  /**\n   * Construct a new date in the Japanese calendar with the given fields.\n   */\n  newJapaneseDate(fields: Partial<CalendarDateFields>): JapaneseDate {\n    return JapaneseDate.fromFields(fields, this._firstDay, this._minDays);\n  }\n\n  /**\n   * Construct a new date in the Japanese calendar representing the current date and time.\n   */\n  nowJapanese(zoneId?: string): JapaneseDate {\n    return JapaneseDate.fromUnixEpoch(new Date().getTime(), zoneId || '', this._firstDay, this._minDays);\n  }\n\n  /**\n   * Convert the given date to the Persian calendar.\n   */\n  toPersianDate(date: CalendarDate | ZonedDateTime | Date): PersianDate {\n    return this.convertDate(PersianDate.fromUnixEpoch, date);\n  }\n\n  /**\n   * Construct a new date in the Persian calendar with the given fields.\n   */\n  newPersianDate(fields: Partial<CalendarDateFields>): PersianDate {\n    return PersianDate.fromFields(fields, this._firstDay, this._minDays);\n  }\n\n  /**\n   * Construct a new date in the Persian calendar representing the current date and time.\n   */\n  nowPersian(zoneId?: string): PersianDate {\n    return PersianDate.fromUnixEpoch(new Date().getTime(), zoneId || '', this._firstDay, this._minDays);\n  }\n\n  /**\n   * Find the field of visual difference between two dates. For example, the\n   * dates \"2019-03-31\" and \"2019-04-01\" differ visually in the month field,\n   * even though the dates are only 1 day apart.\n   *\n   * This can be used by applications to select an appropriate skeleton for date\n   * interval formatting, e.g. to format \"March 31 - April 01, 2019\"\n   */\n  fieldOfVisualDifference(\n    a: CalendarDate | ZonedDateTime | Date,\n    b: CalendarDate | ZonedDateTime | Date,\n  ): DateTimePatternFieldType {\n    // Date is interpreted as UTC\n    if (a instanceof Date) {\n      a = { date: a } as ZonedDateTime;\n    }\n    if (b instanceof Date) {\n      b = { date: b } as ZonedDateTime;\n    }\n\n    // Determine calendar type to use for comparison, falling back to the default for the\n    // current locale.\n    const type: CalendarType =\n      a instanceof CalendarDate\n        ? a.type()\n        : b instanceof CalendarDate\n          ? b.type()\n          : this.internals.calendars.selectCalendar(this.bundle);\n\n    // Convert a and b to CalendarDate having the correct type, ensuring their types and timezones match.\n    if (!(a instanceof CalendarDate) || type !== a.type()) {\n      a = this.convertDateTo(type, a);\n    }\n    if (!(b instanceof CalendarDate) || type !== b.type() || a.timeZoneId() !== b.timeZoneId()) {\n      b = this.convertDateTo(type, b, a.timeZoneId());\n    }\n    return a.fieldOfVisualDifference(b);\n  }\n\n  /**\n   * Format a calendar date to string using the given options.\n   */\n  formatDate(date: CalendarDate | ZonedDateTime | Date, options?: DateFormatOptions): string {\n    return this._formatDate(new StringValue(), date, options);\n  }\n\n  /**\n   * Format a calendar date to a parts array using the given options.\n   */\n  formatDateToParts(date: CalendarDate | ZonedDateTime | Date, options?: DateFormatOptions): Part[] {\n    return this._formatDate(new PartsValue(), date, options);\n  }\n\n  formatDateInterval(\n    start: CalendarDate | ZonedDateTime | Date,\n    end: CalendarDate | ZonedDateTime | Date,\n    options?: DateIntervalFormatOptions,\n  ): string {\n    return this._formatInterval(new StringValue(), start, end, options);\n  }\n\n  formatDateIntervalToParts(\n    start: CalendarDate | ZonedDateTime | Date,\n    end: CalendarDate | ZonedDateTime | Date,\n    options?: DateIntervalFormatOptions,\n  ): Part[] {\n    return this._formatInterval(new PartsValue(), start, end, options);\n  }\n\n  // TODO: need to sort out the options\n  // formatRelativeTime(start: CalendarDate | ZonedDateTime, end: CalendarDate | ZonedDateTime,\n  //     options?: RelativeTimeFormatOptions): string {\n  //   options = options || DEFAULT_RELTIME_OPTIONS;\n  //   const params = this.privateApi.getNumberParams(options.nu);\n  //   const calendar = this.internals.calendars.selectCalendar(this.bundle);\n  //   start = this.convertDateTo(calendar, start);\n  //   end = this.convertDateTo(calendar, end, start.timeZoneId());\n  //   return this.internals.dateFields.formatRelativeTime(\n  //     this.bundle, start, end, options, params);\n  // }\n\n  formatRelativeTimeField(\n    value: DecimalArg,\n    field: RelativeTimeFieldType,\n    options?: RelativeTimeFieldFormatOptions,\n  ): string {\n    options = options || { width: 'wide' };\n    const transform = this.privateApi.getContextTransformInfo();\n    const params = this.privateApi.getNumberParams(options.nu);\n    return this.internals.dateFields.formatRelativeTimeField(this.bundle, value, field, options, params, transform);\n  }\n\n  formatRelativeTime(\n    start: CalendarDate | ZonedDateTime | Date,\n    end: CalendarDate | ZonedDateTime | Date,\n    options?: RelativeTimeFormatOptions,\n  ): string {\n    options = options || { width: 'wide', maximumFractionDigits: 0, group: true };\n\n    const calendar = this.internals.calendars.selectCalendar(this.bundle, options.ca);\n    const _start = this.convertDateTo(calendar, start);\n    const _end = this.convertDateTo(calendar, end);\n\n    let [field, amount] = _start.relativeTime(_end, options.field);\n    if (_start.compare(_end) === 1) {\n      amount *= -1;\n    }\n\n    if (field === 'millis') {\n      amount /= 1000.0;\n      field = 'second';\n    }\n    let _field = field as RelativeTimeFieldType;\n\n    // See if we can use day of week formatting\n    if (options.dayOfWeek && field === 'week' && _start.dayOfWeek() === _end.dayOfWeek()) {\n      const dow = _end.dayOfWeek() - 1;\n      _field = DOW_FIELDS[dow];\n    }\n\n    return this.formatRelativeTimeField(amount, _field, options);\n  }\n\n  /**\n   * Format a raw date pattern. Note: This should not be used, but is available for debugging or\n   * extreme cases where an application must implement a custom format.\n   */\n  formatDateRaw(date: CalendarDate | ZonedDateTime | Date, options?: DateRawFormatOptions): string {\n    return this._formatDateRaw(new StringValue(), date, options || {});\n  }\n\n  formatDateRawToParts(date: CalendarDate | ZonedDateTime | Date, options?: DateRawFormatOptions): Part[] {\n    return this._formatDateRaw(new PartsValue(), date, options || {});\n  }\n\n  formatDateWrapper(date: string, time: string, options?: DateWrapperFormatOptions): string {\n    return this._formatDateWrapper(new StringValue(), date, time, options || {});\n  }\n\n  formatDateWrapperToParts(date: Part[], time: Part[], options?: DateWrapperFormatOptions): Part[] {\n    return this._formatDateWrapper(new PartsValue(), date, time, options || {});\n  }\n\n  timeData(): TimeData {\n    const patterns = this._getPatterns('gregory');\n    const [allowed, preferred] = patterns.getTimeData();\n    return {\n      preferred,\n      allowed: allowed.split(' '),\n    };\n  }\n\n  timeZoneIds(): string[] {\n    return TZ.zoneIds();\n  }\n\n  resolveTimeZoneId(zoneid: string): string | undefined {\n    return TZ.resolveId(substituteZoneAlias(zoneid));\n  }\n\n  timeZoneInfo(zoneid: string): TimeZoneInfo {\n    const tz = this.internals.schema.TimeZones;\n    if (!this.exemplarCities) {\n      this.exemplarCities = tz.exemplarCity.mapping(this.bundle);\n    }\n    const id = this.resolveTimeZoneId(zoneid) || 'Factory';\n    const stableid = getStableTimeZoneId(id);\n    const city = this.exemplarCities[stableid] || this.exemplarCities['Etc/Unknown'];\n    const metazone = (currentMetazone(id) || '') as MetaZoneType;\n    const names: MetazoneNames = {\n      long: { generic: '', standard: '', daylight: '' },\n      short: { generic: '', standard: '', daylight: '' },\n    };\n    for (const key of TimeZoneTypeIndex.keys) {\n      names.long[key] = tz.metaZones.long.get(this.bundle, key, metazone);\n      names.short[key] = tz.metaZones.short.get(this.bundle, key, metazone);\n    }\n    const { countries, latitude, longitude, stdoffset } = TZ.zoneMeta(id)!; // Factory fallback will return a record\n    return {\n      id,\n      city: {\n        name: city,\n      },\n      countries,\n      latitude,\n      longitude,\n      stdoffset,\n      metazone,\n      names,\n    };\n  }\n\n  timeZoneFromUTC(utc: number, zoneid: string): ZoneInfo | undefined {\n    return TZ.fromUTC(zoneid, utc);\n  }\n\n  timeZoneFromWall(wall: number, zoneid: string): [number, ZoneInfo] | undefined {\n    return TZ.fromWall(zoneid, wall);\n  }\n\n  timePeriodToQuantity(period: Partial<TimePeriod>): Quantity[] {\n    const q: Quantity[] = [];\n    for (const f of TIME_PERIOD_FIELDS) {\n      const v = period[f];\n      if (v) {\n        const unit = f === 'millis' ? 'millisecond' : f;\n        q.push({ unit, value: v });\n      }\n    }\n    return q;\n  }\n\n  private _getPatterns(type?: CalendarType): CalendarPatterns {\n    const calendar = this.internals.calendars.selectCalendar(this.bundle, type);\n    return this.manager.getCalendarPatterns(calendar);\n  }\n\n  /**\n   * Copy fields, applying an optional context transform to the values.\n   */\n  private _transformFields(fields: any, type?: ContextTransformFieldType, context?: ContextType): any {\n    const res: any = {};\n    if (fields) {\n      for (const key of Object.keys(fields)) {\n        const val = fields[key];\n        res[key] =\n          typeof val === 'string'\n            ? this._transformField(val, type, context)\n            : this._transformFields(val, type, context);\n      }\n    }\n    return res;\n  }\n\n  private _transformField(field: string, type?: ContextTransformFieldType, context?: ContextType): string {\n    const info = this.privateApi.getContextTransformInfo();\n    return context ? this.internals.general.contextTransform(field, info, context, type) : field;\n  }\n\n  private _formatDate<R>(\n    value: AbstractValue<R>,\n    date: CalendarDate | ZonedDateTime | Date,\n    options?: DateFormatOptions,\n  ): R {\n    const calendars = this.internals.calendars;\n    options = options || { date: 'full' };\n    const calendar = calendars.selectCalendar(this.bundle, options.ca);\n    const params = this.privateApi.getNumberParams(options.nu, 'default');\n\n    date = this.convertDateTo(calendar, date);\n    const req = this.manager.getDateFormatRequest(date, options, params);\n    const ctx = this._context(date, params, options.context, options.alt);\n    return calendars.formatDateTime(calendar, ctx, value, true, req.date, req.time, req.wrapper);\n  }\n\n  private _formatInterval<R>(\n    value: AbstractValue<R>,\n    start: CalendarDate | ZonedDateTime | Date,\n    end: CalendarDate | ZonedDateTime | Date,\n    options?: DateIntervalFormatOptions,\n  ): R {\n    // options = options || { skeleton: 'yMd' };\n    options = options || {};\n    const calendar = this.internals.calendars.selectCalendar(this.bundle, options.ca);\n    start = this.convertDateTo(calendar, start);\n    end = this.convertDateTo(calendar, end);\n\n    const fieldDiff = this.fieldOfVisualDifference(start, end);\n    const params = this.privateApi.getNumberParams(options.nu, 'default');\n    const req = this.manager.getDateIntervalFormatRequest(calendar, start, fieldDiff, options, params);\n\n    if (req.skeleton) {\n      const { ca, nu } = options;\n      const r = this.manager.getDateFormatRequest(start, { ca, nu, skeleton: req.skeleton }, params);\n      const ctx = this._context(start, params, options.context, options.alt);\n      const _start = this.internals.calendars.formatDateTime(calendar, ctx, value, true, r.date, r.time, r.wrapper);\n      ctx.date = end;\n      const _end = this.internals.calendars.formatDateTime(calendar, ctx, value, false, r.date, r.time, r.wrapper);\n      const wrapper = this.internals.general.parseWrapper(req.wrapper);\n      value.wrap(wrapper, [_start, _end]);\n      return value.render();\n    }\n\n    let _date: R | undefined;\n    if (req.date) {\n      const ctx = this._context(start, params, options.context, options.alt);\n      _date = this.internals.calendars.formatDateTime(calendar, ctx, value, true, req.date);\n    }\n\n    if (req.range) {\n      const ctx = this._context(start, params, options.context, options.alt);\n      const _range = this.internals.calendars.formatInterval(calendar, ctx, value, !_date, end, req.range);\n      if (!_date) {\n        return _range;\n      }\n      // Note: This case is covered in ICU but not mentioned in the CLDR docs. Use the MEDIUM\n      // dateTimeFormat to join a common date with a time range.\n      // Ticket referencing the discrepancy:\n      // https://www.unicode.org/cldr/trac/ticket/11158\n      // Docs don't mention this edge case:\n      // https://www.unicode.org/reports/tr35/tr35-dates.html#intervalFormats\n      const patterns = this.manager.getCalendarPatterns(calendar);\n      const atTime = options.atTime === false ? false : true;\n      const wrapper = this.internals.general.parseWrapper(patterns.getWrapperPattern('medium', atTime));\n      value.wrap(wrapper, [_range, _date]);\n      return value.render();\n    }\n    // Here, the request should always be:\n    //   { date }\n    //   { date, range }\n    //   { range }\n    // Unless the schema config contains no relevant patterns.\n    return _date || value.empty();\n  }\n\n  private _context<T extends CalendarDate>(\n    date: T,\n    params: NumberParams,\n    context?: ContextType,\n    alt: DateFormatAltOptions = {},\n  ): CalendarContext<T> {\n    return {\n      alt,\n      date,\n      bundle: this.bundle,\n      system: params.system,\n      latnSystem: params.latnSystem,\n      context,\n      transform: this.privateApi.getContextTransformInfo(),\n    };\n  }\n\n  private _formatDateRaw<R>(\n    value: AbstractValue<R>,\n    date: CalendarDate | ZonedDateTime | Date,\n    options: DateRawFormatOptions,\n  ): R {\n    if (!options.pattern) {\n      return value.empty();\n    }\n    const pattern = this.internals.calendars.parseDatePattern(options.pattern);\n    const calendar = this.internals.calendars.selectCalendar(this.bundle, options.ca);\n    const params = this.privateApi.getNumberParams(options.nu, 'default');\n    const ctx = this._context(this.convertDateTo(calendar, date), params, options.context, options.alt);\n    return this.internals.calendars.formatDateTime(calendar, ctx, value, true, pattern);\n  }\n\n  private _formatDateWrapper<R>(value: AbstractValue<R>, date: R, time: R, options: DateWrapperFormatOptions): R {\n    const calendar = this.internals.calendars.selectCalendar(this.bundle, options.ca);\n    const patterns = this.manager.getCalendarPatterns(calendar);\n    const atTime = options.atTime === false ? false : true;\n    const wrapper = this.internals.general.parseWrapper(patterns.getWrapperPattern(options.width || 'medium', atTime));\n    value.wrap(wrapper, [time, date]);\n    return value.render();\n  }\n\n  private convertDate<T>(cons: CalendarFromUnixEpoch<T>, date: CalendarDate | ZonedDateTime | Date): T {\n    if (date instanceof Date) {\n      date = { date, zoneId: 'UTC' } as ZonedDateTime;\n    }\n    return date instanceof CalendarDate\n      ? this.convertEpoch(cons, date.unixEpoch(), date.timeZoneId())\n      : this.convertEpoch(cons, getEpochUTC(date.date), date.zoneId || 'UTC');\n  }\n\n  private convertEpoch<T>(cons: CalendarFromUnixEpoch<T>, epoch: number, zoneId: string): T {\n    return cons(epoch, zoneId, this._firstDay, this._minDays);\n  }\n\n  private convertDateTo(\n    target: CalendarType,\n    date: CalendarDate | ZonedDateTime | Date,\n    zoneId?: string,\n  ): CalendarDate {\n    if (date instanceof CalendarDate && target === date.type() && (!zoneId || zoneId === date.timeZoneId())) {\n      return date;\n    } else if (date instanceof Date) {\n      date = { date, zoneId } as ZonedDateTime;\n    }\n\n    switch (target) {\n      case 'buddhist':\n        return this.toBuddhistDate(date);\n      case 'japanese':\n        return this.toJapaneseDate(date);\n      case 'persian':\n        return this.toPersianDate(date);\n    }\n    // All others convert to 'gregory'\n    return this.toGregorianDate(date);\n  }\n}\n\nconst getEpochUTC = (date: Date | number): number => {\n  const n = +date;\n  return isFinite(n) ? n : 0;\n};\n"]}