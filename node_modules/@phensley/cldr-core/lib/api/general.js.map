{"version":3,"file":"general.js","sourceRoot":"","sources":["../../src/api/general.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AltType,\n  CharacterOrderType,\n  ContextType,\n  LineOrderType,\n  NamesSchema,\n  Vector2Arrow,\n} from '@phensley/cldr-types';\n\nimport { MessageFormatter, MessageFormatterOptions } from '@phensley/messageformat';\nimport { Part } from '@phensley/decimal';\n\nimport { parseLanguageTag, LanguageTag } from '@phensley/language-tag';\nimport { LanguageResolver, Locale } from '@phensley/locale';\nimport { DisplayNameOptions, ListPatternType, MeasurementCategory, MeasurementSystem } from '../common';\nimport { Bundle } from '../resource';\nimport { GeneralInternals, Internals } from '../internals';\n\nimport { General } from './api';\nimport { PrivateApiImpl } from './private/api';\nimport { ContextTransformInfo } from '../common/private';\n\nconst DEFAULT_NAME_OPTIONS: DisplayNameOptions = { context: 'begin-sentence' };\n\n// Compound fields for language display name\ntype LanguageTagFunc = (t: LanguageTag) => string;\n\nconst F_LANG_REGION = (t: LanguageTag): string => `${t.language()}-${t.region()}`;\nconst F_LANG_SCRIPT = (t: LanguageTag): string => `${t.language()}-${t.script()}`;\n\nconst LANGUAGE_FUNCS: LanguageTagFunc[] = [F_LANG_REGION, F_LANG_SCRIPT, (t: LanguageTag): string => t.language()];\n\n/**\n * @internal\n */\nexport class GeneralImpl implements General {\n  private general: GeneralInternals;\n  private names: NamesSchema;\n  private transform: ContextTransformInfo;\n\n  constructor(\n    private _bundle: Bundle,\n    private _locale: Locale,\n    internal: Internals,\n    _private: PrivateApiImpl,\n  ) {\n    this.general = internal.general;\n    this.names = internal.schema.Names;\n    this.transform = _private.getContextTransformInfo();\n  }\n\n  characterOrder(): CharacterOrderType {\n    return this.general.characterOrder(this._bundle) as CharacterOrderType;\n  }\n\n  lineOrder(): LineOrderType {\n    return this.general.lineOrder(this._bundle) as LineOrderType;\n  }\n\n  bundle(): Bundle {\n    return this._bundle;\n  }\n\n  locale(): Locale {\n    return this._locale;\n  }\n\n  resolveLocale(id: string | LanguageTag): Locale {\n    const _id = typeof id === 'string' ? id : id.compact();\n    const tag = LanguageResolver.resolve(id);\n    return { id: _id, tag };\n  }\n\n  parseLanguageTag(tag: string): LanguageTag {\n    return parseLanguageTag(tag);\n  }\n\n  messageFormatter(options?: MessageFormatterOptions): MessageFormatter {\n    const plurals = this._bundle.plurals();\n    return new MessageFormatter({ ...options, plurals });\n  }\n\n  measurementSystem(category?: MeasurementCategory): MeasurementSystem {\n    const region = this._bundle.region();\n    switch (category) {\n      case 'temperature':\n        switch (region) {\n          case 'BS':\n          case 'BZ':\n          case 'PR':\n          case 'PW':\n            return 'us';\n          default:\n            return 'metric';\n        }\n\n      default:\n        switch (region) {\n          case 'GB':\n            return 'uk';\n          case 'LR':\n          case 'MM':\n          case 'US':\n            return 'us';\n          default:\n            return 'metric';\n        }\n    }\n  }\n\n  formatList(items: string[], type?: ListPatternType): string {\n    return this.general.formatList(this._bundle, items, type || 'and');\n  }\n\n  formatListToParts(items: string[], type?: ListPatternType): Part[] {\n    return this.general.formatListToParts(this._bundle, items, type || 'and');\n  }\n\n  getLanguageDisplayName(code: string | LanguageTag, options: DisplayNameOptions = DEFAULT_NAME_OPTIONS): string {\n    const type = options.type || 'none';\n    const arrow = this.names.languages.displayName;\n\n    let tag: LanguageTag = typeof code === 'string' ? parseLanguageTag(code) : code;\n    let s: string = '';\n\n    // First attempt to match the exact string\n    if (typeof code === 'string') {\n      s = this._getVectorAlt(arrow, code, type);\n    }\n    // Try language + region\n    if (!s && tag.hasLanguage() && tag.hasRegion()) {\n      s = this._getVectorAlt(arrow, F_LANG_REGION(tag), type);\n    }\n    // Try language + script\n    if (!s && tag.hasLanguage() && tag.hasScript()) {\n      s = this._getVectorAlt(arrow, F_LANG_SCRIPT(tag), type);\n    }\n    // Try language if script and region are empty\n    if (!s && !tag.hasScript() && !tag.hasRegion()) {\n      s = this._getVectorAlt(arrow, tag.language(), type);\n    }\n\n    // Resolve to fill in unknown subtags, then attempt combinations\n    if (!s) {\n      const locale = this.resolveLocale(tag);\n      tag = locale.tag;\n      for (const func of LANGUAGE_FUNCS) {\n        const id = func(tag);\n        s = this._getVectorAlt(arrow, id, type);\n        if (s) {\n          // Found one\n          break;\n        }\n      }\n    }\n    return this.general.contextTransform(s, this.transform, _ctx(options), 'languages');\n  }\n\n  getScriptDisplayName(code: string | LanguageTag, options: DisplayNameOptions = DEFAULT_NAME_OPTIONS): string {\n    const arrow = this.names.scripts.displayName;\n    const type = options.type || 'none';\n    let s: string = '';\n    if (typeof code === 'string') {\n      s = this._getVectorAlt(arrow, code, type);\n\n      // If language is blank or we have an explicit script subtag, use the\n      // script subtag as-is. This will resolve \"und-Zzzz\" to \"Unknown\" but\n      // \"en-Zzzz\" will fall through to resolve \"Latin\"\n    } else if (!code.hasLanguage() || code.hasScript()) {\n      s = this._getVectorAlt(arrow, code.script(), type);\n    }\n    if (!s) {\n      // Resolve to populate the script\n      const locale = this.resolveLocale(code);\n      s = this._getVectorAlt(arrow, locale.tag.script(), type);\n    }\n    return this.general.contextTransform(s, this.transform, _ctx(options), 'script');\n  }\n\n  getRegionDisplayName(code: string | LanguageTag, options: DisplayNameOptions = DEFAULT_NAME_OPTIONS): string {\n    const arrow = this.names.regions.displayName;\n    const type = options.type || 'none';\n    let s: string = '';\n    if (typeof code === 'string') {\n      s = this._getVectorAlt(arrow, code, type);\n\n      // If language is blank or we have an explicit region subtag, use\n      // the region subtag as-is. This will resolve \"und-ZZ\" to \"Unknown\" but\n      // \"en-Zzzz\" will fall through to resolve \"United States\"\n    } else if (!code.hasLanguage() || code.hasRegion()) {\n      s = this._getVectorAlt(arrow, code.region(), type);\n    }\n    if (!s) {\n      // Resolve to populate the region\n      const { tag } = this.resolveLocale(code);\n      s = this._getVectorAlt(arrow, tag.region(), type);\n    }\n    // No context transform for region\n    return s;\n  }\n\n  // Check if the given alt type field exists, and fall back to alt type 'none'\n  protected _getVectorAlt<T extends string>(arrow: Vector2Arrow<AltType, T>, code: string, type: AltType): string {\n    return arrow.get(this._bundle, type, code as unknown as T) || arrow.get(this._bundle, 'none', code as unknown as T);\n  }\n}\n\n// Default an options context value\nconst _ctx = (o: DisplayNameOptions): ContextType => _def(o, 'context', 'begin-sentence' as ContextType);\n\n// Default an option value\nconst _def = <O, K extends keyof O, T>(o: O, k: K, t: T): T => (o[k] as unknown as T) || t;\n"]}