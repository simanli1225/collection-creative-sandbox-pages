{"version":3,"file":"date.js","sourceRoot":"","sources":["../../src/parsing/date.ts"],"names":[],"mappings":";;;AAIA,kBAAkB;AACL,QAAA,kBAAkB,GAAG;IAChC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;CACtD,CAAC,MAAM,CAAC,UAAC,CAAM,EAAE,CAAC,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACb,OAAO,CAAC,CAAC;AACX,CAAC,EAAE,EAAE,CAAC,CAAC;AAEP;;GAEG;AACI,IAAM,gBAAgB,GAAG,UAAC,GAAW;IAC1C,IAAM,KAAK,GAAmB,EAAE,CAAC;IACjC,IAAI,CAAC,GAAG,EAAE,CAAC;QACT,OAAO,KAAK,CAAC;IACf,CAAC;IACD,IAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;IAEvB,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,IAAI,KAAK,GAAG,EAAE,CAAC;IACf,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,OAAO,GAAG,KAAK,CAAC;IACpB,IAAI,CAAC,GAAG,CAAC,CAAC;IAEV,OAAO,CAAC,GAAG,GAAG,EAAE,CAAC;QACf,IAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;QAClB,IAAI,OAAO,EAAE,CAAC;YACZ,IAAI,EAAE,KAAK,GAAG,EAAE,CAAC;gBACf,OAAO,GAAG,KAAK,CAAC;gBAChB,KAAK,GAAG,EAAE,CAAC;YACb,CAAC;iBAAM,CAAC;gBACN,GAAG,IAAI,EAAE,CAAC;YACZ,CAAC;YACD,CAAC,EAAE,CAAC;YACJ,SAAS;QACX,CAAC;QAED,IAAI,0BAAkB,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC;YAC/B,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACnB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAChB,GAAG,GAAG,EAAE,CAAC;YACX,CAAC;YAED,IAAI,EAAE,KAAK,KAAK,EAAE,CAAC;gBACjB,IAAI,KAAK,KAAK,EAAE,EAAE,CAAC;oBACjB,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;gBAC7B,CAAC;gBAED,KAAK,GAAG,EAAE,CAAC;gBACX,KAAK,GAAG,CAAC,CAAC;YACZ,CAAC;iBAAM,CAAC;gBACN,2BAA2B;gBAC3B,KAAK,EAAE,CAAC;YACV,CAAC;QACH,CAAC;aAAM,CAAC;YACN,IAAI,KAAK,KAAK,EAAE,EAAE,CAAC;gBACjB,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;YAC7B,CAAC;YACD,KAAK,GAAG,EAAE,CAAC;YACX,IAAI,EAAE,KAAK,GAAG,EAAE,CAAC;gBACf,OAAO,GAAG,IAAI,CAAC;YACjB,CAAC;iBAAM,CAAC;gBACN,GAAG,IAAI,EAAE,CAAC;YACZ,CAAC;QACH,CAAC;QACD,CAAC,EAAE,CAAC;IACN,CAAC;IAED,wDAAwD;IACxD,8BAA8B;IAC9B,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,KAAK,EAAE,EAAE,CAAC;QAC9B,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;IAC7B,CAAC;SAAM,CAAC;QACN,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAClB,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAjEW,QAAA,gBAAgB,oBAiE3B;AAEF;;GAEG;AACI,IAAM,uBAAuB,GAAG,UAAC,OAAuB;IAC7D,gDAAgD;IAChD,IAAM,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACxC,IAAM,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QACxB,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;YAC7B,IAAM,CAAC,GAAG,0BAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,IAAM,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC;YACpB,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;gBACvC,OAAO,CAAC,CAAC;YACX,CAAC;YACD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtB,CAAC;IACH,CAAC;IACD,OAAO,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC;AAfW,QAAA,uBAAuB,2BAelC","sourcesContent":["export type DateTimeField = [string, number];\n\nexport type DateTimeNode = DateTimeField | string;\n\n// prettier-ignore\nexport const DATE_PATTERN_CHARS = [\n  'G', 'y', 'Y', 'u', 'U', 'r', 'Q', 'q', 'M', 'L', 'l', 'w', 'W', 'd', 'D',\n  'F', 'g', 'E', 'e', 'c', 'a', 'b', 'B', 'h', 'H', 'K', 'k', 'j', 'J', 'C',\n  'm', 's', 'S', 'A', 'z', 'Z', 'O', 'v', 'V', 'X', 'x'\n].reduce((o: any, c, i) => {\n  o[c] = i + 1;\n  return o;\n}, {});\n\n/**\n * Parse a datetime pattern into an array of nodes.\n */\nexport const parseDatePattern = (raw: string): DateTimeNode[] => {\n  const nodes: DateTimeNode[] = [];\n  if (!raw) {\n    return nodes;\n  }\n  const len = raw.length;\n\n  let buf = '';\n  let field = '';\n  let width = 0;\n  let inquote = false;\n  let i = 0;\n\n  while (i < len) {\n    const ch = raw[i];\n    if (inquote) {\n      if (ch === \"'\") {\n        inquote = false;\n        field = '';\n      } else {\n        buf += ch;\n      }\n      i++;\n      continue;\n    }\n\n    if (DATE_PATTERN_CHARS[ch] > 0) {\n      if (buf.length > 0) {\n        nodes.push(buf);\n        buf = '';\n      }\n\n      if (ch !== field) {\n        if (field !== '') {\n          nodes.push([field, width]);\n        }\n\n        field = ch;\n        width = 1;\n      } else {\n        // Widen the current field.\n        width++;\n      }\n    } else {\n      if (field !== '') {\n        nodes.push([field, width]);\n      }\n      field = '';\n      if (ch === \"'\") {\n        inquote = true;\n      } else {\n        buf += ch;\n      }\n    }\n    i++;\n  }\n\n  // In the final state we'll either have a field+width or\n  // some characters in the buf.\n  if (width > 0 && field !== '') {\n    nodes.push([field, width]);\n  } else {\n    nodes.push(buf);\n  }\n  return nodes;\n};\n\n/**\n * Scan the date interval pattern and return the index of the first repeated field.\n */\nexport const intervalPatternBoundary = (pattern: DateTimeNode[]): number => {\n  // Use bit flags to detect first repeated field.\n  const data = [0, 0];\n  for (let i = 0; i < pattern.length; i++) {\n    const node = pattern[i];\n    if (typeof node !== 'string') {\n      const n = DATE_PATTERN_CHARS[node[0]];\n      const idx = n >>> 5;\n      if (((data[idx] >>> n % 32) & 1) === 1) {\n        return i;\n      }\n      data[idx] |= 1 << n;\n    }\n  }\n  return -1;\n};\n"]}