"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeBuilder = void 0;
var tslib_1 = require("tslib");
var instructions_1 = require("../instructions");
var calendars_1 = require("./calendars");
var currencies_1 = require("./currencies");
var datefields_1 = require("./datefields");
var general_1 = require("./general");
var names_1 = require("./names");
var numbers_1 = require("./numbers");
var timezones_1 = require("./timezones");
var units_1 = require("./units");
var schema_1 = require("../schema");
var EMPTY_INDEX = new instructions_1.KeyIndexImpl([]);
var emptyCalendarIndex = function (name) {
    var _a;
    return (_a = {},
        _a["".concat(name, "-available-format")] = EMPTY_INDEX,
        _a["".concat(name, "-plural-format")] = EMPTY_INDEX,
        _a["".concat(name, "-era")] = EMPTY_INDEX,
        _a["".concat(name, "-interval-format")] = EMPTY_INDEX,
        _a["".concat(name, "-month")] = EMPTY_INDEX,
        _a);
};
var COPY = ['currency-id', 'language-id', 'script-id', 'region-id', 'unit-id', 'timezone-id'];
/**
 * @public
 */
var CodeBuilder = /** @class */ (function () {
    function CodeBuilder(config) {
        this.config = config;
        this.indices = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ 'alt-key': schema_1.AltIndex, 'day-period-alt-key': schema_1.DayPeriodAltIndex, 'era-alt-key': schema_1.EraAltIndex, 'plural-key': schema_1.PluralIndex }, calendars_1.CALENDAR_INDICES), calendars_1.GREGORIAN_INDICES), emptyCalendarIndex('buddhist')), emptyCalendarIndex('japanese')), emptyCalendarIndex('persian')), datefields_1.DATEFIELDS_INDICES), general_1.GENERAL_INDICES), numbers_1.NUMBERS_INDICES), timezones_1.TIMEZONE_INDICES);
    }
    /**
     * Creates the origin of the code that builds the schema accessor instance.
     */
    CodeBuilder.prototype.origin = function () {
        for (var _i = 0, COPY_1 = COPY; _i < COPY_1.length; _i++) {
            var key = COPY_1[_i];
            this.make(key, this.config[key] || []);
        }
        // Ensure 'latn' is always defined since its our fallback
        var numberSystemNames = this.config['number-system-name'] || [];
        if (numberSystemNames.indexOf('latn') === -1) {
            numberSystemNames = numberSystemNames.concat(['latn']);
        }
        this.make('number-system-name', numberSystemNames);
        var code = [
            names_1.NAMES,
            numbers_1.NUMBERS,
            datefields_1.DATEFIELDS,
            general_1.LAYOUT,
            general_1.LIST_PATTERNS,
            calendars_1.BUDDHIST,
            calendars_1.GREGORIAN,
            calendars_1.JAPANESE,
            calendars_1.PERSIAN,
            timezones_1.TIMEZONE,
            currencies_1.CURRENCIES,
            units_1.UNITS,
            general_1.CONTEXT_TRANSFORM,
        ];
        for (var _a = 0, _b = this.config.calendars || []; _a < _b.length; _a++) {
            var name_1 = _b[_a];
            switch (name_1) {
                case 'buddhist':
                    this.add(calendars_1.BUDDHIST_INDICES);
                    this.copy('buddhist-available-format');
                    this.copy('buddhist-plural-format');
                    this.copy('buddhist-interval-format');
                    break;
                case 'japanese':
                    this.add(calendars_1.JAPANESE_INDICES);
                    this.copy('japanese-available-format');
                    this.copy('japanese-plural-format');
                    this.copy('japanese-interval-format');
                    break;
                case 'persian':
                    this.add(calendars_1.PERSIAN_INDICES);
                    this.copy('persian-available-format');
                    this.copy('persian-plural-format');
                    this.copy('persian-interval-format');
                    break;
            }
        }
        this.copy('gregorian-available-format');
        this.copy('gregorian-plural-format');
        this.copy('gregorian-interval-format');
        return (0, instructions_1.origin)(code, this.indices);
    };
    /**
     * Set the key index with the given name.
     */
    CodeBuilder.prototype.make = function (name, keys) {
        this.indices[name] = new instructions_1.KeyIndexImpl(keys);
    };
    CodeBuilder.prototype.copy = function (name) {
        this.indices[name] = new instructions_1.KeyIndexImpl(this.config[name] || []);
    };
    CodeBuilder.prototype.add = function (indices) {
        var names = Object.keys(indices);
        for (var _i = 0, names_2 = names; _i < names_2.length; _i++) {
            var name_2 = names_2[_i];
            this.indices[name_2] = indices[name_2];
        }
    };
    return CodeBuilder;
}());
exports.CodeBuilder = CodeBuilder;
//# sourceMappingURL=index.js.map