"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.vector = exports.scopemap = exports.scope = exports.origin = exports.field = exports.digits = exports.OriginImpl = exports.KeyIndexImpl = void 0;
/**
 * Inverse mapping of a key to its index in an array.
 *
 * @public
 */
var KeyIndexImpl = /** @class */ (function () {
    function KeyIndexImpl(keys) {
        this.keys = keys;
        /* tslint:disable-next-line */
        this.index = Object.create(null);
        this.size = keys.length;
        this.last = this.size - 1;
        var i = 0;
        while (i < keys.length) {
            this.index[keys[i]] = i;
            i++;
        }
    }
    KeyIndexImpl.prototype.get = function (key) {
        var i = this.index[key];
        return i === undefined ? -1 : i;
    };
    return KeyIndexImpl;
}());
exports.KeyIndexImpl = KeyIndexImpl;
var NULL_KEYINDEX = new KeyIndexImpl([]);
var WARNED = {};
/**
 * @public
 */
var OriginImpl = /** @class */ (function () {
    function OriginImpl(block, indices) {
        this.block = block;
        this.indices = indices;
        this.type = 'origin';
    }
    OriginImpl.prototype.getIndex = function (name) {
        var r = this.indices[name];
        if (r === undefined) {
            /* istanbul ignore next */
            if (!WARNED[name]) {
                // NOTE: Unless something went horribly wrong, this should only occur during development.
                console.log("Error: failed to locate index/value set named \"".concat(name, "\""));
                WARNED[name] = true;
            }
            return NULL_KEYINDEX;
        }
        return r;
    };
    OriginImpl.prototype.getValues = function (name) {
        return this.getIndex(name).keys;
    };
    return OriginImpl;
}());
exports.OriginImpl = OriginImpl;
/**
 * @internal
 */
var digits = function (name, dim0, values) { return ({
    type: 'digits',
    name: name,
    dim0: dim0,
    values: values,
}); };
exports.digits = digits;
/**
 * @internal
 */
var field = function (name) { return ({ type: 'field', name: name }); };
exports.field = field;
/**
 * @internal
 */
var origin = function (block, indices) {
    return new OriginImpl(block, indices);
};
exports.origin = origin;
/**
 * @internal
 */
var scope = function (name, identifier, block) { return ({
    type: 'scope',
    name: name,
    identifier: identifier,
    block: block,
}); };
exports.scope = scope;
/**
 * @internal
 */
var scopemap = function (name, fields, block) { return ({
    type: 'scopemap',
    name: name,
    fields: fields,
    block: block,
}); };
exports.scopemap = scopemap;
/**
 * @internal
 */
var vector = function (name, dims) { return ({ type: 'vector', name: name, dims: dims }); };
exports.vector = vector;
//# sourceMappingURL=instructions.js.map