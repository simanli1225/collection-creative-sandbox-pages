"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pack = exports.PackScript = void 0;
var language_tag_1 = require("@phensley/language-tag");
var locale_1 = require("@phensley/locale");
var bundle_1 = require("./bundle");
var string_1 = require("../utils/string");
var U = undefined;
/**
 * Layer in the pack that supports all regions for a single language + script.
 *
 * @public
 */
var PackScript = /** @class */ (function () {
    function PackScript(strings, exceptions, regions, defaultRegion, _spellout) {
        this._spellout = _spellout;
        this._cache = {};
        this._strings = strings.split("_" /* Chars.DELIM */);
        this._exceptions = exceptions.split("_" /* Chars.DELIM */);
        this._regions = regions;
        this._defaultRegion = defaultRegion;
    }
    PackScript.prototype.get = function (tag) {
        var region = tag.region();
        var index = this._cache[region] || this.decode(region);
        if (index === U) {
            region = this._defaultRegion;
            tag = new language_tag_1.LanguageTag(tag.language(), tag.script(), region, tag.variant(), tag.extensions(), tag.privateUse());
            index = this._cache[region] || this.decode(region);
        }
        return new bundle_1.StringBundle(tag.compact(), tag, this._strings, this._exceptions, index, this._spellout);
    };
    PackScript.prototype.decode = function (region) {
        var raw = this._regions[region];
        if (raw === U) {
            return U;
        }
        var decoded = (0, string_1.numarray)(raw, 36);
        var index = {};
        for (var i = 0; i < decoded.length; i += 2) {
            var k = decoded[i];
            var v = decoded[i + 1];
            index[k] = v;
        }
        this._cache[region] = index;
        return index;
    };
    return PackScript;
}());
exports.PackScript = PackScript;
/**
 * Runtime resource pack manager.
 *
 * @public
 */
var Pack = /** @class */ (function () {
    function Pack(data) {
        var _this = this;
        this.scripts = {};
        var raw = typeof data === 'string' ? JSON.parse(data) : data;
        var version = raw.version, cldr = raw.cldr, checksum = raw.checksum, language = raw.language, spellout = raw.spellout;
        if (version === U) {
            throw new Error('Severe error: data does not look like a valid resource pack.');
        }
        this.version = version;
        this.cldrVersion = cldr;
        this.checksum = checksum;
        this.language = language;
        this.spellout = spellout;
        this.defaultTag = locale_1.LanguageResolver.resolve(raw.defaultTag);
        Object.keys(raw.scripts).forEach(function (k) {
            var obj = raw.scripts[k];
            _this.scripts[k] = new PackScript(obj.strings, obj.exceptions, obj.regions, obj.defaultRegion, _this.spellout);
        });
    }
    Pack.prototype.get = function (tag) {
        // We need the script and region to find the correct string layer. Caller should
        // ideally supply a resolved language tag to avoid the overhead of this call.
        if (!tag.hasLanguage() || !tag.hasScript() || !tag.hasRegion()) {
            tag = locale_1.LanguageResolver.resolve(tag);
        }
        // Strings for a language are organized by script.
        var script = this.scripts[tag.script()];
        if (script === U) {
            // Swap in the default script
            tag = new language_tag_1.LanguageTag(this.defaultTag.language(), this.defaultTag.script(), this.defaultTag.region(), this.defaultTag.variant(), tag.extensions(), tag.privateUse());
            script = this.scripts[tag.script()];
        }
        return script.get(tag);
    };
    return Pack;
}());
exports.Pack = Pack;
//# sourceMappingURL=pack.js.map