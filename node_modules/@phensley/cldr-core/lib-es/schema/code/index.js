import { __assign } from "tslib";
import { origin, KeyIndexImpl } from '../instructions';
import { BUDDHIST, BUDDHIST_INDICES, CALENDAR_INDICES, GREGORIAN, GREGORIAN_INDICES, JAPANESE, JAPANESE_INDICES, PERSIAN, PERSIAN_INDICES, } from './calendars';
import { CURRENCIES } from './currencies';
import { DATEFIELDS, DATEFIELDS_INDICES } from './datefields';
import { CONTEXT_TRANSFORM, GENERAL_INDICES, LAYOUT, LIST_PATTERNS } from './general';
import { NAMES } from './names';
import { NUMBERS, NUMBERS_INDICES } from './numbers';
import { TIMEZONE, TIMEZONE_INDICES } from './timezones';
import { UNITS } from './units';
import { AltIndex, DayPeriodAltIndex, EraAltIndex, PluralIndex } from '../schema';
var EMPTY_INDEX = new KeyIndexImpl([]);
var emptyCalendarIndex = function (name) {
    var _a;
    return (_a = {},
        _a["".concat(name, "-available-format")] = EMPTY_INDEX,
        _a["".concat(name, "-plural-format")] = EMPTY_INDEX,
        _a["".concat(name, "-era")] = EMPTY_INDEX,
        _a["".concat(name, "-interval-format")] = EMPTY_INDEX,
        _a["".concat(name, "-month")] = EMPTY_INDEX,
        _a);
};
var COPY = ['currency-id', 'language-id', 'script-id', 'region-id', 'unit-id', 'timezone-id'];
/**
 * @public
 */
var CodeBuilder = /** @class */ (function () {
    function CodeBuilder(config) {
        this.config = config;
        this.indices = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({ 'alt-key': AltIndex, 'day-period-alt-key': DayPeriodAltIndex, 'era-alt-key': EraAltIndex, 'plural-key': PluralIndex }, CALENDAR_INDICES), GREGORIAN_INDICES), emptyCalendarIndex('buddhist')), emptyCalendarIndex('japanese')), emptyCalendarIndex('persian')), DATEFIELDS_INDICES), GENERAL_INDICES), NUMBERS_INDICES), TIMEZONE_INDICES);
    }
    /**
     * Creates the origin of the code that builds the schema accessor instance.
     */
    CodeBuilder.prototype.origin = function () {
        for (var _i = 0, COPY_1 = COPY; _i < COPY_1.length; _i++) {
            var key = COPY_1[_i];
            this.make(key, this.config[key] || []);
        }
        // Ensure 'latn' is always defined since its our fallback
        var numberSystemNames = this.config['number-system-name'] || [];
        if (numberSystemNames.indexOf('latn') === -1) {
            numberSystemNames = numberSystemNames.concat(['latn']);
        }
        this.make('number-system-name', numberSystemNames);
        var code = [
            NAMES,
            NUMBERS,
            DATEFIELDS,
            LAYOUT,
            LIST_PATTERNS,
            BUDDHIST,
            GREGORIAN,
            JAPANESE,
            PERSIAN,
            TIMEZONE,
            CURRENCIES,
            UNITS,
            CONTEXT_TRANSFORM,
        ];
        for (var _a = 0, _b = this.config.calendars || []; _a < _b.length; _a++) {
            var name_1 = _b[_a];
            switch (name_1) {
                case 'buddhist':
                    this.add(BUDDHIST_INDICES);
                    this.copy('buddhist-available-format');
                    this.copy('buddhist-plural-format');
                    this.copy('buddhist-interval-format');
                    break;
                case 'japanese':
                    this.add(JAPANESE_INDICES);
                    this.copy('japanese-available-format');
                    this.copy('japanese-plural-format');
                    this.copy('japanese-interval-format');
                    break;
                case 'persian':
                    this.add(PERSIAN_INDICES);
                    this.copy('persian-available-format');
                    this.copy('persian-plural-format');
                    this.copy('persian-interval-format');
                    break;
            }
        }
        this.copy('gregorian-available-format');
        this.copy('gregorian-plural-format');
        this.copy('gregorian-interval-format');
        return origin(code, this.indices);
    };
    /**
     * Set the key index with the given name.
     */
    CodeBuilder.prototype.make = function (name, keys) {
        this.indices[name] = new KeyIndexImpl(keys);
    };
    CodeBuilder.prototype.copy = function (name) {
        this.indices[name] = new KeyIndexImpl(this.config[name] || []);
    };
    CodeBuilder.prototype.add = function (indices) {
        var names = Object.keys(indices);
        for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
            var name_2 = names_1[_i];
            this.indices[name_2] = indices[name_2];
        }
    };
    return CodeBuilder;
}());
export { CodeBuilder };
//# sourceMappingURL=index.js.map