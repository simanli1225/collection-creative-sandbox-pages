{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/schema/code/index.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,MAAM,EAAE,YAAY,EAAU,MAAM,iBAAiB,CAAC;AAC/D,OAAO,EACL,QAAQ,EACR,gBAAgB,EAChB,gBAAgB,EAChB,SAAS,EACT,iBAAiB,EACjB,QAAQ,EACR,gBAAgB,EAChB,OAAO,EACP,eAAe,GAChB,MAAM,aAAa,CAAC;AACrB,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,EAAE,UAAU,EAAE,kBAAkB,EAAE,MAAM,cAAc,CAAC;AAC9D,OAAO,EAAE,iBAAiB,EAAE,eAAe,EAAE,MAAM,EAAE,aAAa,EAAE,MAAM,WAAW,CAAC;AACtF,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAChC,OAAO,EAAE,OAAO,EAAE,eAAe,EAAE,MAAM,WAAW,CAAC;AACrD,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAC;AACzD,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,OAAO,EAAE,QAAQ,EAAE,iBAAiB,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,WAAW,CAAC;AAElF,IAAM,WAAW,GAAG,IAAI,YAAY,CAAC,EAAE,CAAC,CAAC;AAEzC,IAAM,kBAAkB,GAAG,UAAC,IAAY;;IAAkB,OAAA;QACxD,GAAC,UAAG,IAAI,sBAAmB,IAAG,WAAW;QACzC,GAAC,UAAG,IAAI,mBAAgB,IAAG,WAAW;QACtC,GAAC,UAAG,IAAI,SAAM,IAAG,WAAW;QAC5B,GAAC,UAAG,IAAI,qBAAkB,IAAG,WAAW;QACxC,GAAC,UAAG,IAAI,WAAQ,IAAG,WAAW;WAC9B;AANwD,CAMxD,CAAC;AAuFH,IAAM,IAAI,GAAsB,CAAC,aAAa,EAAE,aAAa,EAAE,WAAW,EAAE,WAAW,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;AAEnH;;GAEG;AACH;IAiBE,qBAAoB,MAAoB;QAApB,WAAM,GAAN,MAAM,CAAc;QAhBhC,YAAO,sFACb,SAAS,EAAE,QAAQ,EACnB,oBAAoB,EAAE,iBAAiB,EACvC,aAAa,EAAE,WAAW,EAC1B,YAAY,EAAE,WAAW,IACtB,gBAAgB,GAChB,iBAAiB,GACjB,kBAAkB,CAAC,UAAU,CAAC,GAC9B,kBAAkB,CAAC,UAAU,CAAC,GAC9B,kBAAkB,CAAC,SAAS,CAAC,GAC7B,kBAAkB,GAClB,eAAe,GACf,eAAe,GACf,gBAAgB,EACnB;IAEyC,CAAC;IAE5C;;OAEG;IACH,4BAAM,GAAN;QACE,KAAkB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI,EAAE,CAAC;YAApB,IAAM,GAAG,aAAA;YACZ,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;QACzC,CAAC;QAED,yDAAyD;QACzD,IAAI,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;QAChE,IAAI,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;YAC7C,iBAAiB,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACzD,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,iBAAiB,CAAC,CAAC;QAEnD,IAAM,IAAI,GAAU;YAClB,KAAK;YACL,OAAO;YACP,UAAU;YACV,MAAM;YACN,aAAa;YACb,QAAQ;YACR,SAAS;YACT,QAAQ;YACR,OAAO;YACP,QAAQ;YACR,UAAU;YACV,KAAK;YACL,iBAAiB;SAClB,CAAC;QAEF,KAAmB,UAA2B,EAA3B,KAAA,IAAI,CAAC,MAAM,CAAC,SAAS,IAAI,EAAE,EAA3B,cAA2B,EAA3B,IAA2B,EAAE,CAAC;YAA5C,IAAM,MAAI,SAAA;YACb,QAAQ,MAAI,EAAE,CAAC;gBACb,KAAK,UAAU;oBACb,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;oBAC3B,IAAI,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;oBACvC,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;oBACpC,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;oBACtC,MAAM;gBACR,KAAK,UAAU;oBACb,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;oBAC3B,IAAI,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;oBACvC,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;oBACpC,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;oBACtC,MAAM;gBACR,KAAK,SAAS;oBACZ,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;oBAC1B,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;oBACtC,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;oBACnC,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;oBACrC,MAAM;YACV,CAAC;QACH,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;QACrC,IAAI,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;QACvC,OAAO,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACK,0BAAI,GAAZ,UAAa,IAAY,EAAE,IAAc;QACvC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,YAAY,CAAS,IAAI,CAAC,CAAC;IACtD,CAAC;IAEO,0BAAI,GAAZ,UAAa,IAAqB;QAChC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,YAAY,CAAS,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IACzE,CAAC;IAEO,yBAAG,GAAX,UAAY,OAAoB;QAC9B,IAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACnC,KAAmB,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK,EAAE,CAAC;YAAtB,IAAM,MAAI,cAAA;YACb,IAAI,CAAC,OAAO,CAAC,MAAI,CAAC,GAAG,OAAO,CAAC,MAAI,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IACH,kBAAC;AAAD,CAAC,AAhGD,IAgGC","sourcesContent":["import { KeyIndex, KeyIndexMap } from '@phensley/cldr-types';\nimport { origin, KeyIndexImpl, Origin } from '../instructions';\nimport {\n  BUDDHIST,\n  BUDDHIST_INDICES,\n  CALENDAR_INDICES,\n  GREGORIAN,\n  GREGORIAN_INDICES,\n  JAPANESE,\n  JAPANESE_INDICES,\n  PERSIAN,\n  PERSIAN_INDICES,\n} from './calendars';\nimport { CURRENCIES } from './currencies';\nimport { DATEFIELDS, DATEFIELDS_INDICES } from './datefields';\nimport { CONTEXT_TRANSFORM, GENERAL_INDICES, LAYOUT, LIST_PATTERNS } from './general';\nimport { NAMES } from './names';\nimport { NUMBERS, NUMBERS_INDICES } from './numbers';\nimport { TIMEZONE, TIMEZONE_INDICES } from './timezones';\nimport { UNITS } from './units';\n\nimport { AltIndex, DayPeriodAltIndex, EraAltIndex, PluralIndex } from '../schema';\n\nconst EMPTY_INDEX = new KeyIndexImpl([]);\n\nconst emptyCalendarIndex = (name: string): KeyIndexMap => ({\n  [`${name}-available-format`]: EMPTY_INDEX,\n  [`${name}-plural-format`]: EMPTY_INDEX,\n  [`${name}-era`]: EMPTY_INDEX,\n  [`${name}-interval-format`]: EMPTY_INDEX,\n  [`${name}-month`]: EMPTY_INDEX,\n});\n\n/**\n * @public\n */\nexport interface SchemaConfig {\n  /**\n   * Calendar types to include. Note that 'gregory' for the\n   * gregorian calendar will be included by default, even if\n   * omitted from this list.\n   *\n   * Ex: ['buddhist', 'japanese', 'persian']\n   */\n  calendars?: string[];\n\n  /**\n   * Control which skeleton date time formats are available at runtime.\n   */\n  ['gregorian-available-format']?: string[];\n  ['gregorian-plural-format']?: string[];\n  ['gregorian-interval-format']?: string[];\n\n  ['buddhist-available-format']?: string[];\n  ['buddhist-plural-format']?: string[];\n  ['buddhist-interval-format']?: string[];\n\n  ['japanese-available-format']?: string[];\n  ['japanese-plural-format']?: string[];\n  ['japanese-interval-format']?: string[];\n\n  ['persian-available-format']?: string[];\n  ['persian-plural-format']?: string[];\n  ['persian-interval-format']?: string[];\n\n  /**\n   * Currency codes to include.\n   *\n   * Ex: ['USD', 'EUR', 'GBP', 'JPY', 'CAD', ... ]\n   */\n  ['currency-id']?: string[];\n\n  /**\n   * Language identifiers to include. This only controls\n   * inclusion of language display name data.\n   */\n  ['language-id']?: string[];\n\n  /**\n   * Script identifiers to include. This only controls\n   * inclusion of script display name data.\n   */\n  ['script-id']?: string[];\n\n  /**\n   * Region identifiers to include. This only controls\n   * inclusion of region display name data.\n   */\n  ['region-id']?: string[];\n\n  /**\n   * Units to include.\n   *\n   * Ex: ['meter', 'kilogram', 'foot']\n   */\n  ['unit-id']?: string[];\n\n  /**\n   * CLDR stable timezone identifiers to include. This only\n   * controls inclusion of exemplar city data. All timezone\n   * ids and offset data will work even if this array is\n   * empty.\n   *\n   * Ex: ['America/New_York', 'America/Adak', ... ]\n   */\n  ['timezone-id']?: string[];\n\n  /**\n   * Number system names to include. Note that 'latn' will be\n   * included by default, even if omitted from this list.\n   *\n   * Ex: ['arab', 'laoo']\n   */\n  ['number-system-name']?: string[];\n}\n\ntype SchemaConfigKey = keyof SchemaConfig;\n\nconst COPY: SchemaConfigKey[] = ['currency-id', 'language-id', 'script-id', 'region-id', 'unit-id', 'timezone-id'];\n\n/**\n * @public\n */\nexport class CodeBuilder {\n  private indices: { [name: string]: KeyIndex<string> } = {\n    'alt-key': AltIndex,\n    'day-period-alt-key': DayPeriodAltIndex,\n    'era-alt-key': EraAltIndex,\n    'plural-key': PluralIndex,\n    ...CALENDAR_INDICES,\n    ...GREGORIAN_INDICES,\n    ...emptyCalendarIndex('buddhist'),\n    ...emptyCalendarIndex('japanese'),\n    ...emptyCalendarIndex('persian'),\n    ...DATEFIELDS_INDICES,\n    ...GENERAL_INDICES,\n    ...NUMBERS_INDICES,\n    ...TIMEZONE_INDICES,\n  };\n\n  constructor(private config: SchemaConfig) {}\n\n  /**\n   * Creates the origin of the code that builds the schema accessor instance.\n   */\n  origin(): Origin {\n    for (const key of COPY) {\n      this.make(key, this.config[key] || []);\n    }\n\n    // Ensure 'latn' is always defined since its our fallback\n    let numberSystemNames = this.config['number-system-name'] || [];\n    if (numberSystemNames.indexOf('latn') === -1) {\n      numberSystemNames = numberSystemNames.concat(['latn']);\n    }\n    this.make('number-system-name', numberSystemNames);\n\n    const code: any[] = [\n      NAMES,\n      NUMBERS,\n      DATEFIELDS,\n      LAYOUT,\n      LIST_PATTERNS,\n      BUDDHIST,\n      GREGORIAN,\n      JAPANESE,\n      PERSIAN,\n      TIMEZONE,\n      CURRENCIES,\n      UNITS,\n      CONTEXT_TRANSFORM,\n    ];\n\n    for (const name of this.config.calendars || []) {\n      switch (name) {\n        case 'buddhist':\n          this.add(BUDDHIST_INDICES);\n          this.copy('buddhist-available-format');\n          this.copy('buddhist-plural-format');\n          this.copy('buddhist-interval-format');\n          break;\n        case 'japanese':\n          this.add(JAPANESE_INDICES);\n          this.copy('japanese-available-format');\n          this.copy('japanese-plural-format');\n          this.copy('japanese-interval-format');\n          break;\n        case 'persian':\n          this.add(PERSIAN_INDICES);\n          this.copy('persian-available-format');\n          this.copy('persian-plural-format');\n          this.copy('persian-interval-format');\n          break;\n      }\n    }\n\n    this.copy('gregorian-available-format');\n    this.copy('gregorian-plural-format');\n    this.copy('gregorian-interval-format');\n    return origin(code, this.indices);\n  }\n\n  /**\n   * Set the key index with the given name.\n   */\n  private make(name: string, keys: string[]): void {\n    this.indices[name] = new KeyIndexImpl<string>(keys);\n  }\n\n  private copy(name: SchemaConfigKey): void {\n    this.indices[name] = new KeyIndexImpl<string>(this.config[name] || []);\n  }\n\n  private add(indices: KeyIndexMap): void {\n    const names = Object.keys(indices);\n    for (const name of names) {\n      this.indices[name] = indices[name];\n    }\n  }\n}\n"]}