import { DigitsArrow, FieldArrow, KeyIndex, PrimitiveBundle, ScopeArrow } from '@phensley/cldr-types';
/**
 * @public
 */
export declare class FieldArrowImpl implements FieldArrow {
    readonly offset: number;
    constructor(offset: number);
    get(bundle: PrimitiveBundle): string;
}
/**
 * @public
 */
export declare class ScopeArrowImpl<T extends string, R> implements ScopeArrow<T, R> {
    readonly map: {
        [P in T]: R;
    };
    constructor(map: {
        [P in T]: R;
    });
    get(key: T): R | undefined;
}
/**
 * Special vector to store a pluralized number pattern and its divisor together.
 *
 * @public
 */
export declare class DigitsArrowImpl<T extends string> implements DigitsArrow<T> {
    readonly offset: number;
    readonly index: KeyIndex<T>;
    readonly values: number[];
    static EMPTY: [string, number];
    readonly size2: number;
    constructor(offset: number, index: KeyIndex<T>, values: number[]);
    get(bundle: PrimitiveBundle, key: T, digits: number): [string, number];
}
/**
 * Generalized multi-dimensional vector arrow.
 *
 * @public
 */
export declare class VectorArrowImpl {
    readonly keysets: KeyIndex<string>[];
    readonly offset: number;
    readonly len: number;
    private last;
    private factors;
    constructor(offset: number, keysets: KeyIndex<string>[]);
    valid(...keys: (string | string[])[]): boolean;
    exists(bundle: PrimitiveBundle): boolean;
    get(bundle: PrimitiveBundle, ...keys: (string | string[])[]): string;
    mapping(bundle: PrimitiveBundle): any;
    private _index;
    private _get;
    private _mapping;
}
