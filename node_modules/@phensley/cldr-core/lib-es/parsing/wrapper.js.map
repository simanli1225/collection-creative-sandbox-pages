{"version":3,"file":"wrapper.js","sourceRoot":"","sources":["../../src/parsing/wrapper.ts"],"names":[],"mappings":"AAEA;;;GAGG;AACH,MAAM,CAAC,IAAM,mBAAmB,GAAG,UAAC,GAAW;IAC7C,IAAM,KAAK,GAAkB,EAAE,CAAC;IAChC,IAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;IAEvB,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,IAAI,OAAO,GAAG,KAAK,CAAC;IACpB,IAAI,KAAK,GAAG,KAAK,CAAC;IAClB,IAAI,CAAC,GAAG,CAAC,CAAC;IAEV,OAAO,CAAC,GAAG,GAAG,EAAE,CAAC;QACf,IAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;QAClB,QAAQ,EAAE,EAAE,CAAC;YACX,KAAK,GAAG;gBACN,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBACnB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAChB,GAAG,GAAG,EAAE,CAAC;gBACX,CAAC;gBACD,KAAK,GAAG,IAAI,CAAC;gBACb,MAAM;YAER,KAAK,GAAG;gBACN,KAAK,GAAG,KAAK,CAAC;gBACd,MAAM;YAER,KAAK,GAAG;gBACN,IAAI,OAAO,EAAE,CAAC;oBACZ,OAAO,GAAG,KAAK,CAAC;gBAClB,CAAC;qBAAM,CAAC;oBACN,OAAO,GAAG,IAAI,CAAC;gBACjB,CAAC;gBACD,MAAM;YAER;gBACE,IAAI,KAAK,EAAE,CAAC;oBACV,sCAAsC;oBACtC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;gBACzB,CAAC;qBAAM,CAAC;oBACN,GAAG,IAAI,EAAE,CAAC;gBACZ,CAAC;gBACD,MAAM;QACV,CAAC;QACD,CAAC,EAAE,CAAC;IACN,CAAC;IAED,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACnB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAClB,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC","sourcesContent":["export type WrapperNode = number | string;\n\n/**\n * Parse a generic wrapper pattern.\n * Example:  \"{1} at {0}\"\n */\nexport const parseWrapperPattern = (raw: string): WrapperNode[] => {\n  const nodes: WrapperNode[] = [];\n  const len = raw.length;\n\n  let buf = '';\n  let inquote = false;\n  let intag = false;\n  let i = 0;\n\n  while (i < len) {\n    const ch = raw[i];\n    switch (ch) {\n      case '{':\n        if (buf.length > 0) {\n          nodes.push(buf);\n          buf = '';\n        }\n        intag = true;\n        break;\n\n      case '}':\n        intag = false;\n        break;\n\n      case \"'\":\n        if (inquote) {\n          inquote = false;\n        } else {\n          inquote = true;\n        }\n        break;\n\n      default:\n        if (intag) {\n          // Index doesn't exceed single digits.\n          nodes.push(Number(ch));\n        } else {\n          buf += ch;\n        }\n        break;\n    }\n    i++;\n  }\n\n  if (buf.length > 0) {\n    nodes.push(buf);\n  }\n\n  return nodes;\n};\n"]}