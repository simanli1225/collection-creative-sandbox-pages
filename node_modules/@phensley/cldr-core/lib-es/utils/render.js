var StringValue = /** @class */ (function () {
    function StringValue() {
        this.str = '';
    }
    StringValue.prototype.length = function () {
        return this.str.length;
    };
    StringValue.prototype.get = function (i) {
        return this.str[i] || '';
    };
    StringValue.prototype.add = function (_type, value) {
        this.str += value;
    };
    StringValue.prototype.append = function (value) {
        this.str += value;
    };
    StringValue.prototype.insert = function (i, _type, value) {
        var prefix = this.str.substring(0, i);
        var suffix = this.str.substring(i);
        this.str = "".concat(prefix).concat(value).concat(suffix);
    };
    StringValue.prototype.render = function () {
        var s = this.str;
        this.str = '';
        return s;
    };
    StringValue.prototype.reset = function () {
        this.str = '';
    };
    StringValue.prototype.join = function () {
        var str = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            str[_i] = arguments[_i];
        }
        return str.join('');
    };
    StringValue.prototype.wrap = function (pattern, args) {
        for (var _i = 0, pattern_1 = pattern; _i < pattern_1.length; _i++) {
            var n = pattern_1[_i];
            if (typeof n === 'string') {
                this.add('literal', n);
            }
            else {
                var arg = args[n];
                if (arg) {
                    this.str += arg;
                }
            }
        }
    };
    StringValue.prototype.empty = function () {
        return '';
    };
    return StringValue;
}());
export { StringValue };
var PartsValue = /** @class */ (function () {
    function PartsValue() {
        this.parts = [];
    }
    PartsValue.prototype.length = function () {
        return this.parts.length;
    };
    PartsValue.prototype.get = function (i) {
        var p = this.parts[i];
        return p ? p.value : '';
    };
    PartsValue.prototype.add = function (type, value) {
        this.parts.push({ type: type, value: value });
    };
    PartsValue.prototype.append = function (value) {
        for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {
            var p = value_1[_i];
            this.parts.push(p);
        }
    };
    PartsValue.prototype.insert = function (i, type, value) {
        this.parts.splice(i, 0, { type: type, value: value });
    };
    PartsValue.prototype.render = function () {
        var p = this.parts;
        this.parts = [];
        return p;
    };
    PartsValue.prototype.reset = function () {
        this.parts = [];
    };
    PartsValue.prototype.join = function () {
        var _a;
        var parts = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            parts[_i] = arguments[_i];
        }
        return (_a = []).concat.apply(_a, parts);
    };
    PartsValue.prototype.wrap = function (pattern, args) {
        for (var _i = 0, pattern_2 = pattern; _i < pattern_2.length; _i++) {
            var n = pattern_2[_i];
            if (typeof n === 'string') {
                this.add('literal', n);
            }
            else {
                for (var _a = 0, _b = args[n] || []; _a < _b.length; _a++) {
                    var p = _b[_a];
                    this.parts.push(p);
                }
            }
        }
    };
    PartsValue.prototype.empty = function () {
        return [];
    };
    return PartsValue;
}());
export { PartsValue };
//# sourceMappingURL=render.js.map