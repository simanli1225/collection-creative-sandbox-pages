{"version":3,"file":"render.js","sourceRoot":"","sources":["../../src/utils/render.ts"],"names":[],"mappings":"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","sourcesContent":["import { Part } from '@phensley/decimal';\nimport { WrapperNode } from '../parsing/wrapper';\n\nexport interface AbstractValue<R> {\n  length(): number;\n  add(type: string, value: string): void;\n  get(i: number): string;\n  append(value: R): void;\n  insert(i: number, type: string, value: string): void;\n  render(): R;\n  reset(): void;\n  join(...elems: R[]): R;\n  wrap(pattern: WrapperNode[], args: R[]): void;\n  empty(): R;\n}\n\nexport class StringValue implements AbstractValue<string> {\n  private str: string = '';\n\n  length(): number {\n    return this.str.length;\n  }\n\n  get(i: number): string {\n    return this.str[i] || '';\n  }\n\n  add(_type: string, value: string): void {\n    this.str += value;\n  }\n\n  append(value: string): void {\n    this.str += value;\n  }\n\n  insert(i: number, _type: string, value: string): void {\n    const prefix = this.str.substring(0, i);\n    const suffix = this.str.substring(i);\n    this.str = `${prefix}${value}${suffix}`;\n  }\n\n  render(): string {\n    const s = this.str;\n    this.str = '';\n    return s;\n  }\n\n  reset(): void {\n    this.str = '';\n  }\n\n  join(...str: string[]): string {\n    return str.join('');\n  }\n\n  wrap(pattern: WrapperNode[], args: string[]): void {\n    for (const n of pattern) {\n      if (typeof n === 'string') {\n        this.add('literal', n);\n      } else {\n        const arg = args[n];\n        if (arg) {\n          this.str += arg;\n        }\n      }\n    }\n  }\n\n  empty(): string {\n    return '';\n  }\n}\n\nexport class PartsValue implements AbstractValue<Part[]> {\n  private parts: Part[] = [];\n\n  length(): number {\n    return this.parts.length;\n  }\n\n  get(i: number): string {\n    const p = this.parts[i];\n    return p ? p.value : '';\n  }\n\n  add(type: string, value: string): void {\n    this.parts.push({ type, value });\n  }\n\n  append(value: Part[]): void {\n    for (const p of value) {\n      this.parts.push(p);\n    }\n  }\n\n  insert(i: number, type: string, value: string): void {\n    this.parts.splice(i, 0, { type, value });\n  }\n\n  render(): Part[] {\n    const p = this.parts;\n    this.parts = [];\n    return p;\n  }\n\n  reset(): void {\n    this.parts = [];\n  }\n\n  join(...parts: Part[][]): Part[] {\n    return ([] as Part[]).concat(...parts);\n  }\n\n  wrap(pattern: WrapperNode[], args: Part[][]): void {\n    for (const n of pattern) {\n      if (typeof n === 'string') {\n        this.add('literal', n);\n      } else {\n        for (const p of args[n] || []) {\n          this.parts.push(p);\n        }\n      }\n    }\n  }\n\n  empty(): Part[] {\n    return [];\n  }\n}\n"]}