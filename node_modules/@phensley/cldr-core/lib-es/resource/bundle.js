import { pluralRules } from '@phensley/plurals';
/**
 * @internal
 */
var StringBundle = /** @class */ (function () {
    function StringBundle(_id, _tag, strings, exceptions, index, _spellout) {
        this._id = _id;
        this._tag = _tag;
        this.strings = strings;
        this.exceptions = exceptions;
        this.index = index;
        this._spellout = _spellout;
        // Empty string will select the preferred calendar for the region.
        this._calendarSystem = '';
        this._numberSystem = 'default';
        var language = _tag.language();
        this._languageRegion = "".concat(language, "-").concat(_tag.region());
        this._languageScript = "".concat(language, "-").concat(_tag.script());
        this._plurals = pluralRules.get(language, _tag.region());
        // When bundle is constructed, see if there are unicode extensions for
        // number and calendar systems.
        for (var _i = 0, _a = _tag.extensionSubtags('u'); _i < _a.length; _i++) {
            var subtag = _a[_i];
            if (subtag.startsWith('nu-')) {
                this._numberSystem = subtag.substring(3);
            }
            else if (subtag.startsWith('ca-')) {
                this._calendarSystem = subtag.substring(3);
            }
        }
    }
    StringBundle.prototype.id = function () {
        return this._id;
    };
    StringBundle.prototype.tag = function () {
        return this._tag;
    };
    StringBundle.prototype.language = function () {
        return this._tag.language();
    };
    StringBundle.prototype.region = function () {
        return this._tag.region();
    };
    StringBundle.prototype.languageScript = function () {
        return this._languageScript;
    };
    StringBundle.prototype.languageRegion = function () {
        return this._languageRegion;
    };
    StringBundle.prototype.calendarSystem = function () {
        return this._calendarSystem;
    };
    StringBundle.prototype.numberSystem = function () {
        return this._numberSystem;
    };
    StringBundle.prototype.get = function (offset) {
        // If there is an exception index, attempt to resolve it.
        /* istanbul ignore else */
        if (this.index) {
            var i = this.index[offset];
            if (i !== undefined) {
                return this.exceptions[i] || '';
            }
        }
        // Return the actual string.
        return this.strings[offset] || '';
    };
    /**
     * Group of spellout rules inside this bundle.
     */
    StringBundle.prototype.spellout = function () {
        return this._spellout;
    };
    /**
     * Plural rules for cardinals and ordinals for this locale.
     */
    StringBundle.prototype.plurals = function () {
        return this._plurals;
    };
    return StringBundle;
}());
export { StringBundle };
//# sourceMappingURL=bundle.js.map