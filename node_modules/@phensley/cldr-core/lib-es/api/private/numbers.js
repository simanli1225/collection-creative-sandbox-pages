import { Cache } from '@phensley/cldr-utils';
import { DecimalNumberingSystem } from '../../systems';
import { decimalNumberingDigits } from '../../systems/numbering/autogen.names';
/**
 * @internal
 */
var NumberParamsCache = /** @class */ (function () {
    function NumberParamsCache(bundle, internals) {
        var _this = this;
        this.bundle = bundle;
        this.internals = internals;
        this.numberParamsCache = new Cache(function (s) { return _this.build(s); }, 20);
        this.numbers = internals.schema.Numbers;
        this.latnSystemInfo = this.numbers.numberSystem.get('latn');
        this.latnSystem = this.buildNumberSystem('latn');
    }
    NumberParamsCache.prototype.getNumberParams = function (numberSystem, defaultSystem) {
        // Default numbering system for a locale unless explicitly overridden
        // https://www.unicode.org/reports/tr35/tr35-33/tr35-numbers.html#defaultNumberingSystem
        if (!defaultSystem) {
            defaultSystem = 'default';
        }
        if (!numberSystem) {
            numberSystem = this.bundle.numberSystem();
        }
        var realName = this.select(numberSystem);
        // Handle invalid number systems by returning the specified default
        // TODO: include algorithmic number system check
        if (!decimalNumberingDigits[realName]) {
            realName = this.select(defaultSystem);
            // TODO: temporary double-check to default for zh finance until we
            // have rbnf implemented.
            /* istanbul ignore if */
            if (!decimalNumberingDigits[realName]) {
                realName = this.select('default');
            }
        }
        return this.numberParamsCache.get(realName);
    };
    NumberParamsCache.prototype.select = function (numberSystem) {
        switch (numberSystem) {
            case 'default':
            case 'native':
            case 'finance':
            case 'traditional':
                // Dereference to find real name of number system
                return this.numbers.numberSystems.get(this.bundle, numberSystem);
            default:
                return numberSystem;
        }
    };
    NumberParamsCache.prototype.build = function (name) {
        var latnSystem = this.latnSystem;
        var system = name === 'latn' ? latnSystem : this.buildNumberSystem(name);
        var info = this.numbers.numberSystem.get(name) || this.latnSystemInfo;
        var currencySpacing = info.currencyFormats.spacing.exists(this.bundle)
            ? info.currencyFormats.spacing.mapping(this.bundle)
            : this.latnSystemInfo.currencyFormats.spacing.mapping(this.bundle);
        var minimumGroupingDigits = system.minimumGroupingDigits, primaryGroupingSize = system.primaryGroupingSize, secondaryGroupingSize = system.secondaryGroupingSize, symbols = system.symbols;
        return {
            numberSystemName: name,
            system: system,
            latnSystem: latnSystem,
            digits: makeDigits(name),
            latinDigits: makeDigits('latn'),
            symbols: symbols,
            minimumGroupingDigits: minimumGroupingDigits,
            primaryGroupingSize: primaryGroupingSize,
            secondaryGroupingSize: secondaryGroupingSize,
            currencySpacing: currencySpacing,
        };
    };
    NumberParamsCache.prototype.buildNumberSystem = function (name) {
        var bundle = this.bundle;
        var system = this.numbers.numberSystem;
        var info = system.get(name) || this.latnSystemInfo;
        var symbols = info.symbols.exists(bundle)
            ? info.symbols.mapping(bundle)
            : this.latnSystemInfo.symbols.mapping(bundle);
        var standardRaw = info.decimalFormats.standard.get(bundle) || this.latnSystemInfo.decimalFormats.standard.get(bundle);
        // Fetch standard pattern to determine grouping digits
        var standard = this.internals.numbers.getNumberPattern(standardRaw, false);
        var minimumGroupingDigits = Number(this.numbers.minimumGroupingDigits.get(this.bundle));
        return new DecimalNumberingSystem(name, decimalNumberingDigits[name], symbols, minimumGroupingDigits, standard.priGroup, standard.secGroup);
    };
    return NumberParamsCache;
}());
export { NumberParamsCache };
/**
 * The codepoints for most Unicode decimal digit sets are in increasing order.
 * To save space we store the base digit '0' and generate '1'..'9' from it.
 */
var makeDigits = function (name) {
    var digits = decimalNumberingDigits[name];
    if (digits.length !== 10) {
        var c = digits[0].charCodeAt(0);
        if (c >= 0xd800 && c <= 0xdbff) {
            var c2 = digits[0].charCodeAt(1);
            /* istanbul ignore else */
            if (c2 >= 0xdc00 && c2 <= 0xdfff) {
                for (var i = 1; i < 10; i++) {
                    var digit = String.fromCharCode(c) + String.fromCharCode(c2 + i);
                    digits.push(digit);
                }
            }
        }
        else {
            for (var i = 1; i < 10; i++) {
                digits.push(String.fromCharCode(c + i));
            }
        }
        decimalNumberingDigits[name] = digits;
    }
    return digits;
};
//# sourceMappingURL=numbers.js.map