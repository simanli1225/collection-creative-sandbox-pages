{"version":3,"file":"numbers.js","sourceRoot":"","sources":["../../src/api/numbers.ts"],"names":[],"mappings":"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","sourcesContent":["import { ContextType, CurrencyType, PluralType } from '@phensley/cldr-types';\nimport { coerceDecimal, Decimal, DecimalArg, Part } from '@phensley/decimal';\n\nimport {\n  CurrencyDisplayNameOptions,\n  CurrencyFormatOptions,\n  CurrencyFractions,\n  CurrencySymbolWidthType,\n  DecimalAdjustOptions,\n  DecimalFormatOptions,\n} from '../common';\n\nimport { Bundle } from '../resource';\nimport { ContextTransformInfo, NumberParams } from '../common/private';\nimport { Numbers } from './api';\nimport { PrivateApiImpl } from './private';\nimport {\n  getCurrencyForRegion,\n  getCurrencyFractions,\n  GeneralInternals,\n  NumberInternals,\n  NumberRenderer,\n} from '../internals';\n\nconst DEFAULT_CURRENCY_OPTIONS: CurrencyDisplayNameOptions = { context: 'begin-sentence' };\n\n/**\n * Number and currency formatting.\n *\n * @internal\n */\nexport class NumbersImpl implements Numbers {\n  private transform: ContextTransformInfo;\n\n  constructor(\n    private readonly bundle: Bundle,\n    private readonly numbers: NumberInternals,\n    private readonly general: GeneralInternals,\n    private readonly privateApi: PrivateApiImpl,\n  ) {\n    this.transform = privateApi.getContextTransformInfo();\n  }\n\n  adjustDecimal(n: DecimalArg, opts?: DecimalAdjustOptions): Decimal {\n    return this.numbers.adjustDecimal(coerceDecimal(n), opts);\n  }\n\n  parseDecimal(n: number | string): Decimal {\n    return coerceDecimal(n);\n  }\n\n  getCurrencySymbol(code: CurrencyType, width?: CurrencySymbolWidthType): string {\n    return this.numbers.getCurrencySymbol(this.bundle, code, width);\n  }\n\n  getCurrencyDisplayName(code: CurrencyType, opts: CurrencyDisplayNameOptions = DEFAULT_CURRENCY_OPTIONS): string {\n    const name = this.numbers.getCurrencyDisplayName(this.bundle, code);\n    return this.general.contextTransform(name, this.transform, _ctx(opts), 'currencyName');\n  }\n\n  getCurrencyFractions(code: CurrencyType): CurrencyFractions {\n    return getCurrencyFractions(code);\n  }\n\n  getCurrencyForRegion(region: string): CurrencyType {\n    return getCurrencyForRegion(region);\n  }\n\n  getCurrencyPluralName(\n    n: DecimalArg,\n    code: string,\n    opts: CurrencyDisplayNameOptions = DEFAULT_CURRENCY_OPTIONS,\n  ): string {\n    const plural = this.getPluralCardinal(n);\n    const name = this.numbers.getCurrencyPluralName(this.bundle, code, plural as PluralType);\n    return this.general.contextTransform(name, this.transform, _ctx(opts), 'currencyName');\n  }\n\n  getPluralCardinal(n: DecimalArg, options?: DecimalAdjustOptions): string {\n    const d = options ? this.adjustDecimal(n, options) : coerceDecimal(n);\n    return this.bundle.plurals().cardinal(d);\n  }\n\n  getPluralOrdinal(n: DecimalArg, options?: DecimalAdjustOptions): string {\n    const d = options ? this.adjustDecimal(n, options) : coerceDecimal(n);\n    return this.bundle.plurals().ordinal(d);\n  }\n\n  formatDecimal(n: DecimalArg, options?: DecimalFormatOptions): string {\n    options = options || {};\n    const params = this.privateApi.getNumberParams(options.nu);\n    const renderer = this.numbers.stringRenderer(params);\n    return this.formatDecimalImpl(renderer, params, n, options);\n  }\n\n  formatDecimalToParts(n: DecimalArg, options?: DecimalFormatOptions): Part[] {\n    options = options || {};\n    const params = this.privateApi.getNumberParams(options.nu);\n    const renderer = this.numbers.partsRenderer(params);\n    return this.formatDecimalImpl(renderer, params, n, options);\n  }\n\n  formatCurrency(n: DecimalArg, code: CurrencyType, options?: CurrencyFormatOptions): string {\n    options = options || {};\n    const params = this.privateApi.getNumberParams(options.nu, 'finance');\n    const renderer = this.numbers.stringRenderer(params);\n    return this.formatCurrencyImpl(renderer, params, n, code, options);\n  }\n\n  formatCurrencyToParts(n: DecimalArg, code: CurrencyType, options?: CurrencyFormatOptions): Part[] {\n    options = options || {};\n    const params = this.privateApi.getNumberParams(options.nu, 'finance');\n    const renderer = this.numbers.partsRenderer(params);\n    return this.formatCurrencyImpl(renderer, params, n, code, options);\n  }\n\n  protected formatDecimalImpl<T>(\n    renderer: NumberRenderer<T>,\n    params: NumberParams,\n    n: DecimalArg,\n    options: DecimalFormatOptions,\n  ): T {\n    // A NaN or Infinity value will just return the locale's representation\n    const d = coerceDecimal(n);\n    const v = validate(d, options, renderer, params);\n    if (v !== undefined) {\n      return v;\n    }\n    const [result] = this.numbers.formatDecimal(this.bundle, renderer, d, options, params);\n    return result;\n  }\n\n  protected formatCurrencyImpl<T>(\n    renderer: NumberRenderer<T>,\n    params: NumberParams,\n    n: DecimalArg,\n    code: CurrencyType,\n    options: CurrencyFormatOptions,\n  ): T {\n    // Not much to be done with NaN and Infinity with currencies, so we always\n    // throw an error.\n    const d = coerceDecimal(n);\n    validate(d, FORCE_ERRORS, renderer, params);\n    return this.numbers.formatCurrency(this.bundle, renderer, coerceDecimal(n), code, options, params);\n  }\n}\nconst FORCE_ERRORS: DecimalFormatOptions = { errors: ['nan', 'infinity'] };\n\n/**\n * Check if the number is a NaN or Infinity and whether this should throw\n * an error, or return the locale's string representation.\n */\nconst validate = <T>(\n  n: Decimal,\n  opts: DecimalFormatOptions,\n  renderer: NumberRenderer<T>,\n  params: NumberParams,\n): T | undefined => {\n  // Check if we have NaN or Infinity\n  const isnan = n.isNaN();\n  const isinfinity = n.isInfinity();\n\n  if (Array.isArray(opts.errors)) {\n    // Check if we should throw an error on either of these\n    if (isnan && opts.errors.indexOf('nan') !== -1) {\n      throw Error(`Invalid argument: NaN`);\n    }\n    if (isinfinity && opts.errors.indexOf('infinity') !== -1) {\n      throw Error(`Invalid argument: Infinity`);\n    }\n  }\n\n  return isnan\n    ? renderer.make('nan', params.symbols.nan)\n    : isinfinity\n      ? renderer.make('infinity', params.symbols.infinity)\n      : undefined;\n};\n\n// Default an options context value\nconst _ctx = (o: CurrencyDisplayNameOptions): ContextType => _def(o, 'context', 'begin-sentence' as ContextType);\n\n// Default an option value\nconst _def = <O, K extends keyof O, T>(o: O, k: K, t: T): T => (o[k] as unknown as T) || t;\n"]}