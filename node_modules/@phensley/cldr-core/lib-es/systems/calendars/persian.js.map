{"version":3,"file":"persian.js","sourceRoot":"","sources":["../../../src/systems/calendars/persian.ts"],"names":[],"mappings":"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","sourcesContent":["import { CalendarDate } from './calendar';\nimport { CalendarConstants } from './constants';\nimport { DateField } from './fields';\nimport { floorDiv } from './utils';\nimport { TimePeriod } from './interval';\nimport { CalendarDateFields } from './types';\n\n/**\n * Construct a date using the rules of the Persian calendar.\n *\n * type: persian\n *\n * @public\n */\nexport class PersianDate extends CalendarDate {\n  protected constructor(firstDay: number, minDays: number) {\n    super('persian', firstDay, minDays);\n  }\n\n  relatedYear(): number {\n    return this._fields[DateField.EXTENDED_YEAR] + 622;\n  }\n\n  set(fields: Partial<CalendarDateFields>): PersianDate {\n    const f = { ...this.fields(), ...fields };\n    const jd = this._ymdToJD(f.year!, f.month!, f.day!);\n    const ms = this._timeToMs(f) - this.timeZoneOffset();\n    return this._new().initFromJD(jd, ms, this.timeZoneId());\n  }\n\n  add(fields: Partial<TimePeriod>): PersianDate {\n    const [jd, ms] = this._add(fields);\n    return this._new().initFromJD(jd, ms, this.timeZoneId());\n  }\n\n  subtract(fields: Partial<TimePeriod>): PersianDate {\n    return this.add(this._invertPeriod(fields));\n  }\n\n  withZone(zoneId: string): PersianDate {\n    return this._new().initFromUnixEpoch(this.unixEpoch(), zoneId);\n  }\n\n  toString(): string {\n    return this._toString('Persian');\n  }\n\n  static fromFields(fields: Partial<CalendarDateFields>, firstDay: number, minDays: number): PersianDate {\n    return new PersianDate(firstDay, minDays).set({ year: 1, month: 1, day: 1, ...fields });\n  }\n\n  static fromUnixEpoch(epoch: number, zoneId: string, firstDay: number, minDays: number): PersianDate {\n    return new PersianDate(firstDay, minDays).initFromUnixEpoch(epoch, zoneId);\n  }\n\n  protected _new(): PersianDate {\n    return new PersianDate(this._firstDay, this._minDays);\n  }\n\n  protected initFromUnixEpoch(epoch: number, zoneId: string): PersianDate {\n    super.initFromUnixEpoch(epoch, zoneId);\n    computePersianFields(this._fields);\n    return this;\n  }\n\n  protected initFromJD(jd: number, msDay: number, zoneId: string): PersianDate {\n    super.initFromJD(jd, msDay, zoneId);\n    computePersianFields(this._fields);\n    return this;\n  }\n\n  protected initFields(f: number[]): void {\n    computePersianFields(f);\n  }\n\n  protected monthCount(): number {\n    return 12;\n  }\n\n  protected daysInMonth(y: number, m: number): number {\n    return MONTH_COUNT[m][leapPersian(y) ? 1 : 0];\n  }\n\n  protected daysInYear(y: number): number {\n    return leapPersian(y) ? 366 : 365;\n  }\n\n  protected monthStart(eyear: number, month: number, _useMonth: boolean): number {\n    let jd = CalendarConstants.JD_PERSIAN_EPOCH - 1 + 365 * (eyear - 1) + floor((8 * eyear + 21) / 33);\n    if (month !== 0) {\n      const mc = MONTH_COUNT;\n      const m = floor(month);\n      const d = month - m;\n\n      jd += mc[m][2];\n\n      // TODO: we never reach the block below since all internal uses of monthStart\n      // pass in an integer\n\n      // Check if there is a fractional month part, and if so add the number\n      // of the days in the next month multiplied by the fraction\n      /* istanbul ignore if */\n      if (d !== 0) {\n        // number of days in Esfand determined by:\n        // \"number of days between two vernal equinoxes\"\n        const isLeap = leapPersian(eyear);\n\n        // note: the 'month' parameter must always be <= # months in the calendar\n        // year, so <= 12 in this case.\n        jd += d * mc[m + 1][isLeap ? 1 : 0];\n      }\n    }\n    return jd;\n  }\n\n  private _ymdToJD(y: number, m: number, d: number): number {\n    y |= 0;\n    const leap = leapPersian(y);\n    const mc = this.monthCount();\n    m = m < 1 ? 1 : m > mc ? mc : m;\n    const dc = MONTH_COUNT[m - 1][leap ? 1 : 0];\n    d = d < 1 ? 1 : d > dc ? dc : d;\n\n    const favardin1 = 365 * (y - 1) + floor((8 * y + 21) / 33);\n    const mdays = MONTH_COUNT[m - 1][2];\n    const days = favardin1 + d + mdays - 1;\n    return days + CalendarConstants.JD_PERSIAN_EPOCH;\n  }\n}\n\nconst floor = Math.floor;\n\nconst MONTH_COUNT = [\n  [31, 31, 0], // Farvardin\n  [31, 31, 31], // Ordibehesht\n  [31, 31, 62], // Khordad\n  [31, 31, 93], // Tir\n  [31, 31, 124], // Mordad\n  [31, 31, 155], // Shahrivar\n  [30, 30, 186], // Mehr\n  [30, 30, 216], // Aban\n  [30, 30, 246], // Azar\n  [30, 30, 276], // Dey\n  [30, 30, 306], // Bahman\n  [29, 30, 336], // Esfand\n];\n\nconst computePersianFields = (f: number[]): void => {\n  const jd = f[DateField.JULIAN_DAY];\n  const days = jd - CalendarConstants.JD_PERSIAN_EPOCH;\n  const year = 1 + floor((33 * days + 3) / 12053);\n\n  const favardin1 = 365 * (year - 1) + floor((8 * year + 21) / 33);\n  const doy = days - favardin1;\n  const month = floor(doy < 216 ? doy / 31 : (doy - 6) / 30);\n  const dom = doy - MONTH_COUNT[month][2] + 1;\n\n  f[DateField.ERA] = 0;\n  f[DateField.YEAR] = year;\n  f[DateField.EXTENDED_YEAR] = year;\n  f[DateField.MONTH] = month + 1;\n  f[DateField.DAY_OF_MONTH] = dom;\n  f[DateField.DAY_OF_YEAR] = doy + 1;\n  f[DateField.IS_LEAP] = leapPersian(year) ? 1 : 0;\n};\n\n/**\n * Return true if the given year is a leap year in the Persian calendar; false otherwise;\n */\nconst leapPersian = (y: number): boolean => {\n  const rem: [number] = [0];\n  floorDiv(25 * y + 11, 33, rem);\n  return rem[0] < 8;\n};\n"]}