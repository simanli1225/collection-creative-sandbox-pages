{"version":3,"file":"timezone.js","sourceRoot":"","sources":["../../../src/systems/calendars/timezone.ts"],"names":[],"mappings":"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","sourcesContent":["import { MetaZoneType } from '@phensley/cldr-types';\nimport { TimeZoneStableIdIndex } from '../../schema';\nimport { TZ } from '@phensley/timezone';\n\nimport { zoneAliasRaw } from './autogen.aliases';\nimport { metazoneData } from './autogen.zonedata';\nimport { numarray, stringToObject } from '../../utils/string';\n\nexport interface ZoneInfo {\n  zoneid: string;\n  stableid: string;\n  abbr: string;\n  dst: number;\n  offset: number;\n  metazoneid: string;\n}\n\ninterface MetazoneRecord {\n  offsets: number[];\n  untils: number[];\n}\n\nexport const zoneInfoFromUTC = (zoneid: string, utc: number): ZoneInfo => {\n  init();\n\n  let tzinfo = TZ.fromUTC(zoneid, utc);\n  if (tzinfo === undefined) {\n    tzinfo = TZ.utcZone();\n  }\n\n  // For the purposes of CLDR stable timezone ids, check if the passed-in\n  // id is an alias to a current/valid tzdb id.\n  const isstable = TimeZoneStableIdIndex.get(zoneid) !== -1;\n\n  // Use the passed-in id as the stable id if it is an alias,\n  // otherwise lookup the id in the stable map.\n  const stableid = isstable ? zoneid : metazones!.getStableId(tzinfo.zoneid);\n\n  // Use the corrected zone id to lookup the metazone\n  const metazoneid = metazones!.getMetazone(tzinfo.zoneid, utc);\n  return {\n    ...tzinfo,\n    metazoneid: metazoneid || ('' as MetaZoneType),\n    stableid,\n  };\n};\n\nexport const currentMetazone = (id: string): string | undefined => metazones!.getMetazone(id, Number.MAX_SAFE_INTEGER);\n\n/**\n * Map a given timezone identifier to a CLDR stable timezone id.\n * This is lighter-weight than going through `zoneInfoFromUTC`\n * since it doesn't need to decode the zone data.\n */\nexport const getStableTimeZoneId = (zoneid: string): string => {\n  init();\n  // Check if this is already a CLDR stable timezone id.\n  const isstable = TimeZoneStableIdIndex.get(zoneid) !== -1;\n  if (isstable) {\n    return zoneid;\n  }\n  // Resolve the passed-in string to a real tzdb zone id\n  const realid = TZ.resolveId(zoneid);\n  if (realid) {\n    // Map to a CLDR stable id\n    return metazones!.getStableId(realid);\n  }\n  return '';\n};\n\n/**\n * Maps a possible timezone alias to the correct id.\n */\nexport const substituteZoneAlias = (id: string): string => timeZoneAliases[id] || id;\n\n/**\n * Index all metazone information for quick access.\n */\nclass Metazones {\n  readonly metazoneids: string[];\n  readonly metazones: MetazoneRecord[] = [];\n  readonly zoneToMetazone: Map<string, number> = new Map();\n\n  readonly stableids: Map<string, string> = new Map();\n\n  constructor(raw: any) {\n    this.metazoneids = raw.metazoneids;\n    const index = numarray(raw.index, 36);\n    const offsets = numarray(raw.offsets, 36);\n    const untils = numarray(raw.untils, 36).map((n) => (n === -1 ? n : n * 1000));\n\n    for (let i = 0; i < index.length; i += 2) {\n      const s = index[i];\n      const e = index[i + 1];\n      const rec = {\n        offsets: offsets.slice(s, e),\n        untils: untils.slice(s, e),\n      };\n      this.metazones.push(rec);\n    }\n\n    // mapping of zoneid to metazone records\n    const zoneids = TZ.zoneIds();\n    const zoneindex = numarray(raw.zoneindex, 36);\n\n    // Mapping of tzdb id back to cldr stable id used for schema lookups\n    raw.stableids.split('|').forEach((d: string) => {\n      const p = d.split(':');\n      const i = Number(p[0]);\n      this.stableids.set(zoneids[i], p[1]);\n    });\n\n    // Sanity-check, since the zoneindex is based off the canonical\n    // zoneids array, but could be generated at different times. our test\n    // cases should ensure they're in sync, but warn of a discrepancy\n    /* istanbul ignore if */\n    if (zoneids.length !== zoneindex.length) {\n      console.log(`Error: time zone ids and zone index are not in sync!`);\n    }\n\n    for (let i = 0; i < zoneindex.length; i++) {\n      const mi = zoneindex[i];\n      if (mi !== -1) {\n        this.zoneToMetazone.set(zoneids[i], mi);\n        this.zoneToMetazone.set(zoneids[i].toLowerCase(), mi);\n      }\n    }\n  }\n\n  getMetazone(zoneid: string, utc: number): string | undefined {\n    const i = this.zoneToMetazone.get(zoneid);\n    if (i !== undefined) {\n      const rec = this.metazones[i]!;\n      // Note: we don't bother with binary search here since the metazone\n      // until arrays are quite short.\n      const { offsets, untils } = rec;\n      const len = untils.length;\n      for (let j = len - 1; j > 0; j--) {\n        if (untils[j] <= utc) {\n          return this.metazoneids[offsets[j]];\n        }\n      }\n\n      // Hit the end, return the initial metazone id\n      return this.metazoneids[offsets[0]];\n    }\n\n    // This zone has no metazoneid, e.g. \"Etc/GMT+1\"\n    return undefined;\n  }\n\n  getStableId(zoneid: string): string {\n    return this.stableids.get(zoneid) || zoneid;\n  }\n}\n\nlet metazones: Metazones | undefined;\n\nconst init = (): void => {\n  if (!metazones) {\n    metazones = new Metazones(metazoneData);\n  }\n};\n\nconst zoneAlias = stringToObject(zoneAliasRaw, '|', ':');\n\n/**\n * Hand-built list of extra timezone aliases, for remapping timezone identifiers\n * that currently do not map 1:1 with a CLDR identifier or aliass.\n * reated using backward mapping in tz database v2017b.\n *\n * TODO: revisit to translate tz database aliases automatically and merge with\n * cldr aliases.\n */\nexport const timeZoneAliases: { [x: string]: string } = {\n  // Import generated zone aliases from CLDR\n  ...zoneAlias,\n\n  'Canada/East-Saskatchewan': 'America/Regina',\n  'Etc/Unknown': 'Factory',\n};\n"]}