import { CalendarDate } from './calendar';
import { CalendarDateFields, CalendarType } from './types';
import { TimePeriod } from './interval';
/**
 * Construct a date using the rules of the Gregorian calendar.
 *
 * type: gregory
 *
 * @public
 */
export declare class GregorianDate extends CalendarDate {
    static _init: void;
    protected constructor(type: CalendarType, firstDay: number, minDays: number);
    set(fields: Partial<CalendarDateFields>): GregorianDate;
    add(fields: Partial<TimePeriod>): GregorianDate;
    subtract(fields: Partial<TimePeriod>): GregorianDate;
    withZone(zoneId: string): GregorianDate;
    toString(): string;
    static fromFields(fields: Partial<CalendarDateFields>, firstDay: number, minDays: number): GregorianDate;
    static fromUnixEpoch(epoch: number, zoneId: string, firstDay?: number, minDays?: number): GregorianDate;
    protected _new(): GregorianDate;
    protected initFromUnixEpoch(epoch: number, zoneId: string): GregorianDate;
    protected initFromJD(jd: number, msDay: number, zoneId: string): GregorianDate;
    protected initFields(f: number[]): void;
    protected daysInMonth(y: number, m: number): number;
    protected daysInYear(y: number): number;
    protected monthCount(): number;
    protected monthStart(eyear: number, month: number, _useMonth: boolean): number;
    /**
     * Convert integer (year, month, day) to Julian day.
     */
    protected _ymdToJD(y: number, m: number, d: number): number;
    protected _set(f: Partial<CalendarDateFields>): GregorianDate;
}
