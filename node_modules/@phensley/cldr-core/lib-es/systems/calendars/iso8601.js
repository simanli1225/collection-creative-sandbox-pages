import { __extends } from "tslib";
import { GregorianDate } from './gregorian';
/**
 * Gregorian calendar with ISO-8601 first day of week and minimum days in week.
 *
 * type: iso8601
 *
 * @public
 */
var ISO8601Date = /** @class */ (function (_super) {
    __extends(ISO8601Date, _super);
    function ISO8601Date() {
        // ISO-8601 dates use hard-coded firstDay and minDays
        return _super.call(this, 'iso8601', 2 /* DayOfWeek.MONDAY */, 4 /* CalendarConstants.ISO8601_MIN_DAYS */) || this;
    }
    ISO8601Date.prototype.add = function (fields) {
        var _a = this._add(fields), jd = _a[0], ms = _a[1];
        return this._new().initFromJD(jd, ms, this.timeZoneId());
    };
    ISO8601Date.prototype.toString = function () {
        return this._toString('ISO8601');
    };
    ISO8601Date.prototype.withZone = function (zoneId) {
        return this._new().initFromUnixEpoch(this.unixEpoch(), zoneId);
    };
    ISO8601Date.fromFields = function (fields, _firstDay, _minDays) {
        return new ISO8601Date()._set(fields);
    };
    ISO8601Date.fromUnixEpoch = function (epoch, zoneId, _firstDay, _minDays) {
        return new ISO8601Date().initFromUnixEpoch(epoch, zoneId);
    };
    ISO8601Date.prototype._new = function () {
        return new ISO8601Date();
    };
    ISO8601Date.prototype.initFromUnixEpoch = function (epoch, zoneId) {
        return _super.prototype.initFromUnixEpoch.call(this, epoch, zoneId);
    };
    return ISO8601Date;
}(GregorianDate));
export { ISO8601Date };
//# sourceMappingURL=iso8601.js.map