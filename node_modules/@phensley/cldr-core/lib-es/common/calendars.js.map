{"version":3,"file":"calendars.js","sourceRoot":"","sources":["../../src/common/calendars.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  ContextType,\n  DateFieldWidthType,\n  DayPeriodAltType,\n  EraAltType,\n  EraWidthType,\n  FieldWidthType,\n  FormatWidthType,\n} from '@phensley/cldr-types';\n\nimport { NumberFormatOptions, NumberSystemType } from './numbers';\nimport { CalendarType } from '../systems/calendars/types';\nimport { TimePeriodField } from '../systems';\n\n/**\n * @public\n */\nexport interface ZonedDateTime {\n  /**\n   * Can be either a Date object or Unix epoch time in milliseconds.\n   * Both are interpreted as being relative to UTC.\n   */\n  date: number | Date;\n\n  /**\n   * Optional timezone identifier, defaulting to UTC.\n   */\n  zoneId?: string;\n}\n\n/**\n * @public\n */\nexport interface CalendarFieldsOptions {\n  /**\n   * Overrides which calendar to use\n   */\n  ca?: CalendarType;\n\n  /**\n   * Width of the fields.\n   */\n  width?: FieldWidthType;\n\n  /**\n   * Context in which the fields will be used\n   */\n  context?: ContextType;\n}\n\n/**\n * @public\n */\nexport interface EraFieldOptions {\n  /**\n   * Overrides which calendar to use\n   */\n  ca?: CalendarType;\n\n  /**\n   * Width of the fields.\n   */\n  width?: EraWidthType;\n\n  /**\n   * Context in which the fields will be displayed\n   */\n  context?: ContextType;\n}\n\n/**\n * @public\n */\nexport interface DateFieldFormatOptions {\n  /**\n   * Overrides which calendar to use\n   */\n  ca?: CalendarType;\n\n  /**\n   * Width of the field.\n   */\n  width?: DateFieldWidthType;\n\n  /**\n   * Context in which field will be displayed\n   */\n  context?: ContextType;\n}\n\n/**\n * @public\n */\nexport interface DateFormatAltOptions {\n  era?: EraAltType;\n  dayPeriod?: DayPeriodAltType;\n}\n\n/**\n * @public\n */\nexport interface DateFormatOptions {\n  /**\n   * Set format for both date and time.\n   */\n  datetime?: FormatWidthType;\n\n  /**\n   * Date format.\n   */\n  date?: FormatWidthType;\n\n  /**\n   * Time format.\n   */\n  time?: FormatWidthType;\n\n  /**\n   * Wrapper format to use, if both a date and time are being formatted.\n   */\n  wrap?: FormatWidthType;\n\n  /**\n   * A skeleton format containing date and/or time fields.\n   */\n  skeleton?: string;\n\n  /**\n   * Specify the calendar to use.\n   */\n  ca?: CalendarType;\n\n  /**\n   * Specify the number system to use.\n   */\n  nu?: NumberSystemType;\n\n  /**\n   * Context in which the formatted string will be used\n   */\n  context?: ContextType;\n\n  /**\n   * Selection of alternate fields.\n   */\n  alt?: DateFormatAltOptions;\n\n  /**\n   * Wrap with 'at' if available. This defaults to true since it was\n   * the default datetime wrapper format in CLDR releases prior to v42.\n   */\n  atTime?: boolean;\n}\n\n/**\n * @public\n */\nexport interface DateRawFormatOptions {\n  /**\n   * Raw date time pattern to use.\n   */\n  pattern?: string;\n\n  /**\n   * Specify the calendar to use.\n   */\n  ca?: CalendarType;\n\n  /**\n   * Specify the numbering system to use.\n   */\n  nu?: NumberSystemType;\n\n  /**\n   * Context in which the formatted string will be used\n   */\n  context?: ContextType;\n\n  /**\n   * Selection of alternate fields.\n   */\n  alt?: DateFormatAltOptions;\n}\n\n/**\n * @public\n */\nexport interface DateIntervalFormatOptions {\n  /**\n   * A skeleton format containing date and/or time fields. Note\n   * that if present, this overrides the 'date' and 'time' options below.\n   * If all are omitted a reasonable default will be selected.\n   */\n  skeleton?: string;\n\n  /**\n   * A skeleton containing fields to format if the difference\n   * between the start and end dates is 1 day or more.\n   */\n  date?: string;\n\n  /**\n   * A skeleton containing fields to format if the difference\n   * between the start and end dates is less than 1 day.\n   */\n  time?: string;\n\n  /**\n   * Specify the calendar to use\n   */\n  ca?: CalendarType;\n\n  /**\n   * Specify the number system to use\n   */\n  nu?: NumberSystemType;\n\n  /**\n   * Context in which the formatted string will be used\n   */\n  context?: ContextType;\n\n  /**\n   * Selection of alternate fields.\n   */\n  alt?: DateFormatAltOptions;\n\n  /**\n   * Wrap with 'at' if available. This defaults to true since it was\n   * the default datetime wrapper format in CLDR releases prior to v42.\n   */\n  atTime?: boolean;\n}\n\n/**\n * Options used to format a relative time field.\n *\n * @public\n */\nexport interface RelativeTimeFieldFormatOptions extends NumberFormatOptions {\n  /**\n   * Specify the format width.\n   */\n  width?: DateFieldWidthType;\n\n  /**\n   * Context in which the formatted string will be used\n   */\n  context?: ContextType;\n\n  /**\n   * Force format to always display in terms of numbers\n   */\n  numericOnly?: boolean;\n\n  /**\n   * In numeric mode, if the value is exactly 0 display \"now\" instead of \"in 0 seconds\"\n   */\n  alwaysNow?: boolean;\n}\n\n/**\n * Options used to format a relative time.\n *\n * @public\n */\nexport interface RelativeTimeFormatOptions extends RelativeTimeFieldFormatOptions {\n  /**\n   * Specify the calendar to use.\n   */\n  ca?: CalendarType;\n\n  /**\n   * Include day-of-week formatting when applicable.\n   */\n  dayOfWeek?: boolean;\n\n  /**\n   * Specify which field the relative time should be expressed in.\n   */\n  field?: TimePeriodField;\n}\n\n/**\n * @public\n */\nexport interface DateWrapperFormatOptions {\n  ca?: CalendarType;\n  width?: FormatWidthType;\n\n  /**\n   * Wrap with 'at' if available. This defaults to true since it was\n   * the default datetime wrapper format in CLDR releases prior to v42.\n   */\n  atTime?: boolean;\n}\n\n/**\n * @public\n */\nexport interface TimeData {\n  /**\n   * Preferred time cycle for the region.\n   */\n  preferred: string;\n\n  /**\n   * Allowed / acceptible time cycles for the region.\n   */\n  allowed: string[];\n}\n\n/**\n * @public\n */\nexport interface ExemplarCity {\n  name: string;\n}\n\n/**\n * @public\n */\nexport interface MetazoneName {\n  generic: string;\n  standard: string;\n  daylight: string;\n}\n\n/**\n * @public\n */\nexport interface MetazoneNames {\n  long: MetazoneName;\n  short: MetazoneName;\n}\n\n/**\n * @public\n */\nexport interface TimeZoneInfo {\n  id: string;\n  city: ExemplarCity;\n  countries: string[];\n  latitude: number;\n  longitude: number;\n  stdoffset: number;\n  metazone: string;\n  names: MetazoneNames;\n}\n"]}