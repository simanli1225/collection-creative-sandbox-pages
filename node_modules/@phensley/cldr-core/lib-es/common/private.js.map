{"version":3,"file":"private.js","sourceRoot":"","sources":["../../src/common/private.ts"],"names":[],"mappings":"AA6BA;;GAEG;AACH;IACE,yBACW,IAAY,EACZ,OAAsB,EACtB,qBAA6B,EAC7B,mBAA2B,EAC3B,qBAA6B;QAJ7B,SAAI,GAAJ,IAAI,CAAQ;QACZ,YAAO,GAAP,OAAO,CAAe;QACtB,0BAAqB,GAArB,qBAAqB,CAAQ;QAC7B,wBAAmB,GAAnB,mBAAmB,CAAQ;QAC3B,0BAAqB,GAArB,qBAAqB,CAAQ;IACrC,CAAC;IAON,sBAAC;AAAD,CAAC,AAdD,IAcC","sourcesContent":["import {\n  ContextTransformFieldType,\n  CurrencySpacingPattern,\n  CurrencySpacingPos,\n  NumberSymbolType,\n  NumberSystemName,\n} from '@phensley/cldr-types';\n\nimport { DecimalArg } from '@phensley/decimal';\n\nimport { DateTimeNode } from '../parsing/date';\n\n// TODO: move these\n\n/**\n * @internal\n */\nexport type CurrencySpacingPatterns = { [Q in CurrencySpacingPattern]: string };\n\n/**\n * @internal\n */\nexport type CurrencySpacing = { [P in CurrencySpacingPos]: CurrencySpacingPatterns };\n\n/**\n * @internal\n */\nexport type NumberSymbols = { [P in NumberSymbolType]: string };\n\n/**\n * @internal\n */\nexport abstract class NumberingSystem {\n  constructor(\n    readonly name: string,\n    readonly symbols: NumberSymbols,\n    readonly minimumGroupingDigits: number,\n    readonly primaryGroupingSize: number,\n    readonly secondaryGroupingSize: number,\n  ) {}\n\n  /**\n   * Format a number directly to a string. This is used for things like low-level field\n   * formatting for Calendars.\n   */\n  abstract formatString(n: DecimalArg, groupDigits: boolean, minInt: number): string;\n}\n\n/**\n * @internal\n */\nexport type ContextTransformInfo = {\n  [x in ContextTransformFieldType]: string;\n};\n\n/**\n * @internal\n */\nexport interface NumberParams {\n  numberSystemName: NumberSystemName;\n  system: NumberingSystem;\n  latnSystem: NumberingSystem;\n  digits: string[];\n  latinDigits: string[];\n  symbols: NumberSymbols;\n  minimumGroupingDigits: number;\n  primaryGroupingSize: number;\n  secondaryGroupingSize: number;\n  currencySpacing: CurrencySpacing;\n}\n\n/**\n * @internal\n */\nexport interface DateFormatRequest {\n  wrapper: string;\n  date?: DateTimeNode[];\n  time?: DateTimeNode[];\n  params: NumberParams;\n}\n\n/**\n * @internal\n */\nexport interface DateIntervalFormatRequest {\n  date?: DateTimeNode[];\n  range?: DateTimeNode[];\n  skeleton?: string;\n  params: NumberParams;\n\n  // Wrapper for fallback\n  wrapper: string;\n}\n"]}