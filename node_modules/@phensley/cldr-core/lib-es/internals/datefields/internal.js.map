{"version":3,"file":"internal.js","sourceRoot":"","sources":["../../../src/internals/datefields/internal.ts"],"names":[],"mappings":"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","sourcesContent":["import { PluralType, RelativeTimes, RelativeTimeFields, RelativeTimeFieldType } from '@phensley/cldr-types';\n\nimport { coerceDecimal, DecimalArg, DecimalConstants } from '@phensley/decimal';\n\nimport { DateFieldInternals, Internals } from '../internals';\nimport { RelativeTimeFieldFormatOptions } from '../../common';\nimport { Bundle } from '../../resource';\nimport { ContextTransformInfo, NumberParams } from '../../common/private';\n\n// TODO: expose a method to calculate field difference with different options, e.g.\n// include weekdays\n\n/**\n * @internal\n */\nexport class DateFieldInternalsImpl implements DateFieldInternals {\n  private relativeTimes: RelativeTimes;\n\n  constructor(private internals: Internals) {\n    this.relativeTimes = internals.schema.DateFields.relativeTimes;\n  }\n\n  // formatRelativeTime(bundle: Bundle, start: CalendarDate, end: CalendarDate,\n  // options: RelativeTimeFormatOptions, params: NumberParams): string {\n  // TODO: need to compute integral difference for multiple fields. for example, year\n  // may differ between 2017-12-01 and 2018-02-02 but they are only 3 months apart, so\n  // we might format \"3 months\" or \"9 weeks\" or \"9 Fridays\" or \"63 days\".\n  // return '';\n  // }\n\n  formatRelativeTimeField(\n    bundle: Bundle,\n    value: DecimalArg,\n    field: RelativeTimeFieldType,\n    options: RelativeTimeFieldFormatOptions,\n    params: NumberParams,\n    transform: ContextTransformInfo,\n  ): string {\n    const width = options.width || 'wide';\n    const format: RelativeTimeFields = this.relativeTimes[width] || this.relativeTimes.wide;\n    const group = options.group === undefined ? true : options.group;\n\n    let n = coerceDecimal(value);\n    n = this.internals.numbers.adjustDecimal(n, options);\n    const negative = n.isNegative();\n    if (negative) {\n      n = n.negate();\n    }\n\n    const iszero = n.compare(DecimalConstants.ZERO) === 0;\n    let res = '';\n\n    if (iszero) {\n      if (options.alwaysNow || !options.numericOnly) {\n        res = format.current.get(bundle, field);\n      }\n    } else if (!options.numericOnly) {\n      switch (field) {\n        case 'hour':\n        case 'minute':\n        case 'second':\n          break;\n        default:\n          if (n.compare(DecimalConstants.TWO) === 0) {\n            const p = negative ? format.previous2.get(bundle, field) : format.next2.get(bundle, field);\n            if (p !== '') {\n              res = p;\n            }\n            // Fall through\n          } else if (n.compare(DecimalConstants.ONE) === 0) {\n            res = negative ? format.previous.get(bundle, field) : format.next.get(bundle, field);\n          }\n          break;\n      }\n    }\n\n    // If we output anything above, return it\n    if (res) {\n      if (options.context) {\n        res = this.internals.general.contextTransform(res, transform, options.context, 'relative');\n      }\n      return res;\n    }\n\n    // Format a pluralized future / past.\n    const plural = bundle.plurals().cardinal(n) as PluralType;\n    const arrow = negative ? format.past : format.future;\n    let raw = arrow.get(bundle, plural, field);\n    if (options.context) {\n      raw = this.internals.general.contextTransform(raw, transform, options.context, 'relative');\n    }\n    const num = params.system.formatString(n, group, 1);\n    return this.internals.general.formatWrapper(raw, [num]);\n  }\n}\n"]}