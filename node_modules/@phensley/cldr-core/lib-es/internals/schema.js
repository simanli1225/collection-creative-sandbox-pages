import { DigitsArrowImpl, FieldArrowImpl, ScopeArrowImpl, VectorArrowImpl, } from '../schema';
import { Decimal } from '@phensley/decimal';
import { leftPad } from '../utils/string';
/**
 * Generates field offsets for the schema builder.
 */
var Generator = /** @class */ (function () {
    function Generator() {
        this.offset = 0;
    }
    Generator.prototype.field = function () {
        return this.offset++;
    };
    Generator.prototype.vector = function (dims) {
        var off = this.offset;
        this.offset += dims.reduce(function (p, c) { return c.size * p; }, 1);
        return off;
    };
    Generator.prototype.digits = function (dim1, dim2) {
        var off = this.offset;
        this.offset += dim1 * dim2;
        return off;
    };
    return Generator;
}());
var time = function (n) { return new Decimal(n[0]).add(new Decimal(n[1]).movePoint(-9)); };
var elapsed = function (start, end) {
    return time(end).subtract(time(start)).movePoint(6).toString();
};
/**
 * Builds the schema accessor singleton.
 *
 * @internal
 */
var SchemaBuilder = /** @class */ (function () {
    function SchemaBuilder(debug) {
        this.generator = new Generator();
        this._times = [];
        this.captureTimes = debug && process !== undefined && process.hrtime !== undefined;
    }
    SchemaBuilder.prototype.construct = function (obj, inst) {
        switch (inst.type) {
            case 'digits':
                this.constructDigits(obj, inst);
                break;
            case 'field':
                this.constructField(obj, inst);
                break;
            case 'origin':
                this.constructOrigin(obj, inst);
                break;
            case 'scope':
                this.constructScope(obj, inst);
                break;
            case 'scopemap':
                this.constructScopeMap(obj, inst);
                break;
            case 'vector':
                this.constructVector(obj, inst);
                break;
        }
    };
    SchemaBuilder.prototype.constructDigits = function (obj, inst) {
        var dim0 = this.origin.getIndex(inst.dim0);
        var offset = this.generator.digits(dim0.size, inst.values.length * 2);
        obj[inst.name] = new DigitsArrowImpl(offset, dim0, inst.values);
    };
    SchemaBuilder.prototype.constructField = function (obj, inst) {
        var offset = this.generator.field();
        obj[inst.name] = new FieldArrowImpl(offset);
    };
    SchemaBuilder.prototype.constructOrigin = function (obj, inst) {
        this.origin = inst;
        var capture = this.captureTimes;
        for (var _i = 0, _a = inst.block; _i < _a.length; _i++) {
            var i = _a[_i];
            var start = capture ? process.hrtime() : [0, 0];
            this.construct(obj, i);
            var end = capture ? process.hrtime() : [0, 0];
            if (capture) {
                this._times.push([i.identifier, elapsed(start, end)]);
            }
        }
        if (capture) {
            console.log('Scope construct times (microseconds):');
            for (var _b = 0, _c = this._times; _b < _c.length; _b++) {
                var t = _c[_b];
                console.log(leftPad(t[0], 20), t[1]);
            }
        }
    };
    SchemaBuilder.prototype.constructScope = function (obj, inst) {
        var curr = {};
        obj[inst.identifier] = curr;
        for (var _i = 0, _a = inst.block; _i < _a.length; _i++) {
            var i = _a[_i];
            this.construct(curr, i);
        }
    };
    SchemaBuilder.prototype.constructScopeMap = function (obj, inst) {
        var fields = this.origin.getValues(inst.fields);
        var map = {};
        for (var _i = 0, fields_1 = fields; _i < fields_1.length; _i++) {
            var field = fields_1[_i];
            var child = {};
            for (var _a = 0, _b = inst.block; _a < _b.length; _a++) {
                var i = _b[_a];
                this.construct(child, i);
            }
            map[field] = child;
        }
        obj[inst.name] = new ScopeArrowImpl(map);
    };
    SchemaBuilder.prototype.constructVector = function (obj, inst) {
        var _this = this;
        var dims = inst.dims.map(function (k) { return _this.origin.getIndex(k); });
        var offset = this.generator.field(); // header
        this.generator.vector(dims);
        obj[inst.name] = new VectorArrowImpl(offset, dims);
    };
    return SchemaBuilder;
}());
export { SchemaBuilder };
/**
 * @internal
 */
export var buildSchema = function (origin, debug) {
    var builder = new SchemaBuilder(debug);
    var schema = {};
    builder.construct(schema, origin);
    return schema;
};
//# sourceMappingURL=schema.js.map