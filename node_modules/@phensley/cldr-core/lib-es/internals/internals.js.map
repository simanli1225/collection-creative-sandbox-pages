{"version":3,"file":"internals.js","sourceRoot":"","sources":["../../src/internals/internals.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  ContextTransformFieldType,\n  ContextType,\n  CurrencyType,\n  DateFieldType,\n  DayPeriodType,\n  KeyIndexMap,\n  PluralType,\n  Schema,\n  UnitInfo,\n  UnitType,\n} from '@phensley/cldr-types';\n\nimport { SchemaConfig } from '../schema';\n\nimport { Decimal, DecimalArg, Part } from '@phensley/decimal';\n\nimport {\n  CurrencyFormatOptions,\n  CurrencySymbolWidthType,\n  DecimalAdjustOptions,\n  DecimalFormatOptions,\n  ListPatternType,\n  Quantity,\n  RelativeTimeFormatOptions,\n  // RuleBasedFormatOptions,\n  UnitFormatOptions,\n} from '../common';\n\nimport { CalendarDate, CalendarType } from '../systems/calendars';\nimport { ContextTransformInfo, NumberParams } from '../common/private';\nimport { DateTimeNode } from '../parsing/date';\nimport { NumberPattern } from '../parsing/number';\nimport { WrapperNode } from '../parsing/wrapper';\nimport { Bundle } from '../resource';\nimport { CalendarContext, CalendarFormatter } from './calendars/formatter';\nimport { AbstractValue } from '../utils/render';\n// import { AlgorithmicNumberingSystem } from '../systems';\n\n/**\n * @internal\n */\nexport interface CalendarInternals {\n  getCalendarFormatter(type: CalendarType): CalendarFormatter<CalendarDate>;\n  flexDayPeriod(bundle: Bundle, minutes: number): DayPeriodType | undefined;\n  parseDatePattern(raw: string): DateTimeNode[];\n  getHourPattern(raw: string, negative: boolean): DateTimeNode[];\n  weekFirstDay(region: string): number;\n  weekMinDays(region: string): number;\n  selectCalendar(bundle: Bundle, ca?: CalendarType): CalendarType;\n\n  formatDateTime<R>(\n    calendar: CalendarType,\n    ctx: CalendarContext<CalendarDate>,\n    value: AbstractValue<R>,\n    first: boolean,\n    date?: DateTimeNode[],\n    time?: DateTimeNode[],\n    wrapper?: string,\n  ): R;\n\n  formatInterval<R>(\n    calendar: CalendarType,\n    ctx: CalendarContext<CalendarDate>,\n    value: AbstractValue<R>,\n    first: boolean,\n    end: CalendarDate,\n    pattern: DateTimeNode[],\n  ): R;\n}\n\n/**\n * @internal\n */\nexport interface DateFieldInternals {\n  // formatRelativeTime(bundle: Bundle, start: CalendarDate, end: CalendarDate,\n  //   options: RelativeTimeFormatOptions, params: NumberParams): string;\n\n  formatRelativeTimeField(\n    bundle: Bundle,\n    value: DecimalArg,\n    field: DateFieldType,\n    options: RelativeTimeFormatOptions,\n    params: NumberParams,\n    transform: ContextTransformInfo,\n  ): string;\n}\n\n/**\n * @internal\n */\nexport interface GeneralInternals {\n  characterOrder(bundle: Bundle): string;\n  lineOrder(bundle: Bundle): string;\n  contextTransform(\n    value: string,\n    info: ContextTransformInfo,\n    context?: ContextType,\n    field?: ContextTransformFieldType,\n  ): string;\n  formatList(bundle: Bundle, items: string[], type: ListPatternType): string;\n  formatListToParts(bundle: Bundle, items: string[], type: ListPatternType): Part[];\n  formatListImpl<R>(bundle: Bundle, value: AbstractValue<R>, items: R[], type: ListPatternType): R;\n  formatWrapper(format: string, args: string[]): string;\n  parseWrapper(raw: string): WrapperNode[];\n}\n\n/**\n * @internal\n */\nexport interface NumberInternals {\n  adjustDecimal(num: DecimalArg, options?: DecimalAdjustOptions): Decimal;\n  stringRenderer(params: NumberParams): NumberRenderer<string>;\n  partsRenderer(params: NumberParams): NumberRenderer<Part[]>;\n\n  formatDecimal<T>(\n    bundle: Bundle,\n    renderer: NumberRenderer<T>,\n    n: Decimal,\n    options: DecimalFormatOptions,\n    params: NumberParams,\n  ): [T, PluralType];\n\n  formatCurrency<T>(\n    bundle: Bundle,\n    renderer: NumberRenderer<T>,\n    n: Decimal,\n    code: string,\n    options: CurrencyFormatOptions,\n    params: NumberParams,\n  ): T;\n\n  // formatRuleBased<T>(bundle: Bundle, renderer: NumberRenderer<T>,\n  //   system: AlgorithmicNumberingSystem, transform: ContextTransformInfo,\n  //   n: Decimal, options: RuleBasedFormatOptions, params: NumberParams): T;\n\n  getCurrencySymbol(bundle: Bundle, code: CurrencyType, width?: CurrencySymbolWidthType): string;\n  getCurrencyDisplayName(bundle: Bundle, code: CurrencyType): string;\n  getCurrencyPluralName(bundle: Bundle, code: string, plural: PluralType): string;\n  getNumberPattern(raw: string, negative: boolean): NumberPattern;\n}\n\n/**\n * @internal\n */\nexport interface UnitInternals {\n  getDisplayName(bundle: Bundle, name: UnitType, length: string): string;\n  getUnitInfo(length: string): UnitInfo;\n\n  format<T>(\n    bundle: Bundle,\n    renderer: NumberRenderer<T>,\n    q: Quantity,\n    options: UnitFormatOptions,\n    params: NumberParams,\n  ): T;\n}\n\n/**\n * @internal\n */\nexport interface NumberRenderer<R> {\n  empty(): R;\n  make(type: string, value: string): R;\n  render(\n    n: Decimal,\n    pattern: NumberPattern,\n    currencySymbol: string,\n    percentSymbol: string,\n    decimalSymbol: string,\n    minInt: number,\n    grouping?: boolean,\n    exponent?: number,\n  ): R;\n  wrap(internal: GeneralInternals, raw: string, ...args: R[]): R;\n}\n\n/**\n * Unified interface for accessing internal functionality.\n *\n * @internal\n */\nexport interface Internals {\n  readonly config: SchemaConfig;\n  readonly indices: KeyIndexMap;\n  readonly checksum: string;\n  readonly calendars: CalendarInternals;\n  readonly dateFields: DateFieldInternals;\n  readonly general: GeneralInternals;\n  readonly numbers: NumberInternals;\n  readonly schema: Schema;\n  readonly units: UnitInternals;\n}\n"]}