import { Cache } from '@phensley/cldr-utils';
import { PartsValue, StringValue } from '../../utils/render';
import { parseWrapperPattern } from '../../parsing/wrapper';
/**
 * @internal
 */
var GeneralInternalsImpl = /** @class */ (function () {
    function GeneralInternalsImpl(internals, cacheSize) {
        this.internals = internals;
        var schema = internals.schema;
        this.layout = schema.Layout;
        this.listPatterns = schema.ListPatterns;
        this.wrapperPatternCache = new Cache(parseWrapperPattern, cacheSize);
    }
    GeneralInternalsImpl.prototype.characterOrder = function (bundle) {
        return this.layout.characterOrder.get(bundle);
    };
    GeneralInternalsImpl.prototype.lineOrder = function (bundle) {
        return this.layout.lineOrder.get(bundle);
    };
    /**
     * Contextually transform a string,
     */
    GeneralInternalsImpl.prototype.contextTransform = function (value, info, context, field) {
        if (!value) {
            return value;
        }
        var flag = field ? info[field] : '';
        var title = false;
        switch (context) {
            case 'begin-sentence':
                title = true;
                break;
            case 'standalone':
                title = flag !== undefined && flag[0] === 'T';
                break;
            case 'ui-list-or-menu':
                title = flag !== undefined && flag[1] === 'T';
                break;
        }
        // TODO: in Unicode "title case" is slightly different than "upper case"
        // but for now we use `toUpperCase` the first character.
        return title ? value[0].toUpperCase() + value.slice(1) : value;
    };
    GeneralInternalsImpl.prototype.formatList = function (bundle, items, type) {
        return this.formatListImpl(bundle, new StringValue(), items, type);
    };
    GeneralInternalsImpl.prototype.formatListToParts = function (bundle, items, type) {
        var parts = items.map(function (i) { return [{ type: 'item', value: i }]; });
        return this.formatListImpl(bundle, new PartsValue(), parts, type);
    };
    GeneralInternalsImpl.prototype.formatListImpl = function (bundle, value, items, type) {
        var pattern = this.selectListPattern(type).mapping(bundle);
        var len = items.length;
        if (len < 2) {
            return len === 1 ? items[0] : value.empty();
        }
        if (len === 2) {
            return this._wrap(pattern.two, value, [items[0], items[1]]);
        }
        var res = this._wrap(pattern.end, value, [items[len - 2], items[len - 1]]);
        len -= 2;
        while (len-- > 1) {
            res = this._wrap(pattern.middle, value, [items[len], res]);
        }
        return this._wrap(pattern.start, value, [items[0], res]);
    };
    GeneralInternalsImpl.prototype.formatWrapper = function (format, args) {
        var pattern = this.wrapperPatternCache.get(format);
        var res = '';
        for (var _i = 0, pattern_1 = pattern; _i < pattern_1.length; _i++) {
            var node = pattern_1[_i];
            if (typeof node === 'string') {
                res += node;
            }
            else {
                var s = args[node];
                if (s) {
                    res += s;
                }
            }
        }
        return res;
    };
    GeneralInternalsImpl.prototype.parseWrapper = function (raw) {
        return this.wrapperPatternCache.get(raw);
    };
    GeneralInternalsImpl.prototype._wrap = function (pattern, value, args) {
        var wrapper = this.internals.general.parseWrapper(pattern);
        value.wrap(wrapper, args);
        return value.render();
    };
    GeneralInternalsImpl.prototype.selectListPattern = function (type) {
        var p = this.listPatterns;
        switch (type) {
            case 'unit-long':
                return p.unitLong;
            case 'unit-narrow':
                return p.unitNarrow;
            case 'unit-short':
                return p.unitShort;
            case 'or':
                return p.or;
            case 'and-short':
                return p.andShort;
            case 'and':
            default:
                return p.and;
        }
    };
    return GeneralInternalsImpl;
}());
export { GeneralInternalsImpl };
//# sourceMappingURL=internal.js.map