{"version":3,"file":"rules.js","sourceRoot":"","sources":["../../../src/internals/calendars/rules.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,sBAAsB,CAAC;AAG3D,OAAO,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAE9C,OAAO,EAAE,aAAa,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AAOrE,IAAM,SAAS,GAAG,UAAC,GAAW;IAC5B,IAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC7B,IAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACvC,IAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,aAAa,CAAC,CAAC,CAAC,EAAhB,CAAgB,CAAC,CAAC;IAC7D,OAAO,EAAE,IAAI,MAAA,EAAE,OAAO,SAAA,EAAE,CAAC;AAC3B,CAAC,CAAC;AAEF;IAGE,wBAAY,SAAiB;QAC3B,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IAC/C,CAAC;IAED,4BAAG,GAAH,UAAI,MAAc,EAAE,OAAe;QACjC,IAAM,GAAG,GAAG,cAAc,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,IAAI,cAAc,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QACzF,IAAI,GAAG,KAAK,SAAS,EAAE,CAAC;YACtB,OAAO,SAAS,CAAC;QACnB,CAAC;QACD,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjC,IAAM,CAAC,GAAG,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QACpD,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC;IACH,qBAAC;AAAD,CAAC,AAhBD,IAgBC","sourcesContent":["import { DayPeriodType } from '@phensley/cldr-types';\nimport { binarySearch, Cache } from '@phensley/cldr-utils';\n\nimport { Bundle } from '../../resource/bundle';\nimport { numarray } from '../../utils/string';\n\nimport { dayPeriodKeys, dayPeriodRules } from './autogen.dayperiods';\n\ninterface Rule {\n  minutes: number[];\n  keys: DayPeriodType[];\n}\n\nconst parseRule = (raw: string): Rule => {\n  const parts = raw.split('|');\n  const minutes = numarray(parts[1], 36);\n  const keys = numarray(parts[0]).map((n) => dayPeriodKeys[n]);\n  return { keys, minutes };\n};\n\nexport class DayPeriodRules {\n  private cache: Cache<Rule>;\n\n  constructor(cacheSize: number) {\n    this.cache = new Cache(parseRule, cacheSize);\n  }\n\n  get(bundle: Bundle, minutes: number): DayPeriodType | undefined {\n    const raw = dayPeriodRules[bundle.languageRegion()] || dayPeriodRules[bundle.language()];\n    if (raw === undefined) {\n      return undefined;\n    }\n    const rule = this.cache.get(raw);\n    const i = binarySearch(rule.minutes, true, minutes);\n    return rule.keys[i];\n  }\n}\n"]}