{"version":3,"file":"fields.js","sourceRoot":"","sources":["../../../src/internals/calendars/fields.ts"],"names":[],"mappings":"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","sourcesContent":["// Date field types\nexport const enum Field {\n  ERA = 0,\n  YEAR = 1,\n  QUARTER = 2,\n  MONTH = 3,\n  WEEK_OF_YEAR = 4,\n  WEEK_OF_MONTH = 5,\n  WEEKDAY = 6,\n  DAY = 7,\n  DAY_OF_YEAR = 8,\n  DAY_OF_WEEK_IN_MONTH = 9,\n  DAYPERIOD = 10,\n  HOUR = 11,\n  MINUTE = 12,\n  SECOND = 13,\n  FRACTIONAL_SECOND = 14,\n  ZONE = 15,\n\n  MAX_TYPE = 16,\n}\n\nexport const skeletonFields = (): number[] => [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nconst enum C {\n  DELTA = 0x10,\n  NUMERIC = 0x100,\n  NONE = 0,\n  NARROW = -0x101,\n  SHORTER = -0x102,\n  SHORT = -0x103,\n  LONG = -0x104,\n  EXTRA_FIELD = 0x10000,\n  MISSING_FIELD = 0x1000,\n}\n\n// Use single letter variables in FIELD_TYPES for compactness\nconst D = C.DELTA;\nconst N = C.NUMERIC;\n// const E = C.NONE;\nconst R = C.NARROW;\nconst S = C.SHORTER;\nconst T = C.SHORT;\nconst L = C.LONG;\n\nexport const EXTRA_FIELD = C.EXTRA_FIELD;\nexport const MISSING_FIELD = C.MISSING_FIELD;\n\nexport type FieldType = [\n  string, // 0 pattern character\n  number, // 1 field\n  number, // 2 sub field\n  number, // 3 repeat\n  number, // 4 width\n];\n\nexport const FIELD_TYPES: FieldType[] = [\n  ['G', Field.ERA, /* SHORT */ T, 1, 3],\n  ['G', Field.ERA, /* LONG */ L, 4, 4],\n  ['G', Field.ERA, /* NARROW */ R, 5, 5],\n\n  ['y', Field.YEAR, /* NUMERIC */ N, 1, 20],\n  ['Y', Field.YEAR, /* NUMERIC */ N + /* DELTA */ D, 1, 20],\n  ['u', Field.YEAR, /* NUMERIC */ N + 2 * /* DELTA */ D, 1, 20],\n  ['r', Field.YEAR, /* NUMERIC */ N + 3 * /* DELTA */ D, 1, 20],\n  ['U', Field.YEAR, /* SHORT */ T, 1, 3],\n  ['U', Field.YEAR, /* LONG */ L, 4, 4],\n  ['U', Field.YEAR, /* NARROW */ R, 5, 5],\n\n  ['Q', Field.QUARTER, /* NUMERIC */ N, 1, 2],\n  ['Q', Field.QUARTER, /* SHORT */ T, 3, 3],\n  ['Q', Field.QUARTER, /* LONG */ L, 4, 4],\n  ['Q', Field.QUARTER, /* NARROW */ R, 5, 5],\n  ['q', Field.QUARTER, /* NUMERIC */ N + /* DELTA */ D, 1, 2],\n  ['q', Field.QUARTER, /* SHORT */ T - /* DELTA */ D, 3, 3],\n  ['q', Field.QUARTER, /* LONG */ L - /* DELTA */ D, 4, 4],\n  ['q', Field.QUARTER, /* NARROW */ R - /* DELTA */ D, 5, 5],\n\n  ['M', Field.MONTH, /* NUMERIC */ N, 1, 2],\n  ['M', Field.MONTH, /* SHORT */ T, 3, 3],\n  ['M', Field.MONTH, /* LONG */ L, 4, 4],\n  ['M', Field.MONTH, /* NARROW */ R, 5, 5],\n  ['L', Field.MONTH, /* NUMERIC */ N + /* DELTA */ D, 1, 2],\n  ['L', Field.MONTH, /* SHORT */ T - /* DELTA */ D, 3, 3],\n  ['L', Field.MONTH, /* LONG */ L - /* DELTA */ D, 4, 4],\n  ['L', Field.MONTH, /* NARROW */ R - /* DELTA */ D, 5, 5],\n  ['l', Field.MONTH, /* NUMERIC */ N + /* DELTA */ D, 1, 1],\n\n  ['w', Field.WEEK_OF_YEAR, /* NUMERIC */ N, 1, 2],\n\n  ['W', Field.WEEK_OF_MONTH, /* NUMERIC */ N, 1, 1],\n\n  ['E', Field.WEEKDAY, /* SHORT */ T, 1, 3],\n  ['E', Field.WEEKDAY, /* LONG */ L, 4, 4],\n  ['E', Field.WEEKDAY, /* NARROW */ R, 5, 5],\n  ['E', Field.WEEKDAY, /* SHORTER */ S, 6, 6],\n  ['c', Field.WEEKDAY, /* NUMERIC */ N + 2 * /* DELTA */ D, 1, 2],\n  ['c', Field.WEEKDAY, /* SHORT */ T - 2 * /* DELTA */ D, 3, 3],\n  ['c', Field.WEEKDAY, /* LONG */ L - 2 * /* DELTA */ D, 4, 4],\n  ['c', Field.WEEKDAY, /* NARROW */ R - 2 * /* DELTA */ D, 5, 5],\n  ['c', Field.WEEKDAY, /* SHORTER */ S - 2 * /* DELTA */ D, 6, 6],\n  ['e', Field.WEEKDAY, /* NUMERIC */ N + /* DELTA */ D, 1, 2],\n  ['e', Field.WEEKDAY, /* SHORT */ T - /* DELTA */ D, 3, 3],\n  ['e', Field.WEEKDAY, /* LONG */ L - /* DELTA */ D, 4, 4],\n  ['e', Field.WEEKDAY, /* NARROW */ R - /* DELTA */ D, 5, 5],\n  ['e', Field.WEEKDAY, /* SHORTER */ S - /* DELTA */ D, 6, 6],\n\n  ['d', Field.DAY, /* NUMERIC */ N, 1, 2],\n  ['g', Field.DAY, /* NUMERIC */ N + /* DELTA */ D, 1, 20],\n\n  ['D', Field.DAY_OF_YEAR, /* NUMERIC */ N, 1, 3],\n\n  ['F', Field.DAY_OF_WEEK_IN_MONTH, /* NUMERIC */ N, 1, 1],\n\n  ['a', Field.DAYPERIOD, /* SHORT */ T, 1, 3],\n  ['a', Field.DAYPERIOD, /* LONG */ L, 4, 4],\n  ['a', Field.DAYPERIOD, /* NARROW */ R, 5, 5],\n  ['b', Field.DAYPERIOD, /* SHORT */ T - /* DELTA */ D, 1, 3],\n  ['b', Field.DAYPERIOD, /* LONG */ L - /* DELTA */ D, 4, 4],\n  ['b', Field.DAYPERIOD, /* NARROW */ R - /* DELTA */ D, 5, 5],\n  ['B', Field.DAYPERIOD, /* SHORT */ T - 3 * /* DELTA */ D, 1, 3],\n  ['B', Field.DAYPERIOD, /* LONG */ L - 3 * /* DELTA */ D, 4, 4],\n  ['B', Field.DAYPERIOD, /* NARROW */ R - 3 * /* DELTA */ D, 5, 5],\n\n  ['H', Field.HOUR, /* NUMERIC */ N + 10 * /* DELTA */ D, 1, 2], // 24 hour\n  ['k', Field.HOUR, /* NUMERIC */ N + 11 * /* DELTA */ D, 1, 2],\n  ['h', Field.HOUR, /* NUMERIC */ N, 1, 2], // 12 hour\n  ['K', Field.HOUR, /* NUMERIC */ N + /* DELTA */ D, 1, 2],\n\n  ['m', Field.MINUTE, /* NUMERIC */ N, 1, 2],\n\n  ['s', Field.SECOND, /* NUMERIC */ N, 1, 2],\n  ['A', Field.SECOND, /* NUMERIC */ N + /* DELTA */ D, 1, 1000],\n\n  ['S', Field.FRACTIONAL_SECOND, /* NUMERIC */ N, 1, 1000],\n\n  ['v', Field.ZONE, /* SHORT */ T - 2 * /* DELTA */ D, 1, 1],\n  ['v', Field.ZONE, /* LONG */ L - 2 * /* DELTA */ D, 4, 4],\n  ['z', Field.ZONE, /* SHORT */ T, 1, 3],\n  ['z', Field.ZONE, /* LONG */ L, 4, 4],\n  ['Z', Field.ZONE, /* NARROW */ R - /* DELTA */ D, 1, 3],\n  ['Z', Field.ZONE, /* LONG */ L - /* DELTA */ D, 4, 4],\n  ['Z', Field.ZONE, /* SHORT */ T - /* DELTA */ D, 5, 5],\n  ['O', Field.ZONE, /* SHORT */ T - /* DELTA */ D, 1, 1],\n  ['O', Field.ZONE, /* LONG */ L - /* DELTA */ D, 4, 4],\n  ['V', Field.ZONE, /* SHORT */ T - /* DELTA */ D, 1, 1],\n  ['V', Field.ZONE, /* LONG */ L - /* DELTA */ D, 2, 2],\n  ['V', Field.ZONE, /* LONG */ L - 1 - /* DELTA */ D, 3, 3],\n  ['V', Field.ZONE, /* LONG */ L - 2 - /* DELTA */ D, 4, 4],\n  ['X', Field.ZONE, /* NARROW */ R - /* DELTA */ D, 1, 1],\n  ['X', Field.ZONE, /* SHORT */ T - /* DELTA */ D, 2, 2],\n  ['X', Field.ZONE, /* LONG */ L - /* DELTA */ D, 4, 4],\n  ['x', Field.ZONE, /* NARROW */ R - /* DELTA */ D, 1, 1],\n  ['x', Field.ZONE, /* SHORT */ T - /* DELTA */ D, 2, 2],\n  ['x', Field.ZONE, /* LONG */ L - /* DELTA */ D, 4, 4],\n];\n\n/**\n * Faster lookup for field canonical indices.\n */\nexport const buildFieldIndex = (): Map<string, number[]> => {\n  const res = new Map<string, number[]>();\n  FIELD_TYPES.forEach((t, i) => {\n    const entry = res.get(t[0]) || [];\n    entry.push(i);\n    res.set(t[0], entry);\n  });\n  return res;\n};\n\nexport const FIELD_INDEX = buildFieldIndex();\n\nexport const getFieldType = (field: string, width: number): FieldType | undefined => {\n  const indices = FIELD_INDEX.get(field);\n  if (indices === undefined) {\n    return;\n  }\n\n  let row: FieldType;\n  let best = -1;\n  for (const i of indices) {\n    best = i;\n    row = FIELD_TYPES[i];\n    if (row[3] > width || row[4] < width) {\n      continue;\n    }\n    return row;\n  }\n\n  return FIELD_TYPES[best];\n};\n"]}