{"version":3,"file":"formatter.js","sourceRoot":"","sources":["../../../src/internals/calendars/formatter.ts"],"names":[],"mappings":"","sourcesContent":["import { ContextType } from '@phensley/cldr-types';\nimport { Bundle } from '../../resource';\nimport { DateTimeNode } from '../../parsing/date';\nimport { CalendarDate } from '../../systems/calendars';\nimport { ContextTransformInfo, NumberingSystem } from '../../common/private';\nimport { DateFormatAltOptions } from '../../common/calendars';\nimport { AbstractValue } from '../../utils/render';\n\n/**\n * All context needed for a single format operation.\n */\nexport interface CalendarContext<T extends CalendarDate> {\n  /**\n   * Calendar-specific date\n   */\n  date: T;\n\n  /**\n   * Resource bundle for accessing strings\n   */\n  bundle: Bundle;\n\n  // TODO: number params\n\n  /**\n   * Numbering system for formatting decimal numbers into strings\n   */\n  system: NumberingSystem;\n\n  /**\n   * Latin decimal digit numbering system.\n   */\n  latnSystem: NumberingSystem;\n\n  /**\n   * Context in which we're formatting.\n   */\n  context?: ContextType;\n\n  /**\n   * Context transform info.\n   */\n  transform: ContextTransformInfo;\n\n  /**\n   * Specify alternate fields.\n   */\n  alt: DateFormatAltOptions;\n}\n\nexport interface CalendarFormatter<T extends CalendarDate> {\n  format<R>(val: AbstractValue<R>, ctx: CalendarContext<T>, nodes: DateTimeNode[], first: boolean): void;\n}\n"]}