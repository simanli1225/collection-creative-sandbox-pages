{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../src/internals/schema.ts"],"names":[],"mappings":"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","sourcesContent":["import { KeyIndex, Schema } from '@phensley/cldr-types';\nimport {\n  Digits,\n  DigitsArrowImpl,\n  Field,\n  FieldArrowImpl,\n  Instruction,\n  Origin,\n  Scope,\n  ScopeArrowImpl,\n  ScopeMap,\n  Vector,\n  VectorArrowImpl,\n} from '../schema';\nimport { Decimal } from '@phensley/decimal';\nimport { leftPad } from '../utils/string';\n\n/**\n * Generates field offsets for the schema builder.\n */\nclass Generator {\n  private offset: number = 0;\n\n  field(): number {\n    return this.offset++;\n  }\n\n  vector(dims: KeyIndex<string>[]): number {\n    const off = this.offset;\n    this.offset += dims.reduce((p, c) => c.size * p, 1);\n    return off;\n  }\n\n  digits(dim1: number, dim2: number): number {\n    const off = this.offset;\n    this.offset += dim1 * dim2;\n    return off;\n  }\n}\n\nconst time = (n: [number, number]): Decimal => new Decimal(n[0]).add(new Decimal(n[1]).movePoint(-9));\n\nconst elapsed = (start: [number, number], end: [number, number]): string =>\n  time(end).subtract(time(start)).movePoint(6).toString();\n\n/**\n * Builds the schema accessor singleton.\n *\n * @internal\n */\nexport class SchemaBuilder {\n  private generator: Generator = new Generator();\n  private captureTimes: boolean;\n  private _times: [string, string][] = [];\n  private origin!: Origin;\n\n  constructor(debug: boolean) {\n    this.captureTimes = debug && process !== undefined && process.hrtime !== undefined;\n  }\n\n  construct(obj: Schema, inst: Instruction): void {\n    switch (inst.type) {\n      case 'digits':\n        this.constructDigits(obj, inst);\n        break;\n      case 'field':\n        this.constructField(obj, inst);\n        break;\n      case 'origin':\n        this.constructOrigin(obj, inst);\n        break;\n      case 'scope':\n        this.constructScope(obj, inst);\n        break;\n      case 'scopemap':\n        this.constructScopeMap(obj, inst);\n        break;\n      case 'vector':\n        this.constructVector(obj, inst);\n        break;\n    }\n  }\n\n  private constructDigits(obj: any, inst: Digits): void {\n    const dim0 = this.origin.getIndex(inst.dim0);\n    const offset = this.generator.digits(dim0.size, inst.values.length * 2);\n    obj[inst.name] = new DigitsArrowImpl(offset, dim0, inst.values);\n  }\n\n  private constructField(obj: any, inst: Field): void {\n    const offset = this.generator.field();\n    obj[inst.name] = new FieldArrowImpl(offset);\n  }\n\n  private constructOrigin(obj: any, inst: Origin): void {\n    this.origin = inst;\n\n    const capture = this.captureTimes;\n    for (const i of inst.block) {\n      const start: [number, number] = capture ? process.hrtime() : [0, 0];\n      this.construct(obj, i);\n      const end: [number, number] = capture ? process.hrtime() : [0, 0];\n      if (capture) {\n        this._times.push([i.identifier, elapsed(start, end)]);\n      }\n    }\n    if (capture) {\n      console.log('Scope construct times (microseconds):');\n      for (const t of this._times) {\n        console.log(leftPad(t[0], 20), t[1]);\n      }\n    }\n  }\n\n  private constructScope(obj: any, inst: Scope): void {\n    const curr: any = {};\n    obj[inst.identifier] = curr;\n    for (const i of inst.block) {\n      this.construct(curr, i);\n    }\n  }\n\n  private constructScopeMap(obj: any, inst: ScopeMap): void {\n    const fields = this.origin.getValues(inst.fields);\n    const map: any = {};\n    for (const field of fields) {\n      const child: any = {};\n      for (const i of inst.block) {\n        this.construct(child, i);\n      }\n      map[field] = child;\n    }\n    obj[inst.name] = new ScopeArrowImpl(map);\n  }\n\n  private constructVector(obj: any, inst: Vector): void {\n    const dims = inst.dims.map((k) => this.origin.getIndex(k));\n    const offset = this.generator.field(); // header\n    this.generator.vector(dims);\n    obj[inst.name] = new VectorArrowImpl(offset, dims);\n  }\n}\n\n/**\n * @internal\n */\nexport const buildSchema = (origin: Origin, debug: boolean): Schema => {\n  const builder = new SchemaBuilder(debug);\n  const schema = {} as any as Schema;\n  builder.construct(schema, origin);\n  return schema;\n};\n"]}