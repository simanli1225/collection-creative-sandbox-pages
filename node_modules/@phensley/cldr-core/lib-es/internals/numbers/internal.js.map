{"version":3,"file":"internal.js","sourceRoot":"","sources":["../../../src/internals/numbers/internal.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AltType,\n  CurrenciesSchema,\n  CurrencyType,\n  DigitsArrow,\n  NumbersSchema,\n  NumberSystemInfo,\n  PluralType,\n} from '@phensley/cldr-types';\n\nimport { Decimal, Part } from '@phensley/decimal';\n\nimport { Cache } from '@phensley/cldr-utils';\n\nimport {\n  CurrencyFormatOptions,\n  CurrencySymbolWidthType,\n  DecimalAdjustOptions,\n  DecimalFormatOptions,\n} from '../../common';\n\nimport { NumberContext } from './context';\nimport { NumberParams } from '../../common/private';\nimport { parseNumberPattern, NumberPattern } from '../../parsing/number';\nimport { getCurrencyFractions } from './util';\nimport { Bundle } from '../../resource';\nimport { Internals, NumberInternals, NumberRenderer } from '../../internals/internals';\nimport { PartsNumberFormatter, StringNumberFormatter } from './render';\n\nconst ADJUST_PATTERN = parseNumberPattern('0')[0];\n\n/**\n * If n is zero check if it is signed and return abs.\n */\nconst negzero = (n: Decimal, show?: boolean): Decimal => (!show && n.isZero() && n.isNegative() ? n.abs() : n);\n\n/**\n * Number internal engine singleton, shared across all locales.\n *\n * @internal\n */\nexport class NumberInternalsImpl implements NumberInternals {\n  private currencies: CurrenciesSchema;\n  private numbers: NumbersSchema;\n\n  private readonly numberPatternCache: Cache<NumberPattern[]>;\n\n  constructor(\n    private internals: Internals,\n    cacheSize: number,\n  ) {\n    const schema = internals.schema;\n    this.currencies = schema.Currencies;\n    this.numbers = schema.Numbers;\n    this.numberPatternCache = new Cache(parseNumberPattern, cacheSize);\n  }\n\n  adjustDecimal(num: Decimal, options: DecimalAdjustOptions = {}): Decimal {\n    options = Object.assign({}, { minInt: 0 }, options);\n    const ctx = new NumberContext(options, options.round || 'half-even', false, false);\n    ctx.setPattern(ADJUST_PATTERN);\n    return ctx.adjust(num);\n  }\n\n  stringRenderer(params: NumberParams): NumberRenderer<string> {\n    return new StringNumberFormatter(params);\n  }\n\n  partsRenderer(params: NumberParams): NumberRenderer<Part[]> {\n    return new PartsNumberFormatter(params);\n  }\n\n  getCurrencySymbol(bundle: Bundle, code: CurrencyType, width?: CurrencySymbolWidthType): string {\n    return this._getCurrencySymbol(bundle, code, width === 'narrow' ? 'narrow' : 'none');\n  }\n\n  private _getCurrencySymbol(bundle: Bundle, code: CurrencyType, alt: AltType): string {\n    const sym = this.currencies.symbol;\n    return sym.get(bundle, [alt, 'none'], code) || (sym.valid('none', code) ? code : '');\n  }\n\n  getCurrencyDisplayName(bundle: Bundle, code: CurrencyType): string {\n    return this.currencies.displayName.get(bundle, code);\n  }\n\n  getCurrencyPluralName(bundle: Bundle, code: string, plural: PluralType): string {\n    return (\n      this.currencies.pluralName.get(bundle, plural, code as CurrencyType) ||\n      this.currencies.displayName.get(bundle, code as CurrencyType)\n    );\n  }\n\n  getNumberPattern(raw: string, negative: boolean): NumberPattern {\n    return this.numberPatternCache.get(raw)[negative ? 1 : 0];\n  }\n\n  formatDecimal<T>(\n    bundle: Bundle,\n    renderer: NumberRenderer<T>,\n    n: Decimal,\n    options: DecimalFormatOptions,\n    params: NumberParams,\n  ): [T, PluralType] {\n    // TODO: abstract away pattern selection defaulting\n    const style = options.style === undefined ? 'decimal' : options.style;\n    let result: T;\n    let plural: PluralType = 'other';\n    const round = options.round || 'half-even';\n\n    const latnInfo = this.numbers.numberSystem.get('latn') as NumberSystemInfo;\n    const info = this.numbers.numberSystem.get(params.numberSystemName) || latnInfo;\n\n    const decimalFormats = info.decimalFormats;\n    const latnDecimalFormats = latnInfo.decimalFormats;\n    const standardRaw = decimalFormats.standard.get(bundle) || latnDecimalFormats.standard.get(bundle);\n\n    const plurals = bundle.plurals();\n\n    switch (style) {\n      case 'long':\n      case 'short': {\n        const isShort = style === 'short';\n        const useLatn = decimalFormats.short.get(bundle, 'other', 4)[0] === '';\n        const patternImpl = isShort\n          ? useLatn\n            ? latnInfo.decimalFormats.short\n            : decimalFormats.short\n          : useLatn\n            ? latnInfo.decimalFormats.long\n            : decimalFormats.long;\n\n        const ctx = new NumberContext(options, round, true, false);\n\n        // Adjust the number using the compact pattern and divisor.\n        // const [q2, ndigits] = this.setupCompact(bundle, n, ctx, standardRaw, patternImpl);\n        let q2: Decimal;\n        let ndigits: number;\n        if (options.divisor) {\n          [q2, ndigits] = this.setupCompactDivisor(bundle, n, ctx, standardRaw, options.divisor, patternImpl);\n        } else {\n          [q2, ndigits] = this.setupCompact(bundle, n, ctx, standardRaw, patternImpl);\n        }\n\n        q2 = negzero(q2, options.negativeZero);\n\n        // Compute the plural category for the final q2.\n        plural = plurals.cardinal(q2) as PluralType;\n\n        // Select the final pluralized compact pattern based on the integer\n        // digits of n and the plural category of the rounded / shifted number q2.\n        const raw =\n          patternImpl.get(bundle, plural, ndigits)[0] || patternImpl.get(bundle, 'other', ndigits)[0] || standardRaw;\n\n        // Re-select pattern as number may have changed sign due to rounding.\n        const pattern = this.getNumberPattern(raw, q2.isNegative());\n\n        result = renderer.render(q2, pattern, '', '', '', ctx.minInt, options.group);\n        break;\n      }\n\n      case 'percent':\n      case 'percent-scaled':\n      case 'permille':\n      case 'permille-scaled': {\n        // Get percent pattern.\n        const raw = info.percentFormat.get(bundle) || latnInfo.percentFormat.get(bundle);\n        let pattern = this.getNumberPattern(raw, n.isNegative());\n\n        // Scale the number to a percent or permille form as needed.\n        if (style === 'percent') {\n          n = n.movePoint(2);\n        } else if (style === 'permille') {\n          n = n.movePoint(3);\n        }\n\n        // Select percent or permille symbol.\n        const symbol =\n          style === 'percent' || style === 'percent-scaled' ? params.symbols.percentSign : params.symbols.perMille;\n\n        // Adjust number using pattern and options, then render.\n        const ctx = new NumberContext(options, round, false, false, -1);\n        ctx.setPattern(pattern);\n        n = ctx.adjust(n);\n        n = negzero(n, options.negativeZero);\n        plural = plurals.cardinal(n) as PluralType;\n\n        // Re-select pattern as number may have changed sign due to rounding.\n        pattern = this.getNumberPattern(raw, n.isNegative());\n        result = renderer.render(n, pattern, '', symbol, '', ctx.minInt, options.group);\n        break;\n      }\n\n      case 'decimal': {\n        // Get decimal pattern.\n        let pattern = this.getNumberPattern(standardRaw, n.isNegative());\n\n        // Adjust number using pattern and options, then render.\n        const ctx = new NumberContext(options, round, false, false, -1);\n        ctx.setPattern(pattern);\n        n = ctx.adjust(n);\n        n = negzero(n, options.negativeZero);\n        plural = plurals.cardinal(n) as PluralType;\n\n        // Re-select pattern as number may have changed sign due to rounding.\n        pattern = this.getNumberPattern(standardRaw, n.isNegative());\n        result = renderer.render(n, pattern, '', '', '', ctx.minInt, options.group);\n        break;\n      }\n\n      case 'scientific': {\n        const sciFormat = info.scientificFormat;\n\n        const ctx = new NumberContext(options, round, false, true, -1);\n        const latnSciFormat = latnInfo.scientificFormat;\n        const format = sciFormat.get(bundle) || latnSciFormat.get(bundle);\n        let pattern = this.getNumberPattern(format, n.isNegative());\n\n        ctx.setPattern(pattern, true);\n        n = ctx.adjust(n, true);\n        n = negzero(n, options.negativeZero !== false);\n        pattern = this.getNumberPattern(format, n.isNegative());\n        // Split number into coeffcient and exponent\n        const [coeff, exponent] = n.scientific(ctx.minInt);\n        const adjcoeff = ctx.adjust(coeff, true);\n        result = renderer.render(adjcoeff, pattern, '', '', '', 1, false, exponent);\n        break;\n      }\n\n      default:\n        result = renderer.empty();\n        break;\n    }\n\n    // No valid style matched\n    return [result, plural];\n  }\n\n  formatCurrency<T>(\n    bundle: Bundle,\n    renderer: NumberRenderer<T>,\n    n: Decimal,\n    code: string,\n    options: CurrencyFormatOptions,\n    params: NumberParams,\n  ): T {\n    const fractions = getCurrencyFractions(code);\n    const round = options.round || 'half-even';\n\n    if (options.cash && fractions.cashRounding > 1) {\n      // Simple cash rounding to nearest \"cash digits\" increment\n      n = n.divide(fractions.cashRounding);\n      n = n.setScale(fractions.cashDigits, round);\n      n = n.multiply(fractions.cashRounding);\n    }\n\n    // TODO: display context support\n    const width = options.symbolWidth === 'narrow' ? 'narrow' : 'none';\n    const style = options.style === undefined ? 'symbol' : options.style;\n\n    const latnInfo = this.numbers.numberSystem.get('latn') as NumberSystemInfo;\n    const info = this.numbers.numberSystem.get(params.numberSystemName) || latnInfo;\n\n    const currencyFormats = info.currencyFormats;\n    const latnDecimalFormats = latnInfo.decimalFormats;\n\n    const standardRaw = currencyFormats.standard.get(bundle) || latnDecimalFormats.standard.get(bundle);\n\n    // Some locales have a special decimal symbol for certain currencies, e.g. pt-PT and PTE\n    const decimal = this.currencies.decimal.get(bundle, code as CurrencyType) || '';\n\n    const plurals = bundle.plurals();\n\n    switch (style) {\n      case 'code':\n      case 'name': {\n        const raw = info.decimalFormats.standard.get(bundle) || latnInfo.decimalFormats.standard.get(bundle);\n        let pattern = this.getNumberPattern(raw, n.isNegative());\n\n        // Adjust number using pattern and options, then render.\n        const ctx = new NumberContext(options, round, false, false, fractions.digits);\n        ctx.setPattern(pattern);\n        n = ctx.adjust(n);\n        n = negzero(n, false);\n\n        // Re-select pattern as number may have changed sign due to rounding.\n        pattern = this.getNumberPattern(raw, n.isNegative());\n        const num = renderer.render(n, pattern, '', '', decimal, ctx.minInt, options.group);\n\n        // Compute plural category and select pluralized unit.\n        const plural = plurals.cardinal(n) as PluralType;\n        const unit = style === 'code' ? code : this.getCurrencyPluralName(bundle, code, plural);\n\n        // Wrap number and unit together.\n        // TODO: implement a more concise fallback to 'other' for pluralized lookups\n        const unitWrapper =\n          currencyFormats.unitPattern.get(bundle, [plural, 'other']) ||\n          latnInfo.currencyFormats.unitPattern.get(bundle, [plural, 'other']);\n        return renderer.wrap(this.internals.general, unitWrapper, num, renderer.make('unit', unit));\n      }\n\n      case 'short': {\n        // The extra complexity here is to deal with rounding up and selecting the\n        // correct pluralized pattern for the final rounded form.\n        const patternImpl = currencyFormats.short;\n\n        const ctx = new NumberContext(options, round, true, false, fractions.digits);\n        const symbol = this._getCurrencySymbol(bundle, code as CurrencyType, width);\n\n        // Adjust the number using the compact pattern and divisor.\n        let q2: Decimal;\n        let ndigits: number;\n        if (options.divisor) {\n          [q2, ndigits] = this.setupCompactDivisor(bundle, n, ctx, standardRaw, options.divisor, patternImpl);\n        } else {\n          [q2, ndigits] = this.setupCompact(bundle, n, ctx, standardRaw, patternImpl);\n        }\n        q2 = negzero(q2, false);\n\n        // Compute the plural category for the final q2.\n        const plural = plurals.cardinal(q2) as PluralType;\n\n        // Select the final pluralized compact pattern based on the integer\n        // digits of n and the plural category of the rounded / shifted number q2.\n        let raw =\n          patternImpl.get(bundle, plural, ndigits)[0] || patternImpl.get(bundle, 'other', ndigits)[0] || standardRaw;\n        if (raw === '0') {\n          raw = standardRaw;\n        }\n\n        const pattern = this.getNumberPattern(raw, q2.isNegative());\n        return renderer.render(q2, pattern, symbol, '', decimal, ctx.minInt, options.group);\n      }\n\n      case 'accounting':\n      case 'symbol': {\n        // Select standard or accounting pattern based on style.\n        let styleArrow = style === 'symbol' ? currencyFormats.standard : currencyFormats.accounting;\n        let raw = styleArrow.get(bundle);\n        if (!raw) {\n          styleArrow = style === 'symbol' ? latnInfo.currencyFormats.standard : latnInfo.currencyFormats.accounting;\n          raw = styleArrow.get(bundle);\n        }\n        let pattern = this.getNumberPattern(raw, n.isNegative());\n\n        // Adjust number using pattern and options, then render.\n        const ctx = new NumberContext(options, round, false, false, fractions.digits);\n        ctx.setPattern(pattern);\n        n = ctx.adjust(n);\n        n = negzero(n, false);\n\n        // Re-select pattern as number may have changed sign due to rounding.\n        pattern = this.getNumberPattern(raw, n.isNegative());\n        const symbol = this._getCurrencySymbol(bundle, code as CurrencyType, width);\n        return renderer.render(n, pattern, symbol, '', decimal, ctx.minInt, options.group);\n      }\n    }\n\n    // No valid style matched\n    return renderer.empty();\n  }\n\n  /**\n   * Setup for a compact pattern. Returns the adjusted number and digits for\n   * selecting the pluralized pattern.\n   *\n   * The extra complexity here is to deal with rounding up and selecting the\n   * correct pluralized pattern for the final rounded form.\n   */\n  private setupCompact(\n    bundle: Bundle,\n    n: Decimal,\n    ctx: NumberContext,\n    standardRaw: string,\n    patternImpl: DigitsArrow<PluralType>,\n  ): [Decimal, number] {\n    // Select the correct divisor based on the number of integer digits in n.\n    let negative = n.isNegative();\n    let ndigits = n.integerDigits();\n\n    // Select the initial compact pattern based on the integer digits of n.\n    // The plural category doesn't matter until the final pattern is selected.\n    let raw: string;\n    let ndivisor = 0;\n    [raw, ndivisor] = patternImpl.get(bundle, 'other', ndigits);\n    let pattern = this.getCompactPattern(raw, standardRaw, negative);\n\n    const fracDigits = ctx.useSignificant ? -1 : 0;\n\n    // Move the decimal point of n, producing q1. We always strip trailing\n    // zeros on compact patterns.\n    let q1 = n;\n    if (ndivisor > 0) {\n      q1 = q1.movePoint(-ndivisor);\n    }\n\n    // Adjust q1 using the compact pattern's parameters, to produce q2.\n    const q1digits = q1.integerDigits();\n    ctx.setCompact(pattern, q1digits, ndivisor, fracDigits);\n\n    let q2 = ctx.adjust(q1);\n    const q2digits = q2.integerDigits();\n    negative = q2.isNegative();\n\n    // Check if the number rounded up, adding another integer digit.\n    if (q2digits > q1digits) {\n      // Select a new divisor and pattern.\n      ndigits++;\n\n      let divisor = 0;\n      [raw, divisor] = patternImpl.get(bundle, 'other', ndigits);\n      pattern = this.getCompactPattern(raw, standardRaw, negative);\n\n      // If divisor changed we need to divide and adjust again. We don't divide,\n      // we just move the decimal point, since our Decimal type uses a radix that\n      // is a power of 10. Otherwise q2 is ready for formatting.\n      if (divisor > ndivisor) {\n        // We shift right before we move the decimal point. This triggers rounding\n        // of the number at its correct scale. Otherwise we would end up with\n        // 999,999 becoming 0.999999 and half-even rounding truncating the\n        // number to '0M' instead of '1M'.\n        q1 = n.movePoint(-divisor);\n        q1 = q1.shiftright(divisor);\n        ctx.setCompact(pattern, q1.integerDigits(), divisor, fracDigits);\n        q2 = ctx.adjust(q1);\n      }\n    }\n\n    return [q2, ndigits];\n  }\n\n  private setupCompactDivisor(\n    bundle: Bundle,\n    n: Decimal,\n    ctx: NumberContext,\n    standardRaw: string,\n    divisor: number,\n    patternImpl: DigitsArrow<PluralType>,\n  ): [Decimal, number] {\n    const negative = n.isNegative();\n    const ndigits = Math.log10(divisor) + 1;\n    // Select compact patterns based on number of digits in divisor\n    const [raw, ndivisor] = patternImpl.get(bundle, 'other', ndigits);\n    if (ndivisor > 0) {\n      n = n.movePoint(-ndivisor);\n    }\n\n    const pattern = this.getCompactPattern(raw, standardRaw, negative);\n    const fracDigits = ctx.useSignificant ? -1 : 0;\n    ctx.setCompact(pattern, n.integerDigits(), divisor, fracDigits);\n\n    // Hack to avoid extra leading '0' for certain divisor cases.\n    // Unless explicit minimum integers is set in options, we force it to\n    // 1 to override the compact pattern.\n    const minInt = ctx.options.minimumIntegerDigits;\n    const noMinInt = minInt === undefined || minInt < 0;\n    if (noMinInt) {\n      ctx.minInt = 1;\n    }\n    return [ctx.adjust(n), ndigits];\n  }\n\n  private getCompactPattern(raw: string, standardRaw: string, negative: boolean): NumberPattern {\n    if (raw) {\n      return this.getNumberPattern(raw, negative);\n    }\n    // Adjust standard pattern to have same fraction settings as compact\n    const pattern = this.getNumberPattern(standardRaw, negative);\n    return { ...pattern, minFrac: 0, maxFrac: 0 };\n  }\n}\n"]}