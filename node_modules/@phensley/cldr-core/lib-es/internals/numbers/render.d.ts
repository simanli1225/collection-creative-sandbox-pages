import { Decimal, DecimalFormatter, Part } from '@phensley/decimal';
import { NumberParams } from '../../common/private';
import { NumberPattern } from '../../parsing/number';
import { GeneralInternals, NumberRenderer } from '../internals';
import { AbstractValue } from '../../utils/render';
/**
 * @internal
 */
export declare abstract class NumberFormatter<R> implements NumberRenderer<R> {
    private params;
    constructor(params: NumberParams);
    render(n: Decimal, pattern: NumberPattern, currencySymbol: string, percentSymbol: string, decimalSymbol: string, minInt: number, grouping?: boolean, exponent?: number): R;
    empty(): R;
    make(type: string, value: string): R;
    wrap(internal: GeneralInternals, raw: string, ...args: R[]): R;
    abstract value(): AbstractValue<R>;
    abstract formatter(decimal: string, group: string): DecimalFormatter<R>;
}
/**
 * @internal
 */
export declare class StringNumberFormatter extends NumberFormatter<string> {
    value(): AbstractValue<string>;
    formatter(_decimal: string, _group: string): DecimalFormatter<string>;
}
/**
 * @internal
 */
export declare class PartsNumberFormatter extends NumberFormatter<Part[]> {
    value(): AbstractValue<Part[]>;
    formatter(decimal: string, group: string): DecimalFormatter<Part[]>;
}
/**
 * @internal
 */
export declare const RE_SYMBOL: RegExp;
/**
 * @internal
 */
export declare const RE_DIGIT: RegExp;
/**
 * @internal
 */
export declare const CURRENCY_SPACING_MATCHERS: {
    [x: string]: (s: string) => boolean;
};
