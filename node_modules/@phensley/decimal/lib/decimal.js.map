{"version":3,"file":"decimal.js","sourceRoot":"","sources":["../src/decimal.ts"],"names":[],"mappings":"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","sourcesContent":["import { add, divide, multiply, subtract, trimLeadingZeros, DivMod } from './math';\nimport { allzero, compare, digitCount } from './operations';\nimport { DecimalFormatter, Part, PartsDecimalFormatter, StringDecimalFormatter } from './format';\nimport { Chars, Constants, DecimalFlag, MathContext, ParseFlags, POWERS10, RoundingModeType } from './types';\n\nconst { floor } = Math;\n\ntype GroupFunc = () => void;\nconst GROUP_NOOP: GroupFunc = (): void => {\n  // nothing\n};\n\nconst enum Op {\n  ADDITION = 0,\n  SUBTRACTION = 1,\n  MULTIPLICATION = 2,\n  DIVISION = 3,\n  MOD = 4,\n}\n\nconst DEFAULT_PRECISION = 28;\nconst EMPTY: number[] = [];\n\nconst NAN_VALUES = new Set(['nan', 'NaN']);\nconst POS_INFINITY = new Set(['infinity', '+infinity', 'Infinity', '+Infinity']);\nconst NEG_INFINITY = new Set(['-infinity', '-Infinity']);\n\n/**\n * Latin decimal digits.\n *\n * @public\n */\nexport const DECIMAL_DIGITS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\n/**\n * Valid argument for constructing a Decimal value.\n *\n * @public\n */\nexport type DecimalArg = number | string | Decimal;\n\n/**\n * Converts a valid argument into a Decimal value.\n *\n * @public\n */\nexport const coerceDecimal = (n: DecimalArg): Decimal =>\n  typeof n === 'number' || typeof n === 'string' ? new Decimal(n) : n;\n\n/**\n * Parses and interprets a math context argument, with appropriate defaults.\n */\nconst parseMathContext = (rounding: RoundingModeType, context?: MathContext): [boolean, number, RoundingModeType] => {\n  let usePrecision = true;\n  let scaleprec = DEFAULT_PRECISION;\n  if (context !== undefined) {\n    if (context.scale !== undefined) {\n      scaleprec = context.scale;\n      usePrecision = false;\n    } else if (context.precision !== undefined) {\n      scaleprec = Math.max(context.precision, 0);\n    }\n    if (context.round !== undefined) {\n      rounding = context.round;\n    }\n  }\n  return [usePrecision, scaleprec, rounding];\n};\n\n/**\n * Return the storage space needed to hold a given number of digits.\n */\nconst size = (n: number): number => {\n  const q = (n / Constants.RDIGITS) | 0;\n  const r = n - q * Constants.RDIGITS;\n  return r === 0 ? q : q + 1;\n};\n\n/**\n * Arbitrary precision decimal type.\n *\n * @public\n */\nexport class Decimal {\n  protected data: number[] = EMPTY;\n  protected sign: number = 0;\n  protected _exp: number = 0;\n  protected flag: DecimalFlag = DecimalFlag.NONE;\n\n  constructor(num: DecimalArg) {\n    if (typeof num === 'string' || typeof num === 'number') {\n      this.parse(num);\n    } else {\n      this.data = num.data.slice();\n      this.sign = num.sign;\n      this._exp = num._exp;\n      this.flag = num.flag;\n    }\n  }\n\n  /**\n   * Return the decimal's exponent.\n   */\n  exp(): number {\n    return this._exp;\n  }\n\n  /**\n   * Return true if this decimal is not a number (NaN).\n   */\n  isNaN(): boolean {\n    return this.flag === DecimalFlag.NAN;\n  }\n\n  /**\n   * Return true if this decimal is finite (not infinity or NaN).\n   */\n  isFinite(): boolean {\n    return this.flag === 0;\n  }\n\n  /**\n   * Return true if this decimal is positive or negative infinity.\n   */\n  isInfinity(): boolean {\n    return this.flag === DecimalFlag.INFINITY;\n  }\n\n  /**\n   * Compare decimal u to v, returning the following:\n   *\n   *  -1   if  u &lt; v\n   *   0   if  u = v\n   *   1   if  u &gt; v\n   *\n   * If the abs flag is true compare the absolute values.\n   *\n   * Any NAN argument will always return -1.\n   */\n  compare(v: DecimalArg, abs: boolean = false): number {\n    let u: Decimal = this;\n    v = coerceDecimal(v);\n\n    if (u.flag || v.flag) {\n      // NAN is never equal to itself or any other value\n      if (u.flag === DecimalFlag.NAN || v.flag === DecimalFlag.NAN) {\n        return -1;\n      }\n\n      // INFINITY\n\n      // Infinities can be equal if their sign matches\n      if (u.flag === v.flag) {\n        return u.sign === v.sign ? 0 : u.sign === -1 ? -1 : 1;\n      }\n\n      // Negative infinity before all other values\n      // Positive infinity after all other values\n      return u.flag === DecimalFlag.INFINITY ? (u.sign === -1 ? -1 : 1) : v.sign === -1 ? 1 : -1;\n    }\n\n    u = u.stripTrailingZeros();\n    v = v.stripTrailingZeros();\n\n    const uz = u.isZero();\n    const vz = v.isZero();\n    if (uz && vz) {\n      return 0;\n    }\n\n    const us = u.sign;\n    const vs = v.sign;\n    if (!abs && us !== vs) {\n      return us === -1 ? -1 : 1;\n    }\n\n    const ue = u.alignexp();\n    const ve = v.alignexp();\n    if (ue !== ve) {\n      if (abs) {\n        return ue < ve ? -1 : 1;\n      }\n      return ue < ve ? -1 * us : us;\n    }\n\n    if (u._exp !== v._exp) {\n      const shift = u._exp - v._exp;\n      if (shift > 0) {\n        // Data cannot be equal here\n        return -compare(v.data, u.data, shift);\n      }\n      return compare(u.data, v.data, -shift);\n    }\n\n    // Same number of radix digits.\n    let i = u.data.length - 1;\n    while (i >= 0) {\n      const a = u.data[i];\n      const b = v.data[i];\n      if (a !== b) {\n        return (a < b ? -1 : 1) * (abs ? 1 : u.sign);\n      }\n      i--;\n    }\n\n    // Equal\n    return 0;\n  }\n\n  /**\n   * Return the raw internal properties of the number. Use with caution.\n   */\n  properties(): [number[], number, number, number] {\n    return [this.data, this.sign, this._exp, this.flag];\n  }\n\n  /**\n   * Return the absolute value of the number.\n   */\n  abs(): Decimal {\n    return this.sign === -1 ? Decimal.fromRaw(-this.sign, this._exp, this.data, this.flag) : this;\n  }\n\n  /**\n   * Invert this number's sign.\n   */\n  negate(): Decimal {\n    return this.isNaN() ? this : Decimal.fromRaw(-this.sign, this._exp, this.data, this.flag);\n  }\n\n  /**\n   * Indicates this number is negative.\n   */\n  isNegative(): boolean {\n    return this.sign === -1;\n  }\n\n  /**\n   * Signum.\n   */\n  signum(): number {\n    return this.isZero() ? 0 : this.sign;\n  }\n\n  /**\n   * Check if this number can be represented as an integer without loss of precision.\n   * For example, '12.000' is the same number as '12'.\n   */\n  isInteger(): boolean {\n    if (this.flag) {\n      return false;\n    }\n    return this._exp + this.trailingZeros() >= 0;\n  }\n\n  /**\n   * Number is exactly zero. Exponent may exist, e.g. \"0e-2\" is \"0.00\".\n   */\n  isZero(): boolean {\n    return !this.flag && this.data.length === 1 && this.data[0] === 0;\n  }\n\n  /**\n   * Return the integer part.\n   */\n  toInteger(): Decimal {\n    return this.flag ? this : this.setScale(0, 'down');\n  }\n\n  /**\n   * Adds v.\n   */\n  add(v: DecimalArg): Decimal {\n    v = coerceDecimal(v);\n    const r = this.handleFlags(Op.ADDITION, v);\n    if (r === undefined) {\n      if (this.isZero()) {\n        return v;\n      }\n      return v.isZero() ? this : this.addsub(this, v, v.sign);\n    }\n    return r;\n  }\n\n  /**\n   * Subtracts v.\n   */\n  subtract(v: DecimalArg): Decimal {\n    v = coerceDecimal(v);\n    const r = this.handleFlags(Op.SUBTRACTION, v);\n    if (r === undefined) {\n      if (this.isZero()) {\n        return v.negate();\n      }\n      return v.isZero() ? this : this.addsub(this, v, -v.sign);\n    }\n    return r;\n  }\n\n  /**\n   * Multiplies by v with optional math context.\n   */\n  multiply(v: DecimalArg, context?: MathContext): Decimal {\n    const [usePrecision, scaleprec, rounding] = parseMathContext('half-even', context);\n    v = coerceDecimal(v);\n    const r = this.handleFlags(Op.MULTIPLICATION, v);\n    if (r !== undefined) {\n      return r;\n    }\n\n    const u: Decimal = this;\n\n    const w = new Decimal(ZERO);\n    w.sign = u.sign === v.sign ? 1 : -1;\n    w._exp = u._exp + v._exp;\n\n    const uz = u.isZero();\n    const vz = v.isZero();\n    if (uz || vz) {\n      if (!usePrecision) {\n        w._setScale(scaleprec);\n      }\n      return w;\n    }\n\n    w.data = multiply(u.data, v.data);\n    w.sign = u.sign === v.sign ? 1 : -1;\n    w.trim();\n\n    // Adjust coefficient to match precision\n    if (usePrecision) {\n      const delta = w.precision() - scaleprec;\n      if (delta > 0) {\n        w._shiftright(delta, rounding);\n      }\n    } else {\n      w._setScale(scaleprec, rounding);\n    }\n    return w;\n  }\n\n  /**\n   * Divide by v with optional math context.\n   */\n  divide(v: DecimalArg, context?: MathContext): Decimal {\n    v = coerceDecimal(v);\n    const r = this.handleFlags(Op.DIVISION, v);\n    if (r !== undefined) {\n      return r;\n    }\n\n    const [usePrecision, scaleprec, rounding] = parseMathContext('half-even', context);\n\n    let w: Decimal;\n    let u: Decimal = this;\n    const sign = u.sign === v.sign ? 1 : -1;\n\n    const shift = usePrecision\n      ? v.precision() - u.precision() + scaleprec + 2\n      : v.precision() + u.precision() + Math.abs(scaleprec) + 2;\n\n    const exp = u._exp - v._exp - shift;\n\n    if (shift > 0) {\n      u = u.shiftleft(shift);\n    } else if (shift < 0) {\n      v = v.shiftleft(-shift);\n    }\n\n    const [q, rem] = divide(u.data, v.data);\n\n    w = Decimal.fromRaw(sign, exp, q, 0);\n    w.trim();\n\n    const hasrem = rem.length && !allzero(rem, rem.length);\n    if (hasrem) {\n      const lsd = w.data[0] % 10;\n      if (lsd === 0 || lsd === 5) {\n        w.data[0]++;\n      }\n    }\n\n    if (usePrecision) {\n      // Adjust precision to match context\n      const delta = w.precision() - scaleprec;\n      if (delta > 0) {\n        w._shiftright(delta, rounding);\n      }\n    } else {\n      // Adjust scale to match context\n      w._setScale(scaleprec, rounding);\n    }\n    if (usePrecision) {\n      w._stripTrailingZeros();\n    }\n    return w;\n  }\n\n  /**\n   * Divide by v and return the quotient and remainder.\n   */\n  divmod(v: DecimalArg): [Decimal, Decimal] {\n    v = coerceDecimal(v);\n    const rq = this.handleFlags(Op.DIVISION, v);\n    if (rq !== undefined) {\n      const rm = this.handleFlags(Op.MOD, v)!;\n      return [rq, rm];\n    }\n\n    let u: Decimal = this;\n\n    const exp = u._exp > v._exp ? v._exp : u._exp;\n    if (u._exp !== v._exp) {\n      const shift = u._exp - v._exp;\n      if (shift > 0) {\n        u = u.shiftleft(shift);\n      } else {\n        v = v.shiftleft(-shift);\n      }\n    }\n\n    // Ensure u digits are >= v\n    const dsize = v.data.length - u.data.length;\n    if (dsize > 0) {\n      if (u === this) {\n        u = new Decimal(u);\n      }\n      for (let i = 0; i < dsize; i++) {\n        u.data.push(0);\n      }\n    }\n\n    const [qd, rd] = divide(u.data, v.data);\n\n    const q = new Decimal(ZERO);\n    q.data = qd;\n    q.sign = u.sign === v.sign ? 1 : -1;\n\n    const r = new Decimal(ZERO);\n    r.data = rd;\n    r.sign = u.sign;\n    r._exp = exp;\n\n    return [q.trim(), r.trim()];\n  }\n\n  /**\n   * Divide by v and return the remainder.\n   */\n  mod(v: DecimalArg): Decimal {\n    v = coerceDecimal(v);\n    const r = this.handleFlags(Op.MOD, v);\n    return r === undefined ? this.divmod(v)[1] : r;\n  }\n\n  /**\n   * Number of trailing zeros.\n   */\n  trailingZeros(): number {\n    if (this.flag) {\n      return 0;\n    }\n    const d = this.data;\n    const len = d.length;\n    let r = 0;\n    for (let i = 0; i < len; i++) {\n      if (d[i] !== 0) {\n        let n = d[i];\n        r = i * Constants.RDIGITS;\n        while (n % 10 === 0) {\n          n /= 10 | 0;\n          r++;\n        }\n        break;\n      }\n    }\n    return r;\n  }\n\n  /**\n   * Strip all trailing zeros.\n   */\n  stripTrailingZeros(): Decimal {\n    if (this.flag) {\n      return this;\n    }\n    const r = new Decimal(this);\n    r._stripTrailingZeros();\n    return r;\n  }\n\n  /**\n   * Return a scientific representation of the number,\n   * Decimal coefficient and adjusted exponent.\n   */\n  scientific(minIntDigits: number = 1): [Decimal, number] {\n    if (this.flag) {\n      return [this, 0];\n    }\n    minIntDigits = minIntDigits <= 1 ? 1 : minIntDigits;\n    const exp = -(this.precision() - 1) + (minIntDigits - 1);\n    // ensure exponent is not negative zero\n    const coeff = Decimal.fromRaw(this.sign, exp === 0 ? 0 : exp, this.data, this.flag);\n    return [coeff, this._exp - coeff._exp];\n  }\n\n  /**\n   * Number of digits in the unscaled value.\n   */\n  precision(): number {\n    if (this.flag) {\n      return 0;\n    }\n    const len = this.data.length;\n    return (len - 1) * Constants.RDIGITS + digitCount(this.data[len - 1]);\n  }\n\n  /**\n   * Scale is the number of digits to the right of the decimal point.\n   */\n  scale(): number {\n    return this.flag ? 0 : this._exp === 0 ? 0 : -this._exp;\n  }\n\n  /**\n   * Number of integer digits, 1 or higher.\n   */\n  integerDigits(): number {\n    return this.flag ? 0 : Math.max(this.precision() + this._exp, 1);\n  }\n\n  /**\n   * Returns a new number with the given scale, shifting the coefficient as needed.\n   */\n  setScale(scale: number, roundingMode: RoundingModeType = 'half-even'): Decimal {\n    if (this.flag) {\n      return this;\n    }\n    const r: Decimal = new Decimal(this);\n    r._setScale(floor(scale), roundingMode);\n    return r;\n  }\n\n  /**\n   * Adjusted exponent for alignment. Two numbers with the same aligned exponent are\n   * aligned for arithmetic operations. If the aligned exponents do not match one\n   * number must be shifted.\n   */\n  alignexp(): number {\n    return this.flag ? 0 : this._exp + this.precision() - 1;\n  }\n\n  /**\n   * Move the decimal point -n (left) or +n (right) places. Does not change\n   * precision, only affects the exponent.\n   */\n  movePoint(n: number): Decimal {\n    if (this.flag) {\n      return this;\n    }\n    const w = new Decimal(this);\n    w._exp += floor(n);\n    return w;\n  }\n\n  /**\n   * Shifts all digits to the left, increasing the precision.\n   */\n  shiftleft(shift: number): Decimal {\n    if (this.flag) {\n      return this;\n    }\n    const w = new Decimal(this);\n    w._shiftleft(floor(shift));\n    return w;\n  }\n\n  /**\n   * Shifts all digits to the right, reducing the precision. Result is rounded\n   * using the given rounding mode.\n   */\n  shiftright(shift: number, mode: RoundingModeType = 'half-even'): Decimal {\n    if (this.flag) {\n      return this;\n    }\n    const w = new Decimal(this);\n    w._shiftright(floor(shift), mode);\n    return w;\n  }\n\n  /**\n   * Increment the least-significant integer digit.\n   */\n  increment(): Decimal {\n    if (this.flag) {\n      return this;\n    }\n    const r = new Decimal(this);\n    if (r.sign === -1 || r._exp !== 0) {\n      return r.add(DecimalConstants.ONE);\n    }\n    r._increment();\n    return r;\n  }\n\n  /**\n   * Decrement the least-significant integer digit.\n   */\n  decrement(): Decimal {\n    return this.flag ? this : this.subtract(DecimalConstants.ONE);\n  }\n\n  /**\n   * Format the number to a string, using fixed point.\n   */\n  toString(): string {\n    return this.flag ? this.formatFlags() : this.formatString(this, 1);\n  }\n\n  /**\n   * Format this number to scientific notation as a string.\n   */\n  toScientificString(minIntegers: number = 1): string {\n    if (this.flag) {\n      return this.formatFlags();\n    }\n    const [coeff, exp] = this.scientific(minIntegers);\n    const r = this.formatString(coeff, minIntegers);\n    return coeff.isZero() ? r : exp === 0 ? r : r + `E${exp > 0 ? '+' : ''}${exp}`;\n  }\n\n  /**\n   * Format this number to an array of parts.\n   */\n  toParts(): Part[] {\n    return this.flag ? this.formatFlagsParts() : this.formatParts(this, 1);\n  }\n\n  /**\n   * Format this number to scientific notation as an array of parts.\n   */\n  toScientificParts(minIntegers: number = 1): Part[] {\n    if (this.flag) {\n      return this.formatFlagsParts();\n    }\n    const [coeff, exp] = this.scientific(minIntegers);\n    const r = this.formatParts(coeff, minIntegers);\n    if (coeff.isZero() || exp === 0) {\n      return r;\n    }\n    const sign = exp < 0 ? { type: 'minus', value: '-' } : { type: 'plus', value: '+' };\n    return r.concat([{ type: 'exp', value: 'E' }, sign, { type: 'integer', value: `${Math.abs(exp)}` }]);\n  }\n\n  /**\n   * Low-level formatting of string and Part[] forms.\n   */\n  format<R>(\n    formatter: DecimalFormatter<R>,\n    decimal: string,\n    group: string,\n    minInt: number,\n    minGroup: number,\n    priGroup: number,\n    secGroup: number,\n    zeroScale: boolean,\n    digits: string[] = DECIMAL_DIGITS,\n  ): void {\n    // Determine if grouping is enabled, and set the primary and\n    // secondary group sizes.\n    const grouping = group !== '';\n    if (secGroup <= 0) {\n      secGroup = priGroup;\n    }\n\n    let exp = this._exp;\n\n    // Determine how many integer digits to emit. If integer digits is\n    // larger than the integer coefficient we emit leading zeros.\n    let int = this.data.length === 1 && this.data[0] === 0 ? 1 : this.precision() + exp;\n\n    if (minInt <= 0 && this.compare(ONE, true) === -1) {\n      // If the number is between 0 and 1 and format requested minimum\n      // integer digits of zero, don't emit a leading zero digit.\n      int = 0;\n    } else {\n      int = Math.max(int, minInt);\n    }\n\n    // Array to append digits in reverse order\n    const len = this.data.length;\n    let groupSize = priGroup;\n    let emitted = 0;\n\n    // Determine if grouping should be active.\n    let groupFunc = GROUP_NOOP;\n    if (grouping && priGroup > 0 && int >= minGroup + priGroup) {\n      groupFunc = () => {\n        if (emitted > 0 && emitted % groupSize === 0) {\n          // Push group character, reset emitted digits, and switch\n          // to secondary grouping size.\n          formatter.add(group);\n          emitted = 0;\n          groupSize = secGroup;\n        }\n      };\n    }\n\n    // Push trailing zeros for a positive exponent, only if the number\n    // is non-zero\n    let zeros = exp;\n    if (!(this.data.length === 1 && this.data[0] === 0)) {\n      while (zeros > 0) {\n        formatter.add(digits[0]);\n        emitted++;\n        groupFunc();\n        int--;\n        zeros--;\n      }\n    } else if (zeroScale && exp < 0) {\n      // Handle sign of zero which means we have exactly '0'. If we\n      // have the 'zeroScale' flag set, a negative exponent here will\n      // emit zeros after the decimal point.\n      while (exp < 0) {\n        exp++;\n        formatter.add(digits[0]);\n      }\n      formatter.add(decimal);\n    }\n\n    // Scan coefficient from least- to most-significant digit.\n    const last = len - 1;\n    for (let i = 0; i < len; i++) {\n      // Count the decimal digits c in this radix digit d\n      let d = this.data[i];\n      const c = i === last ? digitCount(d) : Constants.RDIGITS;\n\n      // Loop over the decimal digits\n      for (let j = 0; j < c; j++) {\n        // Push decimal digit\n        formatter.add(digits[d % 10]);\n        d = (d / 10) | 0;\n\n        // When we've reached exponent of 0, push the decimal point.\n        exp++;\n        if (exp === 0) {\n          formatter.add(decimal);\n        }\n\n        // Decrement integer, increment emitted digits when exponent is positive, to\n        // trigger grouping logic. We only do this once exp has become positive to\n        // avoid counting emitted digits for decimal part.\n        if (exp > 0) {\n          emitted++;\n          int--;\n          if (int > 0) {\n            groupFunc();\n          }\n        }\n      }\n    }\n\n    // If exponent still negative, emit leading decimal zeros\n    // if (!(this.data.length === 1 && this.data[0] === 0)) {\n    while (exp < 0) {\n      formatter.add(digits[0]);\n\n      // When we've reached exponent of 0, push the decimal point\n      exp++;\n      if (exp === 0) {\n        formatter.add(decimal);\n      }\n    }\n    // }\n\n    // Leading integer zeros\n    while (int > 0) {\n      formatter.add(digits[0]);\n      emitted++;\n      int--;\n      if (int > 0) {\n        groupFunc();\n      }\n    }\n  }\n\n  protected formatFlags(): string {\n    switch (this.flag) {\n      case DecimalFlag.NAN:\n        return 'NaN';\n      case DecimalFlag.INFINITY:\n      default:\n        return this.sign === 1 ? 'Infinity' : '-Infinity';\n    }\n  }\n\n  protected formatFlagsParts(): Part[] {\n    switch (this.flag) {\n      case DecimalFlag.NAN:\n        return [{ type: 'nan', value: 'NaN' }];\n      case DecimalFlag.INFINITY:\n      default:\n        const s = this.sign === 1 ? 'Infinity' : '-Infinity';\n        return [{ type: 'infinity', value: s }];\n    }\n  }\n\n  protected formatString(d: Decimal, minInt: number): string {\n    const f = new StringDecimalFormatter();\n    d.format(f, '.', '', minInt, 1, 3, 3, true);\n    const r = f.render();\n    return d.sign === -1 ? '-' + r : r;\n  }\n\n  protected formatParts(d: Decimal, minInt: number): Part[] {\n    const f = new PartsDecimalFormatter('.', '');\n    d.format(f, '.', '', minInt, 1, 3, 3, true);\n    const r = f.render();\n    return d.sign === -1 ? [{ type: 'minus', value: '-' }].concat(r) : r;\n  }\n\n  /**\n   * Handle setting of flags for operations per the IEEE-754-2008 specification.\n   * These rules are also referenced in the EcmaScript specification:\n   *\n   * 12.7.3.1 - Applying the mul operator:\n   * https://tc39.github.io/ecma262/#sec-applying-the-mul-operator\n   *\n   * 12.7.3.2 - Applying the div operator:\n   * https://tc39.github.io/ecma262/#sec-applying-the-div-operator\n   *\n   * 12.7.3.3 - Applying the mod operator:\n   * https://tc39.github.io/ecma262/#sec-applying-the-mod-operator\n   *\n   * 12.8.5 - Applying the additive operators to numbers:\n   * https://tc39.github.io/ecma262/#sec-applying-the-additive-operators-to-numbers\n   *\n   */\n  protected handleFlags(op: Op, v: Decimal): Decimal | undefined {\n    const u = this as Decimal;\n    const uflag = u.flag;\n    const vflag = v.flag;\n\n    // Any operation involving a NAN returns a NAN\n    if (uflag === DecimalFlag.NAN || vflag === DecimalFlag.NAN) {\n      return NAN;\n    }\n\n    const uinf = uflag === DecimalFlag.INFINITY;\n    const vinf = vflag === DecimalFlag.INFINITY;\n    const uzero = u.isZero();\n    const vzero = v.isZero();\n\n    switch (op) {\n      case Op.ADDITION:\n        if (uinf && vinf) {\n          return u.sign === v.sign ? (u.sign === 1 ? POSITIVE_INFINITY : NEGATIVE_INFINITY) : NAN;\n        } else if (uinf || vinf) {\n          return uinf ? u : v;\n        }\n        break;\n\n      case Op.SUBTRACTION:\n        if (uinf && vinf) {\n          return u.sign === v.sign ? NAN : u.sign === 1 ? POSITIVE_INFINITY : NEGATIVE_INFINITY;\n        } else if (uinf || vinf) {\n          return uinf\n            ? u.sign === 1\n              ? POSITIVE_INFINITY\n              : NEGATIVE_INFINITY\n            : v.sign === 1\n              ? NEGATIVE_INFINITY\n              : POSITIVE_INFINITY;\n        }\n        break;\n\n      case Op.MULTIPLICATION:\n        if (uinf) {\n          return vzero ? NAN : u.sign === v.sign ? POSITIVE_INFINITY : NEGATIVE_INFINITY;\n        }\n        if (vinf) {\n          return uzero ? NAN : u.sign === v.sign ? POSITIVE_INFINITY : NEGATIVE_INFINITY;\n        }\n        break;\n\n      case Op.DIVISION:\n        if (uinf && vinf) {\n          return NAN;\n        }\n        if (uinf) {\n          return vzero\n            ? u.sign === 1\n              ? POSITIVE_INFINITY\n              : NEGATIVE_INFINITY\n            : u.sign === v.sign\n              ? POSITIVE_INFINITY\n              : NEGATIVE_INFINITY;\n        }\n        if (vinf) {\n          return ZERO;\n        }\n        if (vzero) {\n          return uzero ? NAN : u.sign === 1 ? POSITIVE_INFINITY : NEGATIVE_INFINITY;\n        }\n        break;\n\n      case Op.MOD:\n        if (uinf || vzero) {\n          return NAN;\n        }\n        if (!uinf && vinf) {\n          return u;\n        }\n        if (uzero && !vzero && !vinf) {\n          return u;\n        }\n        break;\n    }\n\n    return undefined;\n  }\n\n  protected static fromRaw(sign: number, _exp: number, data: number[], flag: DecimalFlag): Decimal {\n    return new this({ sign, _exp, data, flag } as any as Decimal);\n  }\n\n  /**\n   * Mutating in-place shift left.\n   */\n  protected _shiftleft(shift: number): void {\n    if (shift <= 0) {\n      return;\n    }\n    const w: Decimal = this;\n    const prec = w.precision();\n    const data = w.data.slice();\n    // w.data.fill(0);\n\n    let m = data.length;\n\n    // Compute the shift in terms of our radix.\n    const q = (shift / Constants.RDIGITS) | 0;\n    const r = shift - q * Constants.RDIGITS;\n\n    // Expand w to hold shifted result and zero all elements.\n    let n = size(prec + shift);\n    w.data = new Array(n);\n    w.data.fill(0);\n\n    // Trivial case where shift is a multiple of our radix.\n    if (r === 0) {\n      while (--m >= 0) {\n        w.data[m + q] = data[m];\n      }\n      return;\n    }\n\n    // Shift divided by radix leaves a remainder.\n    const powlo = POWERS10[r];\n    const powhi = POWERS10[Constants.RDIGITS - r];\n    let hi = 0;\n    let lo = 0;\n    let loprev = 0;\n\n    n--;\n    m--;\n    hi = (data[m] / powhi) | 0;\n    loprev = data[m] - hi * powhi;\n    if (hi !== 0) {\n      w.data[n] = hi;\n      n--;\n    }\n    m--;\n\n    // Divmod each element of u, copying the hi/lo parts to w.\n    for (; m >= 0; m--, n--) {\n      hi = (data[m] / powhi) | 0;\n      lo = data[m] - hi * powhi;\n      w.data[n] = powlo * loprev + hi;\n      loprev = lo;\n    }\n\n    w.data[q] = powlo * loprev;\n  }\n\n  /**\n   * Mutating in-place shift right.\n   */\n  protected _shiftright(shift: number, mode: RoundingModeType): void {\n    if (shift <= 0) {\n      return;\n    }\n    if (this.isZero()) {\n      this._exp += shift;\n      return;\n    }\n\n    const w: Decimal = this;\n    const prec = w.precision();\n\n    // Check if shift exceeds precision, so all digits are shifted to\n    // zero with no rounding possible. Just set zero and bump the exponent.\n    if (prec < shift) {\n      w.data = [0];\n      w._exp += shift;\n      return;\n    }\n\n    // We only want to round up when there is a free zero integer\n    // digit to the left. We do this when the number is < 0 or\n    // we're not shifting out all of the digits.\n    const round = w.alignexp() < 0 || prec !== shift;\n    const div = new DivMod();\n    const [q, r] = div.word(shift, Constants.RDIGITS);\n\n    const data = w.data.slice();\n    w.data.fill(0);\n\n    // check if we divided evenly\n    let i = 0,\n      j = 0;\n    let rnd = 0,\n      rest = 0;\n\n    if (r === 0) {\n      // q is always non-zero here, else there would be no shift\n      [rnd, rest] = div.pow10(data[q - 1], Constants.RDIGITS - 1);\n      if (rest === 0) {\n        rest = allzero(data, q - 1) === 0 ? 1 : 0;\n      }\n      for (j = 0; j < data.length - q; j++) {\n        w.data[j] = data[q + j];\n      }\n    } else {\n      let hiprev = 0;\n      const ph = POWERS10[Constants.RDIGITS - r];\n      // q is always < data.length here; otherwise r == 0\n      [hiprev, rest] = div.pow10(data[q], r);\n      [rnd, rest] = div.pow10(rest, r - 1);\n      if (rest === 0 && q > 0) {\n        rest = allzero(data, q) === 0 ? 1 : 0;\n      }\n\n      for (j = 0, i = q + 1; i < data.length; i++, j++) {\n        const [hi, lo] = div.pow10(data[i], r);\n        w.data[j] = ph * lo + hiprev;\n        hiprev = hi;\n      }\n      if (hiprev !== 0) {\n        w.data[j] = hiprev;\n      }\n    }\n\n    w.trim();\n    w._exp += shift;\n\n    if (round && w.round(rnd, rest, mode)) {\n      // If precision changes due to rounding, subtract from exponent\n      w._increment();\n    }\n  }\n\n  protected _setScale(scale: number, roundingMode: RoundingModeType = 'half-even'): void {\n    const diff = scale - this.scale();\n    if (diff > 0) {\n      this._shiftleft(diff);\n    } else {\n      this._shiftright(-diff, roundingMode);\n    }\n    this._exp = scale === 0 ? 0 : -scale;\n    this.trim();\n  }\n\n  protected _stripTrailingZeros(): void {\n    let n = 0;\n    // Special case for zero with negative exponent\n    if (this.data.length === 1 && this.data[0] === 0 && this._exp < 0) {\n      n = -this._exp;\n    } else {\n      n = this.trailingZeros();\n    }\n    if (n > 0) {\n      this._shiftright(n, 'down');\n    }\n  }\n\n  /**\n   * Trim leading zeros from a result and reset sign and exponent accordingly.\n   */\n  protected trim(): Decimal {\n    trimLeadingZeros(this.data);\n    return this;\n  }\n\n  /**\n   * Increment the least-significant digit of the coefficient.\n   */\n  protected _increment(): void {\n    const d = this.data;\n    const len = d.length;\n    let s = 0;\n    let k = 1;\n    for (let i = 0; k === 1 && i < len; i++) {\n      s = d[i] + k;\n      k = s === Constants.RADIX ? 1 : 0;\n      d[i] = k ? 0 : s;\n    }\n    if (k === 1) {\n      d.push(1);\n    }\n  }\n\n  /**\n   * Return a rounding indicator for a given rounding mode,\n   */\n  protected round(rnd: number, rest: number, mode: RoundingModeType): number {\n    if (rest !== 0 && (rnd === 0 || rnd === 5)) {\n      rnd++;\n    }\n    switch (mode) {\n      case 'up':\n        // round away from zero\n        return Number(rnd !== 0);\n      case 'down':\n        // round towards zero\n        return 0;\n      case 'ceiling':\n        // round towards positive infinity\n        return Number(!(rnd === 0 || this.sign === -1));\n      case 'floor':\n        // round towards negative infinity\n        return Number(!(rnd === 0 || this.sign >= 0));\n      case 'half-up':\n        // if n >= 5 round up; otherwise round down\n        return Number(rnd >= 5);\n      case 'half-down':\n        // if n > 5 round up; otherwise round down\n        return Number(rnd > 5);\n      case 'half-even':\n        // if n = 5 and digit to left of n is odd round up; if even round down\n        return Number(rnd > 5 || (rnd === 5 && this.isodd()));\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * Return true if this instance is odd.\n   */\n  protected isodd(): boolean {\n    return this.data.length > 0 && this.data[0] % 2 === 1;\n  }\n\n  /**\n   * Addition and subtraction.\n   */\n  protected addsub(u: Decimal, v: Decimal, vsign: number): Decimal {\n    let m = u; // m = bigger\n    let n = v; // n = smaller\n    let swap = 0;\n    if (m._exp < n._exp) {\n      [m, n] = [n, m];\n      swap++;\n    }\n\n    const shift = m._exp - n._exp;\n    m = m.shiftleft(shift);\n\n    const w = new Decimal(ZERO);\n    w._exp = n._exp;\n\n    if (m.data.length < n.data.length) {\n      [m, n] = [n, m];\n      swap++;\n    }\n\n    if (u.sign === vsign) {\n      w.data = add(m.data, n.data);\n      w.sign = vsign;\n    } else {\n      const ulen = m.data.length;\n      const vlen = n.data.length;\n      if (ulen === vlen) {\n        for (let i = ulen - 1; i >= 0; i--) {\n          if (m.data[i] !== n.data[i]) {\n            if (m.data[i] < n.data[i]) {\n              [m, n] = [n, m];\n              swap++;\n            }\n            break;\n          }\n        }\n      }\n      w.data = subtract(m.data, n.data);\n      w.sign = (swap & 1) === 1 ? vsign : m.sign;\n    }\n    return w.trim();\n  }\n\n  /**\n   * Parse a number or string setting the fields on the current instance.\n   */\n  protected parse(arg: string | number): void {\n    if (typeof arg === 'number') {\n      if (isNaN(arg)) {\n        this.flag = DecimalFlag.NAN;\n        return;\n      }\n      if (!isFinite(arg)) {\n        this.flag = DecimalFlag.INFINITY;\n        this.sign = arg === Infinity ? 1 : -1;\n        return;\n      }\n    }\n\n    const str: string = typeof arg === 'string' ? arg : arg.toString();\n    const msg = this._parse(str);\n    if (msg !== undefined) {\n      throw new Error(msg);\n    }\n  }\n\n  /**\n   * Parse a string into a Decimal.\n   *\n   * Expects strings of the form:\n   *    \"[-+][digits][.][digits][eE][-+][digits]\"\n   * or:\n   *    \"[nN]a[nN]\"        for a NaN\n   *    \"[-+]?[iI]nfinity\" for positive or negative infinity\n   */\n  protected _parse(str: string): string | undefined {\n    if (NAN_VALUES.has(str)) {\n      this.flag = DecimalFlag.NAN;\n      return;\n    }\n    if (POS_INFINITY.has(str)) {\n      this.flag = DecimalFlag.INFINITY;\n      this.sign = 1;\n      return;\n    }\n    if (NEG_INFINITY.has(str)) {\n      this.flag = DecimalFlag.INFINITY;\n      this.sign = -1;\n      return;\n    }\n\n    // Local variables to accumulate digits, sign and exponent\n    const data: number[] = [];\n\n    // Default sign is 1. Negative sign is -1. NaN sign is 0.\n    let sign = 1;\n    let exp = 0;\n\n    // Flags to control parsing, raise errors.\n    let flags = 0;\n\n    // Current number being parsed.\n    let n = 0;\n\n    // Index of power for current digit.\n    let z = 0;\n\n    // Pointer to the current character being parsed.\n    let i = str.length - 1;\n\n    // Total number of digits parsed.\n    let dig = 0;\n\n    // We parse from the end to avoid multiple passes or splitting of the\n    // input string.\n    while (i >= 0) {\n      const code = str.charCodeAt(i);\n      switch (code) {\n        case Chars.ELOWER:\n        case Chars.EUPPER:\n          if (flags & ParseFlags.EXP) {\n            return `Extra exponent character at ${i}`;\n          }\n          if (data.length > 0) {\n            // Exponent is currently limited to the size of Constants.RADIX\n            return 'Exponent too large';\n          }\n          if (dig === 0) {\n            return 'Exponent not provided';\n          }\n          // Indicate we have an exponent, and clear the sign flag.\n          flags |= ParseFlags.EXP;\n          flags &= ~ParseFlags.SIGN;\n\n          // Copy the parsed number to the exponent and reset the digit count.\n          dig = 0;\n          exp = sign === -1 ? -n : n;\n          sign = 1;\n          n = 0;\n          z = 0;\n          break;\n\n        case Chars.MINUS:\n        case Chars.PLUS:\n          if (dig === 0) {\n            return 'Found a bare sign symbol';\n          }\n          if (flags & ParseFlags.SIGN) {\n            return `Duplicate sign character at ${i}`;\n          }\n          sign = code === Chars.MINUS ? -1 : 1;\n          flags |= ParseFlags.SIGN;\n          break;\n\n        case Chars.DOT:\n          if (flags & ParseFlags.POINT) {\n            return `Extra radix point seen at ${i}`;\n          }\n          flags |= ParseFlags.POINT;\n          exp -= dig;\n          break;\n\n        case Chars.DIGIT0:\n        case Chars.DIGIT1:\n        case Chars.DIGIT2:\n        case Chars.DIGIT3:\n        case Chars.DIGIT4:\n        case Chars.DIGIT5:\n        case Chars.DIGIT6:\n        case Chars.DIGIT7:\n        case Chars.DIGIT8:\n        case Chars.DIGIT9:\n          n += (code - Chars.DIGIT0) * POWERS10[z];\n          z++;\n          dig++;\n          if (z === Constants.RDIGITS) {\n            data.push(n);\n            n = 0;\n            z = 0;\n          }\n          break;\n\n        default:\n          return `Unexpected character at ${i}: ${str[i]}`;\n      }\n      i--;\n    }\n\n    if (dig === 0) {\n      return 'Number must include at least 1 digit';\n    }\n\n    data.push(n);\n\n    this.data = data;\n    this.sign = sign === -1 ? -1 : 1;\n    this._exp = exp;\n    this.trim();\n    return undefined;\n  }\n}\n\nconst ZERO = new Decimal('0');\nconst ONE = new Decimal('1');\nconst TWO = new Decimal('2');\n\n// 105 digits of pi - https://oeis.org/A000796/constant\nconst PI = new Decimal(\n  '3.141592653589793238462643383279502884197169399375105' + '82097494459230781640628620899862803482534211706798214',\n);\n\n// 105 digits of e - https://oeis.org/A001113/constant\nconst E = new Decimal(\n  '2.718281828459045235360287471352662497757247093699959' + '57496696762772407663035354759457138217852516642742746',\n);\n\nconst NAN = new Decimal(NaN);\nconst NEGATIVE_INFINITY = new Decimal(-Infinity);\nconst POSITIVE_INFINITY = new Decimal(Infinity);\n\n/**\n * Common Decimal values as constants.\n *\n * @public\n */\nexport const DecimalConstants = {\n  ZERO,\n  ONE,\n  TWO,\n  PI,\n  E,\n  NAN,\n  POSITIVE_INFINITY,\n  NEGATIVE_INFINITY,\n};\n"]}