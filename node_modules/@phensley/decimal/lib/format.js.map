{"version":3,"file":"format.js","sourceRoot":"","sources":["../src/format.ts"],"names":[],"mappings":";;;AA2BA;;;;GAIG;AACH;IAAA;QACY,UAAK,GAAa,EAAE,CAAC;IASjC,CAAC;IAPC,oCAAG,GAAH,UAAI,CAAS;QACX,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IAED,uCAAM,GAAN;QACE,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACvC,CAAC;IACH,6BAAC;AAAD,CAAC,AAVD,IAUC;AAVY,wDAAsB;AAYnC;;;;GAIG;AACH;IAIE,+BACY,OAAe,EACf,KAAa;QADb,YAAO,GAAP,OAAO,CAAQ;QACf,UAAK,GAAL,KAAK,CAAQ;QALf,UAAK,GAAW,EAAE,CAAC;QACnB,SAAI,GAAa,EAAE,CAAC;IAK3B,CAAC;IAEJ,mCAAG,GAAH,UAAI,CAAS;QACX,QAAQ,CAAC,EAAE,CAAC;YACV,KAAK,IAAI,CAAC,OAAO;gBACf,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBAC3E,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;gBAC/C,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;gBACf,MAAM;YAER,KAAK,IAAI,CAAC,KAAK;gBACb,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;gBAC5D,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;gBAC7C,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;gBACf,MAAM;YAER;gBACE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAClB,MAAM;QACV,CAAC;IACH,CAAC;IAED,sCAAM,GAAN;QACE,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACzB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC9D,CAAC;QACD,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC;IAEO,uCAAO,GAAf;QACE,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACtC,CAAC;IACH,4BAAC;AAAD,CAAC,AAvCD,IAuCC;AAvCY,sDAAqB","sourcesContent":["/**\n * A single part of a multi-part value.\n *\n * @public\n */\nexport interface Part {\n  type: string;\n  value: string;\n}\n\n/**\n * Formatting of decimal values.\n *\n * @public\n */\nexport interface DecimalFormatter<T> {\n  /**\n   * Add a new part to the formatted value.\n   */\n  add(c: string): void;\n\n  /**\n   * Finalize and return the formatted value.\n   */\n  render(): T;\n}\n\n/**\n * Formats a decimal into a string.\n *\n * @public\n */\nexport class StringDecimalFormatter implements DecimalFormatter<string> {\n  protected parts: string[] = [];\n\n  add(c: string): void {\n    this.parts.push(c);\n  }\n\n  render(): string {\n    return this.parts.reverse().join('');\n  }\n}\n\n/**\n * Formats a decimal into an array of parts.\n *\n * @public\n */\nexport class PartsDecimalFormatter implements DecimalFormatter<Part[]> {\n  protected parts: Part[] = [];\n  protected curr: string[] = [];\n\n  constructor(\n    protected decimal: string,\n    protected group: string,\n  ) {}\n\n  add(c: string): void {\n    switch (c) {\n      case this.decimal:\n        this.parts.push({ type: 'fraction', value: this.curr.reverse().join('') });\n        this.parts.push({ type: 'decimal', value: c });\n        this.curr = [];\n        break;\n\n      case this.group:\n        this.parts.push({ type: 'integer', value: this.current() });\n        this.parts.push({ type: 'group', value: c });\n        this.curr = [];\n        break;\n\n      default:\n        this.curr.push(c);\n        break;\n    }\n  }\n\n  render(): Part[] {\n    if (this.curr.length > 0) {\n      this.parts.push({ type: 'integer', value: this.current() });\n    }\n    return this.parts.reverse();\n  }\n\n  private current(): string {\n    return this.curr.reverse().join('');\n  }\n}\n"]}