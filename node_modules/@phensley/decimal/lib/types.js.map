{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAgDa,QAAA,QAAQ,GAAG;;;;;;;;;;CAUvB,CAAC","sourcesContent":["/**\n * Flags indicate special values.\n *\n * @public\n */\nexport const enum DecimalFlag {\n  NONE = 0,\n  NAN = 1,\n  INFINITY = 2,\n}\n\n/**\n * Modes for controlling rounding.\n *\n * @public\n */\nexport type RoundingModeType = 'up' | 'down' | 'ceiling' | 'floor' | 'half-up' | 'half-down' | 'half-even';\n\n/**\n * Sets the scale or precision, and the rounding mode for a math operation.\n *\n * @public\n */\nexport interface MathContext {\n  scale?: number;\n  precision?: number;\n  round?: RoundingModeType;\n}\n\n/**\n * Constants for use in Decimal calculations.\n */\nexport const enum Constants {\n  // 10^7 < sqrt(Number.MAX_SAFE_INTEGER)\n  RADIX = 1e7,\n  RDIGITS = 7,\n\n  P0 = 1,\n  P1 = 10,\n  P2 = 100,\n  P3 = 1000,\n  P4 = 10000,\n  P5 = 100000,\n  P6 = 1000000,\n  P7 = 10000000,\n  P8 = 100000000,\n}\n\nexport const POWERS10 = [\n  Constants.P0,\n  Constants.P1,\n  Constants.P2,\n  Constants.P3,\n  Constants.P4,\n  Constants.P5,\n  Constants.P6,\n  Constants.P7,\n  Constants.P8,\n];\n\n/**\n * States during decimal parsing.\n */\nexport const enum ParseState {\n  INITIAL = 0,\n  INTEGER = 1,\n  FRACTION = 2,\n  EXPONENT = 3,\n}\n\n/**\n * Flags used during decimal parsing.\n */\nexport const enum ParseFlags {\n  SIGN = 1,\n  POINT = 2,\n  EXP = 4,\n}\n\n/**\n * Characters used in decimal parsing.\n *\n * @public\n */\nexport const enum Chars {\n  PLUS = 0x2b,\n  MINUS = 0x2d,\n  DOT = 0x2e,\n  DIGIT0 = 0x30,\n  DIGIT1 = 0x31,\n  DIGIT2 = 0x32,\n  DIGIT3 = 0x33,\n  DIGIT4 = 0x34,\n  DIGIT5 = 0x35,\n  DIGIT6 = 0x36,\n  DIGIT7 = 0x37,\n  DIGIT8 = 0x38,\n  DIGIT9 = 0x39,\n  ELOWER = 0x45,\n  EUPPER = 0x65,\n}\n"]}