import { Decimal, DecimalArg } from './decimal';
import { MathContext } from './types';
/**
 * Valid argument for constructing a Rational value.
 *
 * @public
 */
export type RationalArg = Rational | Decimal | number | string;
/**
 * Arbitrary precision rational type.
 *
 * @public
 */
export declare class Rational {
    protected numer: Decimal;
    protected denom: Decimal;
    constructor(numerator: DecimalArg, denominator?: DecimalArg);
    numerator(): Decimal;
    denominator(): Decimal;
    compare(num: RationalArg, context?: MathContext): number;
    divide(num: RationalArg, context?: MathContext): Rational;
    multiply(num: RationalArg, context?: MathContext): Rational;
    inverse(): Rational;
    toDecimal(context?: MathContext): Decimal;
    toString(): string;
    private _parse;
}
/**
 * Common Rational values as constants.
 *
 * @public
 */
export declare const RationalConstants: {
    ONE: Rational;
};
