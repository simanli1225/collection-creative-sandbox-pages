/**
 * Flags indicate special values.
 *
 * @public
 */
export declare const enum DecimalFlag {
    NONE = 0,
    NAN = 1,
    INFINITY = 2
}
/**
 * Modes for controlling rounding.
 *
 * @public
 */
export type RoundingModeType = 'up' | 'down' | 'ceiling' | 'floor' | 'half-up' | 'half-down' | 'half-even';
/**
 * Sets the scale or precision, and the rounding mode for a math operation.
 *
 * @public
 */
export interface MathContext {
    scale?: number;
    precision?: number;
    round?: RoundingModeType;
}
/**
 * Constants for use in Decimal calculations.
 */
export declare const enum Constants {
    RADIX = 10000000,
    RDIGITS = 7,
    P0 = 1,
    P1 = 10,
    P2 = 100,
    P3 = 1000,
    P4 = 10000,
    P5 = 100000,
    P6 = 1000000,
    P7 = 10000000,
    P8 = 100000000
}
export declare const POWERS10: Constants[];
/**
 * States during decimal parsing.
 */
export declare const enum ParseState {
    INITIAL = 0,
    INTEGER = 1,
    FRACTION = 2,
    EXPONENT = 3
}
/**
 * Flags used during decimal parsing.
 */
export declare const enum ParseFlags {
    SIGN = 1,
    POINT = 2,
    EXP = 4
}
/**
 * Characters used in decimal parsing.
 *
 * @public
 */
export declare const enum Chars {
    PLUS = 43,
    MINUS = 45,
    DOT = 46,
    DIGIT0 = 48,
    DIGIT1 = 49,
    DIGIT2 = 50,
    DIGIT3 = 51,
    DIGIT4 = 52,
    DIGIT5 = 53,
    DIGIT6 = 54,
    DIGIT7 = 55,
    DIGIT8 = 56,
    DIGIT9 = 57,
    ELOWER = 69,
    EUPPER = 101
}
