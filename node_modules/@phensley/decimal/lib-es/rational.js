import { Decimal, DecimalConstants } from './decimal';
var coerceDecimal = function (n) {
    if (typeof n === 'number') {
        return new Decimal(n);
    }
    else if (typeof n === 'string') {
        return fromString(n);
    }
    return n;
};
var coerceRational = function (n) {
    if (typeof n === 'number') {
        return new Rational(n, DecimalConstants.ONE);
    }
    else if (typeof n === 'string') {
        return new Rational(n);
    }
    else if (n instanceof Rational) {
        return n;
    }
    return new Rational(n, DecimalConstants.ONE);
};
/**
 * Default Rational parser, to identify named constants.
 */
var fromString = function (s) {
    switch (s.toLowerCase()) {
        case 'e':
            return DecimalConstants.E;
        case 'pi':
            return DecimalConstants.PI;
        default:
            return new Decimal(s);
    }
};
/**
 * Arbitrary precision rational type.
 *
 * @public
 */
var Rational = /** @class */ (function () {
    function Rational(numerator, denominator) {
        if (typeof numerator === 'string' && denominator === undefined) {
            this._parse(numerator);
        }
        else {
            denominator = denominator === undefined ? DecimalConstants.ONE : denominator;
            this.numer = coerceDecimal(numerator);
            this.denom = coerceDecimal(denominator);
        }
    }
    Rational.prototype.numerator = function () {
        return this.numer;
    };
    Rational.prototype.denominator = function () {
        return this.denom;
    };
    Rational.prototype.compare = function (num, context) {
        var u = this;
        var v = coerceRational(num);
        var a = u.numer.multiply(v.denom, context);
        var b = v.numer.multiply(u.denom, context);
        return a.compare(b);
    };
    Rational.prototype.divide = function (num, context) {
        var n = coerceRational(num);
        return new Rational(this.numer.multiply(n.denom, context), this.denom.multiply(n.numer, context));
    };
    Rational.prototype.multiply = function (num, context) {
        var n = coerceRational(num);
        return new Rational(this.numer.multiply(n.numer, context), this.denom.multiply(n.denom, context));
    };
    Rational.prototype.inverse = function () {
        return new Rational(this.denom, this.numer);
    };
    Rational.prototype.toDecimal = function (context) {
        return this.numer.divide(this.denom, context);
    };
    Rational.prototype.toString = function () {
        return "".concat(this.numer.toString(), " / ").concat(this.denom.toString());
    };
    Rational.prototype._parse = function (raw) {
        var i = raw.indexOf('/');
        if (i === -1) {
            this.numer = fromString(raw);
            this.denom = DecimalConstants.ONE;
        }
        else {
            this.numer = fromString(raw.substring(0, i).trim());
            this.denom = fromString(raw.substring(i + 1).trim());
        }
    };
    return Rational;
}());
export { Rational };
/**
 * Common Rational values as constants.
 *
 * @public
 */
export var RationalConstants = {
    ONE: new Rational(1, 1),
};
//# sourceMappingURL=rational.js.map