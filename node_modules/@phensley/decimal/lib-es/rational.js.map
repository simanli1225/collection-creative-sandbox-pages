{"version":3,"file":"rational.js","sourceRoot":"","sources":["../src/rational.ts"],"names":[],"mappings":"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","sourcesContent":["import { Decimal, DecimalArg, DecimalConstants } from './decimal';\nimport { MathContext } from './types';\n\nconst coerceDecimal = (n: DecimalArg): Decimal => {\n  if (typeof n === 'number') {\n    return new Decimal(n);\n  } else if (typeof n === 'string') {\n    return fromString(n);\n  }\n  return n;\n};\n\nconst coerceRational = (n: RationalArg): Rational => {\n  if (typeof n === 'number') {\n    return new Rational(n, DecimalConstants.ONE);\n  } else if (typeof n === 'string') {\n    return new Rational(n);\n  } else if (n instanceof Rational) {\n    return n as Rational;\n  }\n  return new Rational(n, DecimalConstants.ONE);\n};\n\n/**\n * Default Rational parser, to identify named constants.\n */\nconst fromString = (s: string): Decimal => {\n  switch (s.toLowerCase()) {\n    case 'e':\n      return DecimalConstants.E;\n    case 'pi':\n      return DecimalConstants.PI;\n    default:\n      return new Decimal(s);\n  }\n};\n\n/**\n * Valid argument for constructing a Rational value.\n *\n * @public\n */\nexport type RationalArg = Rational | Decimal | number | string;\n\n/**\n * Arbitrary precision rational type.\n *\n * @public\n */\nexport class Rational {\n  protected numer!: Decimal;\n  protected denom!: Decimal;\n\n  constructor(numerator: DecimalArg, denominator?: DecimalArg) {\n    if (typeof numerator === 'string' && denominator === undefined) {\n      this._parse(numerator);\n    } else {\n      denominator = denominator === undefined ? DecimalConstants.ONE : denominator;\n      this.numer = coerceDecimal(numerator);\n      this.denom = coerceDecimal(denominator);\n    }\n  }\n\n  numerator(): Decimal {\n    return this.numer;\n  }\n\n  denominator(): Decimal {\n    return this.denom;\n  }\n\n  compare(num: RationalArg, context?: MathContext): number {\n    const u: Rational = this;\n    const v = coerceRational(num);\n    const a = u.numer.multiply(v.denom, context);\n    const b = v.numer.multiply(u.denom, context);\n    return a.compare(b);\n  }\n\n  divide(num: RationalArg, context?: MathContext): Rational {\n    const n = coerceRational(num);\n    return new Rational(this.numer.multiply(n.denom, context), this.denom.multiply(n.numer, context));\n  }\n\n  multiply(num: RationalArg, context?: MathContext): Rational {\n    const n = coerceRational(num);\n    return new Rational(this.numer.multiply(n.numer, context), this.denom.multiply(n.denom, context));\n  }\n\n  inverse(): Rational {\n    return new Rational(this.denom, this.numer);\n  }\n\n  toDecimal(context?: MathContext): Decimal {\n    return this.numer.divide(this.denom, context);\n  }\n\n  toString(): string {\n    return `${this.numer.toString()} / ${this.denom.toString()}`;\n  }\n\n  private _parse(raw: string): void {\n    const i = raw.indexOf('/');\n    if (i === -1) {\n      this.numer = fromString(raw);\n      this.denom = DecimalConstants.ONE;\n    } else {\n      this.numer = fromString(raw.substring(0, i).trim());\n      this.denom = fromString(raw.substring(i + 1).trim());\n    }\n  }\n}\n\n/**\n * Common Rational values as constants.\n *\n * @public\n */\nexport const RationalConstants = {\n  ONE: new Rational(1, 1),\n};\n"]}