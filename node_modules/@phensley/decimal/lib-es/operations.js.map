{"version":3,"file":"operations.js","sourceRoot":"","sources":["../src/operations.ts"],"names":[],"mappings":"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","sourcesContent":["import { DivMod } from './math';\nimport { Constants, POWERS10 } from './types';\n\nconst cmp = (a: number, b: number): number => (a < b ? -1 : a === b ? 0 : 1);\n\nexport const compare = (a: number[], b: number[], shift: number): number => {\n  const div = new DivMod();\n  let n = a.length;\n  let m = b.length;\n\n  const [q, r] = div.word(shift, Constants.RDIGITS);\n\n  if (r === 0) {\n    while (--m >= 0) {\n      const c = cmp(a[m + q], b[m]);\n      if (c !== 0) {\n        return c;\n      }\n    }\n  } else {\n    const ph = POWERS10[r];\n    let c = 0;\n    let hi = 0;\n    let loprev = 0;\n    let lo = 0;\n    --m;\n    --n;\n    [hi, loprev] = div.pow10(b[m--], Constants.RDIGITS - r);\n    if (hi !== 0) {\n      c = cmp(a[n], hi);\n      if (c !== 0) {\n        return c;\n      }\n      --n;\n    }\n    let x = 0;\n    for (; m >= 0; m--, n--) {\n      [hi, lo] = div.pow10(b[m], Constants.RDIGITS - r);\n      x = ph * loprev + hi;\n      c = cmp(a[n], x);\n      if (c !== 0) {\n        return c;\n      }\n      loprev = lo;\n    }\n    x = ph * loprev;\n    c = cmp(a[q], x);\n    if (c !== 0) {\n      return c;\n    }\n  }\n  return Number(!allzero(a, q));\n};\n\nexport const allzero = (data: number[], len: number): number => {\n  if (len <= data.length) {\n    while (--len >= 0) {\n      if (data[len] !== 0) {\n        return 0;\n      }\n    }\n  }\n  return 1;\n};\n\n/**\n * Returns the number of digits in w, where w < RADIX.\n */\nexport const digitCount = (w: number): number => {\n  if (w < Constants.P4) {\n    if (w < Constants.P2) {\n      return w < Constants.P1 ? 1 : 2;\n    }\n    return w < Constants.P3 ? 3 : 4;\n  }\n  if (w < Constants.P6) {\n    return w < Constants.P5 ? 5 : 6;\n  }\n  return w < Constants.P7 ? 7 : 8;\n};\n"]}