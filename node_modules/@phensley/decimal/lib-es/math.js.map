{"version":3,"file":"math.js","sourceRoot":"","sources":["../src/math.ts"],"names":[],"mappings":"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","sourcesContent":["import { Constants, POWERS10 } from './types';\n\n/**\n * Knuth TAoCP 4.3.1 Algorithm A\n * Addition of nonnegative n-place integers u and v, returning the sum w.\n * Numbers must already be aligned and length u >= length v.\n */\nexport const add = (u: number[], v: number[]): number[] => {\n  const vlen = v.length;\n  const n = u.length;\n  const w: number[] = new Array(n);\n\n  // A1. Initialize\n  let j = 0;\n  let k = 0;\n  while (j < n) {\n    // v may be shorter than u\n    const vj = j < vlen ? v[j] : 0;\n\n    // A2. Add digits\n    const z = u[j] + vj + k;\n    w[j] = z % Constants.RADIX;\n\n    // .. k is being set to 1 or 0, to carry\n    k = (z / Constants.RADIX) | 0;\n\n    // A3. Loop on j\n    j++;\n  }\n  if (k === 1) {\n    w.push(k);\n  }\n  return w;\n};\n\n/**\n * Knuth TAoCP 4.3.1 Algorithm S\n * Subtraction of nonnegative n-place integers u >= v, returning the sum w.\n * Numbers must already be aligned and length u >= length v.\n */\nexport const subtract = (u: number[], v: number[]): number[] => {\n  const m = u.length;\n  const n = v.length;\n  const w: number[] = new Array(m);\n\n  // S1. Initialize\n  let j = 0;\n  let k = 0;\n\n  // S2. Subtract digits\n  while (j < n) {\n    const z = u[j] - v[j] - k;\n    w[j] = z < 0 ? z + Constants.RADIX : z;\n    // k is set to 1 or 0, indicating a borrow\n    k = z < 0 ? 1 : 0;\n    j++;\n\n    // S3. Loop on j\n  }\n\n  // Propagate the borrow flag up\n  while (k && j < m) {\n    const z = u[j] - k;\n    w[j] = z < 0 ? z + Constants.RADIX : z;\n    k = z < 0 ? 1 : 0;\n    j++;\n  }\n\n  // Borrow done, copy remainder of larger number\n  while (j < m) {\n    w[j] = u[j];\n    j++;\n  }\n  return w;\n};\n\n/**\n * Knuth TAoCP 4.3.1 Algorithm M\n * Multiplication of nonnegative integers u and v, returning the product w.\n */\nexport const multiply = (u: number[], v: number[]): number[] => {\n  const m = u.length;\n  const n = v.length;\n\n  // M1. Initialize, set w all to zero\n  const w = new Array(n + m);\n  w.fill(0);\n\n  // Skip M2. Zero multiplier check, just follow the algorithm/\n\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (j < n) {\n    // M3. Initialize i\n    i = 0;\n    k = 0;\n    while (i < m) {\n      // M4. Multiply and add\n      const p = k + w[i + j] + u[i] * v[j];\n      k = (p / Constants.RADIX) | 0;\n      w[i + j] = p - k * Constants.RADIX;\n\n      // M5. Loop on i\n      i++;\n    }\n\n    // Final carry\n    w[j + m] = k;\n\n    // M6. Loop on j\n    j++;\n  }\n  return w;\n};\n\n/**\n * Multiplication of a nonnegative integer u by a single word v, returning the product w.\n * See TAoCP 4.3.1 exercise 13.\n */\nexport const multiplyword = (w: number[], u: number[], n: number, v: number): void => {\n  let i = 0;\n  let k = 0;\n  for (i = 0; i < n; i++) {\n    const p = k + u[i] * v;\n    k = (p / Constants.RADIX) | 0;\n    w[i] = p - k * Constants.RADIX;\n  }\n  if (k > 0) {\n    w[i] = k;\n  }\n};\n\n/**\n * Knuth TAoCP 4.3.1 Algorithm D\n * Division of nonnegative integer u by v, returning the quotient q and remainder r.\n */\nexport const divide = (uc: number[], vc: number[]): [number[], number[]] => {\n  const n = vc.length;\n  const m = uc.length - n;\n  if (n === 1) {\n    return divideword(uc, vc[0]);\n  }\n\n  const nplusm = n + m;\n  if (nplusm < n) {\n    throw new Error(`n + m must be >= n, got ${m}`);\n  }\n\n  // Storage for copy of u which is modified in place, and v which needs an\n  // extra digit.\n  const u = uc.slice();\n  u.push(0);\n  const v = vc.slice();\n  v.push(0);\n\n  // Storage for quotient and remainder.\n  const q = new Array(nplusm + 1);\n  q.fill(0);\n\n  // D1. Normalize\n  const d = (Constants.RADIX / (v[n - 1] + 1)) | 0;\n  if (d !== 1) {\n    multiplyword(u, uc, nplusm, d);\n    multiplyword(v, vc, n, d);\n  }\n\n  let k = 0;\n  let p = 0;\n  let hi = 0;\n  let lo = 0;\n\n  let j = m;\n  while (j >= 0) {\n    // D3. Calculate q̂ and r̂.\n    p = u[j + n - 1] + u[j + n] * Constants.RADIX;\n    let qhat = (p / v[n - 1]) | 0;\n    let rhat = p - qhat * v[n - 1];\n    while (true) {\n      // D3. Test if q̂ = radix ...\n      if (qhat < Constants.RADIX) {\n        const z = qhat * v[n - 2];\n        hi = (z / Constants.RADIX) | 0;\n        lo = z - hi * Constants.RADIX;\n        if (hi <= rhat) {\n          if (hi !== rhat || lo <= u[j + n - 2]) {\n            break;\n          }\n        }\n      }\n\n      // D3. ... decrease q̂ by 1, increase r̂ by v[n - 1]\n      qhat--;\n      rhat += v[n - 1];\n      if (rhat >= Constants.RADIX) {\n        break;\n      }\n    }\n\n    // D4. Multiply and subtract.\n    let i = 0;\n    k = 0;\n    for (i = 0; i <= n; i++) {\n      // Multiply.\n      p = qhat * v[i] + k;\n      hi = (p / Constants.RADIX) | 0;\n      lo = p - hi * Constants.RADIX;\n\n      // Subtract and determine carry.\n      const x = u[i + j] - lo;\n      k = x < 0 ? 1 : 0;\n      u[i + j] = k ? x + Constants.RADIX : x;\n      k += hi;\n    }\n\n    // Set the j-th quotient digit\n    q[j] = qhat;\n\n    // D5. Test remainder of D4.\n    if (k > 0) {\n      // D6. Add back. Quotient digit is too large by 1.\n      q[j] -= 1;\n      addhelper(u, j, v, n + 1, n);\n    }\n\n    // D7. Loop on j.\n    j--;\n  }\n\n  // D8. Unnormalize remainder.\n  k = 0;\n  const r = new Array(n);\n  r.fill(0);\n  for (let i = n - 1; i >= 0; i--) {\n    p = u[i] + k * Constants.RADIX;\n    r[i] = (p / d) | 0;\n    k = p - r[i] * d;\n  }\n  return [q, r];\n};\n\n/**\n * Knuth TAoCP 4.3.1 Exercise 16\n * Division of a nonnegative integer u by a single word v, returning the quotient q\n * and remainder r.\n */\nconst divideword = (u: number[], v: number): [number[], number[]] => {\n  const n = u.length;\n  const q = new Array(n);\n  q.fill(0);\n  let r = 0;\n  for (let i = n - 1; i >= 0; i--) {\n    const p = u[i] + r * Constants.RADIX;\n    q[i] = (p / v) | 0;\n    r = p - q[i] * v;\n  }\n  return [q, [r]];\n};\n\n/**\n * divide() \"add back\" helper, adds v to u.\n */\nconst addhelper = (u: number[], j: number, v: number[], m: number, n: number): void => {\n  let i = 0;\n  let k = 0;\n  let s = 0;\n\n  while (i < n) {\n    s = u[i + j] + (v[i] + k);\n    k = s >= Constants.RADIX ? 1 : 0;\n    u[i + j] = k ? s - Constants.RADIX : s;\n    i++;\n  }\n\n  while (k && i < m) {\n    s = u[i + j] + k;\n    k = s === Constants.RADIX ? 1 : /* istanbul ignore next */ 0;\n    u[i + j] = k === 1 ? s - Constants.RADIX : /* istanbul ignore next */ s;\n    i++;\n  }\n\n  // Final carry is ignored\n};\n\n/**\n * Starting at the end of the array, remove all contiguous zeros except\n * the last.\n */\nexport const trimLeadingZeros = (data: number[]): void => {\n  let i = data.length - 1;\n  while (i > 0 && data[i] === 0) {\n    data.pop();\n    i--;\n  }\n};\n\n/**\n * Reusable quotient and remainder for repeated divmod operations.\n */\nexport class DivMod {\n  // [quotient, remainder]\n  private s: number[] = [0, 0];\n\n  pow10(n: number, exp: number): number[] {\n    return divpow10(this.s, n, exp);\n  }\n\n  /**\n   * Divide and modulus n by w. Result is [quotient, remainder].\n   */\n  word(n: number, w: number): number[] {\n    return divword(this.s, n, w);\n  }\n}\n\n/**\n * Divide and modulus n by 10^exp. Store result in d = [quotient, remainder].\n */\nexport const divpow10 = (d: number[], n: number, exp: number): number[] => {\n  const p = POWERS10[exp];\n  d[0] = (n / p) | 0;\n  d[1] = n - d[0] * p;\n  return d;\n};\n\n/**\n * Divide and modulus by w. Store result in d = [quotient, remainder].\n */\nexport const divword = (_d: number[], n: number, div: number): number[] => {\n  const q = (n / div) | 0;\n  const r = n - q * div;\n  return [q, r];\n};\n"]}