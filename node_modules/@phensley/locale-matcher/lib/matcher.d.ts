import { LanguageTag } from '@phensley/language-tag';
import { Locale } from '@phensley/locale';
declare class Entry implements Locale {
    readonly id: string;
    readonly tag: LanguageTag;
    readonly compact: string;
    constructor(id: string, tag: LanguageTag);
}
type LangTag = Locale | LanguageTag | string;
/**
 * Flatten and split the string or array into a list of matcher entries.
 *
 * Visible for testing.
 */
export declare const parse: (locales?: string | (Locale | LangTag)[], options?: LocaleMatcherOptions) => Entry[];
/**
 * A result returned by the LocaleMatcher.
 *
 * @public
 */
export interface LocaleMatch {
    /**
     * The locale that was matched.
     */
    locale: Locale;
    /**
     * Distance of the match from the desired locale.
     */
    distance: number;
}
/**
 * Options for the LocaleMatcher.
 *
 * @public
 */
export interface LocaleMatcherOptions {
    /**
     * Resolve language tags. (default true)
     */
    resolve?: boolean;
}
/**
 * Sort the supported locale entries. The result will have the following order:
 *
 *  First: default locale
 *   Next: all paradigm locales
 *   Last: all other locales
 *
 * Visible for testing.
 */
export declare const sortEntries: (d: Entry) => (a: Entry, b: Entry) => number;
/**
 * Given a list of supported locales, and a list of a user's desired locales
 * (sorted in the order of preference, descending), returns the supported
 * locale closest to the user preference. The first locale in the list will
 * be used as the default. The default will be selected if no match is within
 * the distance threshold.
 *
 * Implementation of CLDR enhanced language matching:
 * http://www.unicode.org/reports/tr35/tr35.html#EnhancedLanguageMatching
 *
 * @public
 */
export declare class LocaleMatcher {
    private supported;
    private count;
    private default;
    private exactMap;
    constructor(supportedLocales: string | (Locale | LanguageTag | string)[], options?: LocaleMatcherOptions);
    /**
     * Find the desired locale that is the closed match to a supported locale, within
     * the given threshold. Any matches whose distance is greater than or equal to the
     * threshold will be treated as having maximum distance.
     */
    match(desiredLocales: string | string[], threshold?: number): LocaleMatch;
}
export {};
