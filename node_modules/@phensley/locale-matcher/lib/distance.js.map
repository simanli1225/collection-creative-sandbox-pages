{"version":3,"file":"distance.js","sourceRoot":"","sources":["../src/distance.ts"],"names":[],"mappings":"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","sourcesContent":["import { LanguageTag } from '@phensley/language-tag';\nimport { getRegionPartition } from './partition';\nimport { distanceMap, DistanceMap, DistanceNode } from './autogen.distance';\n\n/**\n * Default distance threshold.\n */\nexport const DEFAULT_THRESHOLD = 50;\n\n/**\n * Maximum possible distance between two language tags.\n */\nexport const MAX_DISTANCE = 100;\n\nconst get = (map: DistanceMap, want: string, have: string): DistanceNode | undefined => {\n  const sub = map[want];\n  return sub === undefined ? undefined : sub[have];\n};\n\nconst getany = (map: DistanceMap): DistanceNode => {\n  const sub = map.$;\n  /* istanbul ignore else */\n  if (sub !== undefined) {\n    const node = sub.$;\n    /* istanbul ignore else */\n    if (node !== undefined) {\n      return node;\n    }\n  }\n  /* istanbul ignore next */\n  throw new Error('Severe error: wildcard levels missing in distance map.');\n};\n\nconst _distance = (node: DistanceNode | number): number => (typeof node === 'number' ? node : node[0]);\n\n/**\n * Return the distance between the desired and supported locale, stopping once\n * the given threshold is exceeded.\n */\nexport const getDistance = (desired: LanguageTag, supported: LanguageTag, threshold?: number): number => {\n  if (typeof threshold !== 'number') {\n    threshold = DEFAULT_THRESHOLD;\n  }\n\n  // Compare the LANGUAGE subtag.\n  let wildcard = false;\n  let map = distanceMap;\n  let want = desired.language();\n  let have = supported.language();\n\n  let node = get(map, want, have);\n  if (node === undefined) {\n    node = getany(map);\n    wildcard = true;\n  }\n\n  // Calculate LANGUAGE distance.\n  let distance = wildcard ? (want === have ? 0 : _distance(node)) : _distance(node);\n  if (distance >= threshold) {\n    return MAX_DISTANCE;\n  }\n\n  // Move to compare the SCRIPT subtag.\n  map = (node as [number, DistanceMap])[1];\n  want = desired.script();\n  have = supported.script();\n\n  node = get(map, want, have);\n  if (node === undefined) {\n    node = getany(map);\n    wildcard = true;\n  } else {\n    wildcard = false;\n  }\n\n  // Update with SCRIPT distance.\n  distance += wildcard ? (want === have ? 0 : _distance(node)) : _distance(node);\n  if (distance >= threshold) {\n    return MAX_DISTANCE;\n  }\n\n  // Move to compare the REGION subtag.\n  want = desired.region();\n  have = supported.region();\n\n  // If regions are equal, we're done.\n  if (want === have) {\n    return distance;\n  }\n\n  const wantPartitions = getRegionPartition(want);\n  const havePartitions = getRegionPartition(have);\n\n  map = (node as [number, DistanceMap])[1];\n  node = get(map, want, have);\n\n  // There are currently no region -> region distances, so the node\n  // be undefined here.\n\n  /* istanbul ignore else */\n  if (node === undefined) {\n    // Compare the desired region against supported partitions, and vice-versa.\n    node = scanRegion(map, want, wantPartitions, have, havePartitions);\n  }\n\n  // If we found something, we're done.\n  if (node !== undefined) {\n    distance += _distance(node);\n    return distance < threshold ? distance : MAX_DISTANCE;\n  }\n\n  // Find the maximum distance between partitions.\n  let maxDistance = 0;\n  let match = false;\n\n  // Try permutations of desired and supported partitions to find the maximum distance.\n  for (const dpartition of wantPartitions) {\n    for (const spartition of havePartitions) {\n      node = get(map, dpartition, spartition);\n      if (node !== undefined) {\n        maxDistance = Math.max(maxDistance, _distance(node));\n        match = true;\n      }\n    }\n  }\n\n  if (!match) {\n    node = getany(map);\n    // The 'any' lookup will always succeed here\n    /* istanbul ignore else */\n    if (node !== undefined) {\n      maxDistance = Math.max(maxDistance, _distance(node));\n    }\n  }\n\n  distance += maxDistance;\n  return distance < threshold ? distance : MAX_DISTANCE;\n};\n\n/**\n * Find the distance between sets of partitions.\n */\nconst scanRegion = (\n  map: DistanceMap,\n  want: string,\n  wantPartitions: string[],\n  have: string,\n  havePartitions: string[],\n): number | undefined => {\n  let node = undefined;\n\n  for (const v of wantPartitions) {\n    node = get(map, v, have);\n    if (typeof node === 'number') {\n      return node;\n    }\n  }\n\n  for (const v of havePartitions) {\n    node = get(map, want, v);\n    if (typeof node === 'number') {\n      return node;\n    }\n  }\n\n  return undefined;\n};\n"]}