{"version":3,"file":"schema.js","sourceRoot":"","sources":["../src/schema.ts"],"names":[],"mappings":"","sourcesContent":["import { DigitsArrow, FieldArrow, ScopeArrow, Vector1Arrow, Vector2Arrow, Vector3Arrow } from './arrows';\n\nimport { DateTimePatternFieldType, EraWidthType, FormatWidthType } from './calendars';\n\nimport { DateFieldType, DateFieldWidthType, RelativeTimeFieldType } from './datefields';\n\nimport { ListPatternPositionType } from './general';\n\nimport {\n  CurrencySpacingPattern,\n  CurrencySpacingPos,\n  NumberMiscPatternType,\n  NumberSymbolType,\n  NumberSystemCategory,\n  NumberSystemName,\n} from './numbers';\n\nimport { LanguageIdType, RegionIdType, ScriptIdType } from './autogen.identifiers';\nimport { ContextTransformFieldType } from './autogen.context';\nimport { CurrencyType } from './autogen.currencies';\nimport { MetaZoneType } from './autogen.timezones';\nimport { UnitType } from './autogen.units';\n\nimport { AltType, DayPeriodAltType, EraAltType, PluralType } from './misc';\n\n// CALENDARS\n\n/**\n * @public\n */\nexport interface CalendarFields {\n  readonly weekdays: Vector2Arrow<string, string>;\n  readonly months: Vector2Arrow<string, string>;\n  readonly quarters: Vector2Arrow<string, string>;\n  readonly dayPeriods: Vector3Arrow<string, string, DayPeriodAltType>;\n}\n\n/**\n * @public\n */\nexport interface CalendarSchema {\n  readonly eras: Vector3Arrow<EraWidthType, string, EraAltType>;\n  readonly format: CalendarFields;\n  readonly standAlone: CalendarFields;\n  readonly availableFormats: Vector1Arrow<string>;\n  readonly pluralFormats: Vector2Arrow<PluralType, string>;\n  readonly intervalFormats: Vector2Arrow<DateTimePatternFieldType, string>;\n  readonly dateFormats: Vector1Arrow<FormatWidthType>;\n  readonly timeFormats: Vector1Arrow<FormatWidthType>;\n  readonly dateTimeFormats: Vector1Arrow<FormatWidthType>;\n  readonly dateTimeFormatsAt: Vector1Arrow<FormatWidthType>;\n  readonly intervalFormatFallback: FieldArrow;\n}\n\n/**\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface BuddhistSchema extends CalendarSchema {}\n\n/**\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface GregorianSchema extends CalendarSchema {}\n\n/**\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface JapaneseSchema extends CalendarSchema {}\n\n/**\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface PersianSchema extends CalendarSchema {}\n\n// CURRENCIES\n\n/**\n * @public\n */\nexport interface CurrenciesSchema {\n  readonly displayName: Vector1Arrow<CurrencyType>;\n  readonly decimal: Vector1Arrow<CurrencyType>;\n  readonly pluralName: Vector2Arrow<PluralType, CurrencyType>;\n  readonly symbol: Vector2Arrow<AltType, CurrencyType>;\n}\n\n// DATEFIELDS\n\n/**\n * @public\n */\nexport interface RelativeTimeFields {\n  readonly previous2: Vector1Arrow<RelativeTimeFieldType>;\n  readonly previous: Vector1Arrow<RelativeTimeFieldType>;\n  readonly current: Vector1Arrow<RelativeTimeFieldType>;\n  readonly next: Vector1Arrow<RelativeTimeFieldType>;\n  readonly next2: Vector1Arrow<RelativeTimeFieldType>;\n  readonly future: Vector2Arrow<PluralType, RelativeTimeFieldType>;\n  readonly past: Vector2Arrow<PluralType, RelativeTimeFieldType>;\n}\n\n// TODO: Consider moving these down and using Vector2Arrow including the width.\n// it will make some code more compact.\n\n/**\n * @public\n */\nexport interface RelativeTimes {\n  readonly wide: RelativeTimeFields;\n  readonly short: RelativeTimeFields;\n  readonly narrow: RelativeTimeFields;\n}\n\n/**\n * @public\n */\nexport interface DateFieldsSchema {\n  readonly relativeTimes: RelativeTimes;\n  readonly displayName: Vector2Arrow<DateFieldType, DateFieldWidthType>;\n}\n\n// GENERAL\n\n/**\n * @public\n */\nexport interface LayoutSchema {\n  readonly characterOrder: FieldArrow;\n  readonly lineOrder: FieldArrow;\n}\n\n/**\n * @public\n */\nexport interface ListPatternsSchema {\n  readonly and: Vector1Arrow<ListPatternPositionType>;\n  readonly andShort: Vector1Arrow<ListPatternPositionType>;\n  readonly or: Vector1Arrow<ListPatternPositionType>;\n  readonly unitLong: Vector1Arrow<ListPatternPositionType>;\n  readonly unitNarrow: Vector1Arrow<ListPatternPositionType>;\n  readonly unitShort: Vector1Arrow<ListPatternPositionType>;\n}\n\n/**\n * @public\n */\nexport interface ContextTransformsSchema {\n  readonly contextTransforms: Vector1Arrow<ContextTransformFieldType>;\n}\n\n// NAMES\n\n/**\n * @public\n */\nexport interface LanguageNameInfo {\n  readonly displayName: Vector2Arrow<AltType, LanguageIdType>;\n}\n\n/**\n * @public\n */\nexport interface ScriptNameInfo {\n  readonly displayName: Vector2Arrow<AltType, ScriptIdType>;\n}\n\n/**\n * @public\n */\nexport interface RegionNameInfo {\n  readonly displayName: Vector2Arrow<AltType, RegionIdType>;\n}\n\n/**\n * @public\n */\nexport interface NamesSchema {\n  readonly languages: LanguageNameInfo;\n  readonly scripts: ScriptNameInfo;\n  readonly regions: RegionNameInfo;\n}\n\n// NUMBERS\n\n/**\n * @public\n */\nexport interface CurrencyFormats {\n  readonly standard: FieldArrow;\n  readonly accounting: FieldArrow;\n  readonly short: DigitsArrow<PluralType>;\n  readonly spacing: Vector2Arrow<CurrencySpacingPos, CurrencySpacingPattern>;\n  readonly unitPattern: Vector1Arrow<PluralType>;\n}\n\n/**\n * @public\n */\nexport interface DecimalFormats {\n  readonly standard: FieldArrow;\n  readonly short: DigitsArrow<PluralType>;\n  readonly long: DigitsArrow<PluralType>;\n}\n\n/**\n * @public\n */\nexport interface NumberSystemInfo {\n  readonly symbols: Vector1Arrow<NumberSymbolType>;\n  readonly currencyFormats: CurrencyFormats;\n  readonly decimalFormats: DecimalFormats;\n  readonly percentFormat: FieldArrow;\n  readonly scientificFormat: FieldArrow;\n  readonly miscPatterns: Vector1Arrow<NumberMiscPatternType>;\n}\n\n/**\n * @public\n */\nexport interface NumbersSchema {\n  readonly minimumGroupingDigits: FieldArrow;\n  readonly numberSystems: Vector1Arrow<NumberSystemCategory>;\n  readonly numberSystem: ScopeArrow<NumberSystemName, NumberSystemInfo>;\n}\n\n// TIMEZONES\n\n/**\n * @public\n */\nexport type TimeZoneNameType = 'daylight' | 'generic' | 'standard';\n\n/**\n * @public\n */\nexport interface MetaZoneInfo {\n  readonly short: Vector2Arrow<TimeZoneNameType, MetaZoneType>;\n  readonly long: Vector2Arrow<TimeZoneNameType, MetaZoneType>;\n}\n\n/**\n * @public\n */\nexport interface TimeZoneSchema {\n  readonly metaZones: MetaZoneInfo;\n  readonly exemplarCity: Vector1Arrow<string>;\n  readonly gmtFormat: FieldArrow;\n  readonly hourFormat: FieldArrow;\n  readonly gmtZeroFormat: FieldArrow;\n  readonly regionFormat: FieldArrow;\n}\n\n// UNITS\n\n/**\n * @public\n */\nexport interface UnitInfo {\n  readonly unitPattern: Vector2Arrow<PluralType, UnitType>;\n  readonly displayName: Vector1Arrow<UnitType>;\n  readonly perUnitPattern: Vector1Arrow<UnitType>;\n  readonly perPattern: FieldArrow;\n  readonly timesPattern: FieldArrow;\n  // TODO: coordinate display names and patterns\n}\n\n/**\n * @public\n */\nexport interface UnitsSchema {\n  readonly long: UnitInfo;\n  readonly narrow: UnitInfo;\n  readonly short: UnitInfo;\n}\n\n// ROOT SCHEMA\n\n/**\n * @public\n */\nexport interface Schema {\n  readonly Names: NamesSchema;\n  readonly Numbers: NumbersSchema;\n  readonly DateFields: DateFieldsSchema;\n  readonly Layout: LayoutSchema;\n  readonly ListPatterns: ListPatternsSchema;\n  readonly Buddhist: BuddhistSchema;\n  readonly Gregorian: GregorianSchema;\n  readonly Japanese: JapaneseSchema;\n  readonly Persian: PersianSchema;\n  readonly TimeZones: TimeZoneSchema;\n  readonly Currencies: CurrenciesSchema;\n  readonly Units: UnitsSchema;\n  readonly ContextTransforms: ContextTransformsSchema;\n}\n"]}