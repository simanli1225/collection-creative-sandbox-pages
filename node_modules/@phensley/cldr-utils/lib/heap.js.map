{"version":3,"file":"heap.js","sourceRoot":"","sources":["../src/heap.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Compares two values of type T.\n *\n * @public\n */\nexport type Comparator<T> = (a: T, b: T) => number;\n\nconst parent = (i: number) => (i - 1) >> 1;\nconst left = (i: number) => (i << 1) + 1;\nconst right = (i: number) => (i << 1) + 2;\n\n/**\n * Minimum heap.\n *\n * @public\n */\nexport class Heap<T> {\n  private items: T[];\n\n  constructor(\n    private readonly cmp: Comparator<T>,\n    data: T[],\n  ) {\n    this.items = data.slice(0);\n    for (let i = parent(data.length - 1); i >= 0; i--) {\n      this._down(i);\n    }\n  }\n\n  /**\n   * Is the heap empty?\n   *\n   * @public\n   */\n  empty(): boolean {\n    return !this.items.length;\n  }\n\n  /**\n   * Push an item and sift up.\n   *\n   * @public\n   */\n  push(item: T): void {\n    this.items.push(item);\n    this._up();\n  }\n\n  /**\n   * Pop the minimum item.\n   *\n   * @public\n   */\n  pop(): T | undefined {\n    if (this.items.length <= 1) {\n      return this.items.pop();\n    }\n    const r = this.items[0];\n    this.items[0] = this.items.pop()!;\n    this._down();\n    return r;\n  }\n\n  /**\n   * Sift down.\n   */\n  private _down(i: number = 0): void {\n    const len = this.items.length;\n    for (;;) {\n      const lx = left(i);\n      if (lx >= len) {\n        break;\n      }\n      const rx = right(i);\n      const sm = rx < len ? (this.cmp(this.items[lx], this.items[rx]) === -1 ? lx : rx) : lx;\n\n      if (this.cmp(this.items[sm], this.items[i]) >= 0) {\n        break;\n      }\n      this.swap(sm, i);\n      i = sm;\n    }\n  }\n\n  /**\n   * Sift up.\n   */\n  private _up(): void {\n    let i = this.items.length - 1;\n    while (i > 0) {\n      const px = parent(i);\n      if (this.cmp(this.items[i], this.items[px]) !== -1) {\n        break;\n      }\n      this.swap(i, px);\n      i = px;\n    }\n  }\n\n  private swap(i: number, j: number): void {\n    const tmp = this.items[i];\n    this.items[i] = this.items[j];\n    this.items[j] = tmp;\n  }\n}\n"]}