"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Heap = void 0;
var parent = function (i) { return (i - 1) >> 1; };
var left = function (i) { return (i << 1) + 1; };
var right = function (i) { return (i << 1) + 2; };
/**
 * Minimum heap.
 *
 * @public
 */
var Heap = /** @class */ (function () {
    function Heap(cmp, data) {
        this.cmp = cmp;
        this.items = data.slice(0);
        for (var i = parent(data.length - 1); i >= 0; i--) {
            this._down(i);
        }
    }
    /**
     * Is the heap empty?
     *
     * @public
     */
    Heap.prototype.empty = function () {
        return !this.items.length;
    };
    /**
     * Push an item and sift up.
     *
     * @public
     */
    Heap.prototype.push = function (item) {
        this.items.push(item);
        this._up();
    };
    /**
     * Pop the minimum item.
     *
     * @public
     */
    Heap.prototype.pop = function () {
        if (this.items.length <= 1) {
            return this.items.pop();
        }
        var r = this.items[0];
        this.items[0] = this.items.pop();
        this._down();
        return r;
    };
    /**
     * Sift down.
     */
    Heap.prototype._down = function (i) {
        if (i === void 0) { i = 0; }
        var len = this.items.length;
        for (;;) {
            var lx = left(i);
            if (lx >= len) {
                break;
            }
            var rx = right(i);
            var sm = rx < len ? (this.cmp(this.items[lx], this.items[rx]) === -1 ? lx : rx) : lx;
            if (this.cmp(this.items[sm], this.items[i]) >= 0) {
                break;
            }
            this.swap(sm, i);
            i = sm;
        }
    };
    /**
     * Sift up.
     */
    Heap.prototype._up = function () {
        var i = this.items.length - 1;
        while (i > 0) {
            var px = parent(i);
            if (this.cmp(this.items[i], this.items[px]) !== -1) {
                break;
            }
            this.swap(i, px);
            i = px;
        }
    };
    Heap.prototype.swap = function (i, j) {
        var tmp = this.items[i];
        this.items[i] = this.items[j];
        this.items[j] = tmp;
    };
    return Heap;
}());
exports.Heap = Heap;
//# sourceMappingURL=heap.js.map