{"version":3,"file":"cache.js","sourceRoot":"","sources":["../src/cache.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,OAAO,CAAC;AAE5B;;;;;;;;;;;;GAYG;AACH;IAGE,eACU,OAAyB,EACjC,QAAgB;QADR,YAAO,GAAP,OAAO,CAAkB;QAGjC,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACH,oBAAI,GAAJ;QACE,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;IAC7B,CAAC;IAED;;;;;OAKG;IACH,mBAAG,GAAH,UAAI,GAAW;QACb,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,KAAK,SAAS,EAAE,CAAC;YACpB,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACtB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAC3B,CAAC;QACD,OAAO,CAAC,CAAC;IACX,CAAC;IACH,YAAC;AAAD,CAAC,AAjCD,IAiCC","sourcesContent":["import { LRU } from './lru';\n\n/**\n * Links an arrow function to an LRU cache. The function converts\n * a string to a value of type T. The string itself is used as\n * the cache key.\n *\n * Examples:\n *  * Caching a number or date pattern. The cache key is the string\n *    representation of the pattern.\n *  * Caching any object that is expensive to create, where the cache\n *    key identifies the type of object to cache.\n *\n * @public\n */\nexport class Cache<T> {\n  private storage: LRU<T>;\n\n  constructor(\n    private builder: (s: string) => T,\n    capacity: number,\n  ) {\n    this.storage = new LRU(capacity);\n  }\n\n  /**\n   * Return the number of items stored in the cache.\n   *\n   * @public\n   */\n  size(): number {\n    return this.storage.size();\n  }\n\n  /**\n   * Fetch an item from the cache. If the item is not found,\n   * it will be built and stored in the cache.\n   *\n   * @public\n   */\n  get(raw: string): T {\n    let o = this.storage.get(raw);\n    if (o === undefined) {\n      o = this.builder(raw);\n      this.storage.set(raw, o);\n    }\n    return o;\n  }\n}\n"]}