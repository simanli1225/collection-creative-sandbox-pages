{"version":3,"file":"locale.js","sourceRoot":"","sources":["../src/locale.ts"],"names":[],"mappings":";;;AAAA,uDAAuE;AACvE,uCAA8C;AAE9C,IAAM,SAAS,GAAG,IAAI,0BAAW,EAAE,CAAC;AAyBpC;;;;GAIG;AACH;IAAA;IAcA,CAAC;IAbC;;;OAGG;IACI,sBAAO,GAAd,UAAe,EAAU;QACvB,IAAI,GAAG,GAAG,IAAA,+BAAgB,EAAC,EAAE,CAAC,CAAC;QAC/B,IAAI,GAAG,CAAC,WAAW,EAAE,IAAI,GAAG,CAAC,SAAS,EAAE,IAAI,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC;YAC5D,GAAG,GAAG,2BAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACtC,CAAC;aAAM,CAAC;YACN,GAAG,GAAG,SAAS,CAAC;QAClB,CAAC;QACD,OAAO,EAAE,EAAE,IAAA,EAAE,GAAG,KAAA,EAAE,CAAC;IACrB,CAAC;IACH,qBAAC;AAAD,CAAC,AAdD,IAcC;AAdY,wCAAc","sourcesContent":["import { parseLanguageTag, LanguageTag } from '@phensley/language-tag';\nimport { LanguageResolver } from './resolver';\n\nconst UNDEFINED = new LanguageTag();\n\n/**\n * Wrapper pairing an application's opaque locale identifier with a\n * parsed and resolved language tag object.\n *\n * @public\n */\nexport interface Locale {\n  /**\n   * Application's own identifier for the locale, e.g. 'en_US', 'fr-CA', etc.\n   * We preserve this since applications may use it as a unique key to\n   * resolve translated messages, and may be forced to use a legacy\n   * identifier.\n   */\n  readonly id: string;\n\n  /**\n   * Language tag that has been parsed and resolved. Parsing canonicalizes\n   * the subtags, while resolution includes substituting language and\n   * territory aliases and adding likely subtags.\n   */\n  readonly tag: LanguageTag;\n}\n\n/**\n * Merged declaration to add a resolve() method to Locale interface.\n *\n * @public\n */\nexport class LocaleResolver {\n  /**\n   * Parses a language tag and resolves it, substituting aliases and\n   * adding likely subtags.\n   */\n  static resolve(id: string): Locale {\n    let tag = parseLanguageTag(id);\n    if (tag.hasLanguage() || tag.hasScript() || tag.hasRegion()) {\n      tag = LanguageResolver.resolve(tag);\n    } else {\n      tag = UNDEFINED;\n    }\n    return { id, tag };\n  }\n}\n"]}